<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>LongMath xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../../../../../apidocs/com/google/common/math/LongMath.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2011 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.math;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkArgument;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.math.MathPreconditions.checkNonNegative;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.math.MathPreconditions.checkPositive;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.math.MathPreconditions.checkRoundingUnnecessary;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> java.lang.Math.min;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> java.math.RoundingMode.HALF_EVEN;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> java.math.RoundingMode.HALF_UP;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.VisibleForTesting;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> java.math.RoundingMode;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * A class for arithmetic on values of type {@code long}. Where possible, methods are defined and</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * named analogously to their {@code BigInteger} counterparts.</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;The implementations of many methods in this class are based on material from Henry S. Warren,</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * Jr.'s &lt;i&gt;Hacker's Delight&lt;/i&gt;, (Addison Wesley, 2002).</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;Similar functionality for {@code int} and for {@link BigInteger} can be found in</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * {@link IntMath} and {@link BigIntegerMath} respectively.  For other common operations on</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * {@code long} values, see {@link com.google.common.primitives.Longs}.</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * @author Louis Wasserman</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * @since 11.0</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/math/LongMath.html">LongMath</a> {
<a class="jxr_linenumber" name="L48" href="#L48">48</a>    <em class="jxr_comment">// NOTE: Whenever both tests are cheap and functional, it's faster to use &amp;, | instead of &amp;&amp;, ||</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  
<a class="jxr_linenumber" name="L50" href="#L50">50</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment">   * Returns {@code true} if {@code x} represents a power of two.</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">   * &lt;p&gt;This differs from {@code Long.bitCount(x) == 1}, because</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">   * {@code Long.bitCount(Long.MIN_VALUE) == 1}, but {@link Long#MIN_VALUE} is not a power of two.</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> isPowerOfTwo(<strong class="jxr_keyword">long</strong> x) {
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      <strong class="jxr_keyword">return</strong> x &gt; 0 &amp; (x &amp; (x - 1)) == 0;
<a class="jxr_linenumber" name="L58" href="#L58">58</a>    }
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">   * Returns 1 if {@code x &lt; y} as unsigned longs, and 0 otherwise.  Assumes that x - y fits into a</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">   * signed long.  The implementation is branch-free, and benchmarks suggest it is measurably</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">   * faster than the straightforward ternary expression.</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>    @VisibleForTesting
<a class="jxr_linenumber" name="L66" href="#L66">66</a>    <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">int</strong> lessThanBranchFree(<strong class="jxr_keyword">long</strong> x, <strong class="jxr_keyword">long</strong> y) {
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      <em class="jxr_comment">// Returns the sign bit of x - y.</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      <strong class="jxr_keyword">return</strong> (<strong class="jxr_keyword">int</strong>) (~~(x - y) &gt;&gt;&gt; (Long.SIZE - 1));
<a class="jxr_linenumber" name="L69" href="#L69">69</a>    }
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  
<a class="jxr_linenumber" name="L71" href="#L71">71</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment">   * Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code x &lt;= 0}</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment">   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment">   *         is not a power of two</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>    @SuppressWarnings(<span class="jxr_string">"fallthrough"</span>)
<a class="jxr_linenumber" name="L79" href="#L79">79</a>    <em class="jxr_comment">// TODO(kevinb): remove after this warning is disabled globally</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">int</strong> log2(<strong class="jxr_keyword">long</strong> x, RoundingMode mode) {
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      checkPositive(<span class="jxr_string">"x"</span>, x);
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      <strong class="jxr_keyword">switch</strong> (mode) {
<a class="jxr_linenumber" name="L83" href="#L83">83</a>        <strong class="jxr_keyword">case</strong> UNNECESSARY:
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          checkRoundingUnnecessary(isPowerOfTwo(x));
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          <em class="jxr_comment">// fall through</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>        <strong class="jxr_keyword">case</strong> DOWN:
<a class="jxr_linenumber" name="L87" href="#L87">87</a>        <strong class="jxr_keyword">case</strong> FLOOR:
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <strong class="jxr_keyword">return</strong> (Long.SIZE - 1) - Long.numberOfLeadingZeros(x);
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  
<a class="jxr_linenumber" name="L90" href="#L90">90</a>        <strong class="jxr_keyword">case</strong> UP:
<a class="jxr_linenumber" name="L91" href="#L91">91</a>        <strong class="jxr_keyword">case</strong> CEILING:
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          <strong class="jxr_keyword">return</strong> Long.SIZE - Long.numberOfLeadingZeros(x - 1);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  
<a class="jxr_linenumber" name="L94" href="#L94">94</a>        <strong class="jxr_keyword">case</strong> HALF_DOWN:
<a class="jxr_linenumber" name="L95" href="#L95">95</a>        <strong class="jxr_keyword">case</strong> HALF_UP:
<a class="jxr_linenumber" name="L96" href="#L96">96</a>        <strong class="jxr_keyword">case</strong> HALF_EVEN:
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          <em class="jxr_comment">// Since sqrt(2) is irrational, log2(x) - logFloor cannot be exactly 0.5</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          <strong class="jxr_keyword">int</strong> leadingZeros = Long.numberOfLeadingZeros(x);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          <strong class="jxr_keyword">long</strong> cmp = MAX_POWER_OF_SQRT2_UNSIGNED &gt;&gt;&gt; leadingZeros;
<a class="jxr_linenumber" name="L100" href="#L100">100</a>         <em class="jxr_comment">// floor(2^(logFloor + 0.5))</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         <strong class="jxr_keyword">int</strong> logFloor = (Long.SIZE - 1) - leadingZeros;
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         <strong class="jxr_keyword">return</strong> logFloor + lessThanBranchFree(cmp, x);
<a class="jxr_linenumber" name="L103" href="#L103">103</a> 
<a class="jxr_linenumber" name="L104" href="#L104">104</a>       <strong class="jxr_keyword">default</strong>:
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionError(<span class="jxr_string">"impossible"</span>);
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     }
<a class="jxr_linenumber" name="L107" href="#L107">107</a>   }
<a class="jxr_linenumber" name="L108" href="#L108">108</a> 
<a class="jxr_linenumber" name="L109" href="#L109">109</a>   <em class="jxr_javadoccomment">/** The biggest half power of two that fits into an unsigned long */</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a>   @VisibleForTesting <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> MAX_POWER_OF_SQRT2_UNSIGNED = 0xB504F333F9DE6484L;
<a class="jxr_linenumber" name="L111" href="#L111">111</a> 
<a class="jxr_linenumber" name="L112" href="#L112">112</a>   <em class="jxr_comment">// maxLog10ForLeadingZeros[i] == floor(log10(2^(Long.SIZE - i)))</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a>   @VisibleForTesting <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> byte[] maxLog10ForLeadingZeros = {
<a class="jxr_linenumber" name="L114" href="#L114">114</a>       19, 18, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 13, 13, 13, 12, 12,
<a class="jxr_linenumber" name="L115" href="#L115">115</a>       12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4,
<a class="jxr_linenumber" name="L116" href="#L116">116</a>       3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0 };
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>   <em class="jxr_comment">// halfPowersOf10[i] = largest long less than 10^(i + 0.5)</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> 
<a class="jxr_linenumber" name="L120" href="#L120">120</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment">   * Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">   * {@code a == 0 &amp;&amp; b == 0}.</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code a &lt; 0} or {@code b &lt; 0}</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">long</strong> gcd(<strong class="jxr_keyword">long</strong> a, <strong class="jxr_keyword">long</strong> b) {
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_comment">     * The reason we require both arguments to be &gt;= 0 is because otherwise, what do you return on</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_comment">     * gcd(0, Long.MIN_VALUE)? BigInteger.gcd would return positive 2^63, but positive 2^63 isn't</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a> <em class="jxr_comment">     * an int.</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     checkNonNegative(<span class="jxr_string">"a"</span>, a);
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     checkNonNegative(<span class="jxr_string">"b"</span>, b);
<a class="jxr_linenumber" name="L134" href="#L134">134</a>     <strong class="jxr_keyword">if</strong> (a == 0) {
<a class="jxr_linenumber" name="L135" href="#L135">135</a>       <em class="jxr_comment">// 0 % b == 0, so b divides a, but the converse doesn't hold.</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a>       <em class="jxr_comment">// BigInteger.gcd is consistent with this decision.</em>
<a class="jxr_linenumber" name="L137" href="#L137">137</a>       <strong class="jxr_keyword">return</strong> b;
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (b == 0) {
<a class="jxr_linenumber" name="L139" href="#L139">139</a>       <strong class="jxr_keyword">return</strong> a; <em class="jxr_comment">// similar logic</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     }
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a> <em class="jxr_comment">     * Uses the binary GCD algorithm; see <a href="http://en.wikipedia.org/wiki/Binary_GCD_algorithm" target="alexandria_uri">http://en.wikipedia.org/wiki/Binary_GCD_algorithm</a>.</em>
<a class="jxr_linenumber" name="L143" href="#L143">143</a> <em class="jxr_comment">     * This is &gt;60% faster than the Euclidean algorithm in benchmarks.</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     <strong class="jxr_keyword">int</strong> aTwos = Long.numberOfTrailingZeros(a);
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     a &gt;&gt;= aTwos; <em class="jxr_comment">// divide out all 2s</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     <strong class="jxr_keyword">int</strong> bTwos = Long.numberOfTrailingZeros(b);
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     b &gt;&gt;= bTwos; <em class="jxr_comment">// divide out all 2s</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     <strong class="jxr_keyword">while</strong> (a != b) { <em class="jxr_comment">// both a, b are odd</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a>       <em class="jxr_comment">// The key to the binary GCD algorithm is as follows:</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a>       <em class="jxr_comment">// Both a and b are odd.  Assume a &gt; b; then gcd(a - b, b) = gcd(a, b).</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a>       <em class="jxr_comment">// But in gcd(a - b, b), a - b is even and b is odd, so we can divide out powers of two.</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> 
<a class="jxr_linenumber" name="L154" href="#L154">154</a>       <em class="jxr_comment">// We bend over backwards to avoid branching, adapting a technique from</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a>       <em class="jxr_comment">// http://graphics.stanford.edu/~seander/bithacks.html#IntegerMinOrMax</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> 
<a class="jxr_linenumber" name="L157" href="#L157">157</a>       <strong class="jxr_keyword">long</strong> delta = a - b; <em class="jxr_comment">// can't overflow, since a and b are nonnegative</em>
<a class="jxr_linenumber" name="L158" href="#L158">158</a> 
<a class="jxr_linenumber" name="L159" href="#L159">159</a>       <strong class="jxr_keyword">long</strong> minDeltaOrZero = delta &amp; (delta &gt;&gt; (Long.SIZE - 1));
<a class="jxr_linenumber" name="L160" href="#L160">160</a>       <em class="jxr_comment">// equivalent to Math.min(delta, 0)</em>
<a class="jxr_linenumber" name="L161" href="#L161">161</a> 
<a class="jxr_linenumber" name="L162" href="#L162">162</a>       a = delta - minDeltaOrZero - minDeltaOrZero; <em class="jxr_comment">// sets a to Math.abs(a - b)</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a>       <em class="jxr_comment">// a is now nonnegative and even</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a> 
<a class="jxr_linenumber" name="L165" href="#L165">165</a>       b += minDeltaOrZero; <em class="jxr_comment">// sets b to min(old a, b)</em>
<a class="jxr_linenumber" name="L166" href="#L166">166</a>       a &gt;&gt;= Long.numberOfTrailingZeros(a); <em class="jxr_comment">// divide out all 2s, since 2 doesn't divide b</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     }
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     <strong class="jxr_keyword">return</strong> a &lt;&lt; min(aTwos, bTwos);
<a class="jxr_linenumber" name="L169" href="#L169">169</a>   }
<a class="jxr_linenumber" name="L170" href="#L170">170</a> 
<a class="jxr_linenumber" name="L171" href="#L171">171</a>   @VisibleForTesting <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> FLOOR_SQRT_MAX_LONG = 3037000499L;
<a class="jxr_linenumber" name="L172" href="#L172">172</a> 
<a class="jxr_linenumber" name="L173" href="#L173">173</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong>[] factorials = {
<a class="jxr_linenumber" name="L174" href="#L174">174</a>       1L,
<a class="jxr_linenumber" name="L175" href="#L175">175</a>       1L,
<a class="jxr_linenumber" name="L176" href="#L176">176</a>       1L * 2,
<a class="jxr_linenumber" name="L177" href="#L177">177</a>       1L * 2 * 3,
<a class="jxr_linenumber" name="L178" href="#L178">178</a>       1L * 2 * 3 * 4,
<a class="jxr_linenumber" name="L179" href="#L179">179</a>       1L * 2 * 3 * 4 * 5,
<a class="jxr_linenumber" name="L180" href="#L180">180</a>       1L * 2 * 3 * 4 * 5 * 6,
<a class="jxr_linenumber" name="L181" href="#L181">181</a>       1L * 2 * 3 * 4 * 5 * 6 * 7,
<a class="jxr_linenumber" name="L182" href="#L182">182</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8,
<a class="jxr_linenumber" name="L183" href="#L183">183</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9,
<a class="jxr_linenumber" name="L184" href="#L184">184</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10,
<a class="jxr_linenumber" name="L185" href="#L185">185</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11,
<a class="jxr_linenumber" name="L186" href="#L186">186</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12,
<a class="jxr_linenumber" name="L187" href="#L187">187</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13,
<a class="jxr_linenumber" name="L188" href="#L188">188</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14,
<a class="jxr_linenumber" name="L189" href="#L189">189</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15,
<a class="jxr_linenumber" name="L190" href="#L190">190</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16,
<a class="jxr_linenumber" name="L191" href="#L191">191</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17,
<a class="jxr_linenumber" name="L192" href="#L192">192</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18,
<a class="jxr_linenumber" name="L193" href="#L193">193</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19,
<a class="jxr_linenumber" name="L194" href="#L194">194</a>       1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20
<a class="jxr_linenumber" name="L195" href="#L195">195</a>   };
<a class="jxr_linenumber" name="L196" href="#L196">196</a> 
<a class="jxr_linenumber" name="L197" href="#L197">197</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a> <em class="jxr_javadoccomment">   * Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and</em>
<a class="jxr_linenumber" name="L199" href="#L199">199</a> <em class="jxr_javadoccomment">   * {@code k}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.</em>
<a class="jxr_linenumber" name="L200" href="#L200">200</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L201" href="#L201">201</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code n &lt; 0}, {@code k &lt; 0}, or {@code k &gt; n}</em>
<a class="jxr_linenumber" name="L202" href="#L202">202</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L203" href="#L203">203</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">long</strong> binomial(<strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">int</strong> k) {
<a class="jxr_linenumber" name="L204" href="#L204">204</a>     checkNonNegative(<span class="jxr_string">"n"</span>, n);
<a class="jxr_linenumber" name="L205" href="#L205">205</a>     checkNonNegative(<span class="jxr_string">"k"</span>, k);
<a class="jxr_linenumber" name="L206" href="#L206">206</a>     checkArgument(k &lt;= n, <span class="jxr_string">"k (%s) &gt; n (%s)"</span>, k, n);
<a class="jxr_linenumber" name="L207" href="#L207">207</a>     <strong class="jxr_keyword">if</strong> (k &gt; (n &gt;&gt; 1)) {
<a class="jxr_linenumber" name="L208" href="#L208">208</a>       k = n - k;
<a class="jxr_linenumber" name="L209" href="#L209">209</a>     }
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     <strong class="jxr_keyword">switch</strong> (k) {
<a class="jxr_linenumber" name="L211" href="#L211">211</a>       <strong class="jxr_keyword">case</strong> 0:
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         <strong class="jxr_keyword">return</strong> 1;
<a class="jxr_linenumber" name="L213" href="#L213">213</a>       <strong class="jxr_keyword">case</strong> 1:
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         <strong class="jxr_keyword">return</strong> n;
<a class="jxr_linenumber" name="L215" href="#L215">215</a>       <strong class="jxr_keyword">default</strong>:
<a class="jxr_linenumber" name="L216" href="#L216">216</a>         <strong class="jxr_keyword">if</strong> (n &lt; factorials.length) {
<a class="jxr_linenumber" name="L217" href="#L217">217</a>           <strong class="jxr_keyword">return</strong> factorials[n] / (factorials[k] * factorials[n - k]);
<a class="jxr_linenumber" name="L218" href="#L218">218</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (k &gt;= biggestBinomials.length || n &gt; biggestBinomials[k]) {
<a class="jxr_linenumber" name="L219" href="#L219">219</a>           <strong class="jxr_keyword">return</strong> Long.MAX_VALUE;
<a class="jxr_linenumber" name="L220" href="#L220">220</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (k &lt; biggestSimpleBinomials.length &amp;&amp; n &lt;= biggestSimpleBinomials[k]) {
<a class="jxr_linenumber" name="L221" href="#L221">221</a>           <em class="jxr_comment">// guaranteed not to overflow</em>
<a class="jxr_linenumber" name="L222" href="#L222">222</a>           <strong class="jxr_keyword">long</strong> result = n--;
<a class="jxr_linenumber" name="L223" href="#L223">223</a>           <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 2; i &lt;= k; n--, i++) {
<a class="jxr_linenumber" name="L224" href="#L224">224</a>             result *= n;
<a class="jxr_linenumber" name="L225" href="#L225">225</a>             result /= i;
<a class="jxr_linenumber" name="L226" href="#L226">226</a>           }
<a class="jxr_linenumber" name="L227" href="#L227">227</a>           <strong class="jxr_keyword">return</strong> result;
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L229" href="#L229">229</a>           <strong class="jxr_keyword">int</strong> nBits = LongMath.log2(n, RoundingMode.CEILING);
<a class="jxr_linenumber" name="L230" href="#L230">230</a> 
<a class="jxr_linenumber" name="L231" href="#L231">231</a>           <strong class="jxr_keyword">long</strong> result = 1;
<a class="jxr_linenumber" name="L232" href="#L232">232</a>           <strong class="jxr_keyword">long</strong> numerator = n--;
<a class="jxr_linenumber" name="L233" href="#L233">233</a>           <strong class="jxr_keyword">long</strong> denominator = 1;
<a class="jxr_linenumber" name="L234" href="#L234">234</a> 
<a class="jxr_linenumber" name="L235" href="#L235">235</a>           <strong class="jxr_keyword">int</strong> numeratorBits = nBits;
<a class="jxr_linenumber" name="L236" href="#L236">236</a>           <em class="jxr_comment">// This is an upper bound on log2(numerator, ceiling).</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a> 
<a class="jxr_linenumber" name="L238" href="#L238">238</a>           <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a> <em class="jxr_comment">           * We want to do this in long math for speed, but want to avoid overflow. We adapt the</em>
<a class="jxr_linenumber" name="L240" href="#L240">240</a> <em class="jxr_comment">           * technique previously used by BigIntegerMath: maintain separate numerator and</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a> <em class="jxr_comment">           * denominator accumulators, multiplying the fraction into result when near overflow.</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a> <em class="jxr_comment">           */</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a>           <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 2; i &lt;= k; i++, n--) {
<a class="jxr_linenumber" name="L244" href="#L244">244</a>             <strong class="jxr_keyword">if</strong> (numeratorBits + nBits &lt; Long.SIZE - 1) {
<a class="jxr_linenumber" name="L245" href="#L245">245</a>               <em class="jxr_comment">// It's definitely safe to multiply into numerator and denominator.</em>
<a class="jxr_linenumber" name="L246" href="#L246">246</a>               numerator *= n;
<a class="jxr_linenumber" name="L247" href="#L247">247</a>               denominator *= i;
<a class="jxr_linenumber" name="L248" href="#L248">248</a>               numeratorBits += nBits;
<a class="jxr_linenumber" name="L249" href="#L249">249</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L250" href="#L250">250</a>               <em class="jxr_comment">// It might not be safe to multiply into numerator and denominator,</em>
<a class="jxr_linenumber" name="L251" href="#L251">251</a>               <em class="jxr_comment">// so multiply (numerator / denominator) into result.</em>
<a class="jxr_linenumber" name="L252" href="#L252">252</a>               result = multiplyFraction(result, numerator, denominator);
<a class="jxr_linenumber" name="L253" href="#L253">253</a>               numerator = n;
<a class="jxr_linenumber" name="L254" href="#L254">254</a>               denominator = i;
<a class="jxr_linenumber" name="L255" href="#L255">255</a>               numeratorBits = nBits;
<a class="jxr_linenumber" name="L256" href="#L256">256</a>             }
<a class="jxr_linenumber" name="L257" href="#L257">257</a>           }
<a class="jxr_linenumber" name="L258" href="#L258">258</a>           <strong class="jxr_keyword">return</strong> multiplyFraction(result, numerator, denominator);
<a class="jxr_linenumber" name="L259" href="#L259">259</a>         }
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     }
<a class="jxr_linenumber" name="L261" href="#L261">261</a>   }
<a class="jxr_linenumber" name="L262" href="#L262">262</a> 
<a class="jxr_linenumber" name="L263" href="#L263">263</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a> <em class="jxr_javadoccomment">   * Returns (x * numerator / denominator), which is assumed to come out to an integral value.</em>
<a class="jxr_linenumber" name="L265" href="#L265">265</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L266" href="#L266">266</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">long</strong> multiplyFraction(<strong class="jxr_keyword">long</strong> x, <strong class="jxr_keyword">long</strong> numerator, <strong class="jxr_keyword">long</strong> denominator) {
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     <strong class="jxr_keyword">if</strong> (x == 1) {
<a class="jxr_linenumber" name="L268" href="#L268">268</a>       <strong class="jxr_keyword">return</strong> numerator / denominator;
<a class="jxr_linenumber" name="L269" href="#L269">269</a>     }
<a class="jxr_linenumber" name="L270" href="#L270">270</a>     <strong class="jxr_keyword">long</strong> commonDivisor = gcd(x, denominator);
<a class="jxr_linenumber" name="L271" href="#L271">271</a>     x /= commonDivisor;
<a class="jxr_linenumber" name="L272" href="#L272">272</a>     denominator /= commonDivisor;
<a class="jxr_linenumber" name="L273" href="#L273">273</a>     <em class="jxr_comment">// We know gcd(x, denominator) = 1, and x * numerator / denominator is exact,</em>
<a class="jxr_linenumber" name="L274" href="#L274">274</a>     <em class="jxr_comment">// so denominator must be a divisor of numerator.</em>
<a class="jxr_linenumber" name="L275" href="#L275">275</a>     <strong class="jxr_keyword">return</strong> x * (numerator / denominator);
<a class="jxr_linenumber" name="L276" href="#L276">276</a>   }
<a class="jxr_linenumber" name="L277" href="#L277">277</a> 
<a class="jxr_linenumber" name="L278" href="#L278">278</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L279" href="#L279">279</a> <em class="jxr_comment">   * binomial(biggestBinomials[k], k) fits in a long, but not</em>
<a class="jxr_linenumber" name="L280" href="#L280">280</a> <em class="jxr_comment">   * binomial(biggestBinomials[k] + 1, k).</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a> <em class="jxr_comment">   */</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] biggestBinomials =
<a class="jxr_linenumber" name="L283" href="#L283">283</a>       {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 3810779, 121977, 16175, 4337, 1733,
<a class="jxr_linenumber" name="L284" href="#L284">284</a>           887, 534, 361, 265, 206, 169, 143, 125, 111, 101, 94, 88, 83, 79, 76, 74, 72, 70, 69, 68,
<a class="jxr_linenumber" name="L285" href="#L285">285</a>           67, 67, 66, 66, 66, 66};
<a class="jxr_linenumber" name="L286" href="#L286">286</a> 
<a class="jxr_linenumber" name="L287" href="#L287">287</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L288" href="#L288">288</a> <em class="jxr_comment">   * binomial(biggestSimpleBinomials[k], k) doesn't need to use the slower GCD-based impl,</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> <em class="jxr_comment">   * but binomial(biggestSimpleBinomials[k] + 1, k) does.</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a> <em class="jxr_comment">   */</em>
<a class="jxr_linenumber" name="L291" href="#L291">291</a>   @VisibleForTesting <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] biggestSimpleBinomials =
<a class="jxr_linenumber" name="L292" href="#L292">292</a>       {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 2642246, 86251, 11724, 3218, 1313,
<a class="jxr_linenumber" name="L293" href="#L293">293</a>           684, 419, 287, 214, 169, 139, 119, 105, 95, 87, 81, 76, 73, 70, 68, 66, 64, 63, 62, 62,
<a class="jxr_linenumber" name="L294" href="#L294">294</a>           61, 61, 61};
<a class="jxr_linenumber" name="L295" href="#L295">295</a>   <em class="jxr_comment">// These values were generated by using checkedMultiply to see when the simple multiply/divide</em>
<a class="jxr_linenumber" name="L296" href="#L296">296</a>   <em class="jxr_comment">// algorithm would lead to an overflow.</em>
<a class="jxr_linenumber" name="L297" href="#L297">297</a> 
<a class="jxr_linenumber" name="L298" href="#L298">298</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> fitsInInt(<strong class="jxr_keyword">long</strong> x) {
<a class="jxr_linenumber" name="L299" href="#L299">299</a>     <strong class="jxr_keyword">return</strong> (<strong class="jxr_keyword">int</strong>) x == x;
<a class="jxr_linenumber" name="L300" href="#L300">300</a>   }
<a class="jxr_linenumber" name="L301" href="#L301">301</a> 
<a class="jxr_linenumber" name="L302" href="#L302">302</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L303" href="#L303">303</a> <em class="jxr_javadoccomment">   * Returns the arithmetic mean of {@code x} and {@code y}, rounded toward</em>
<a class="jxr_linenumber" name="L304" href="#L304">304</a> <em class="jxr_javadoccomment">   * negative infinity. This method is resilient to overflow.</em>
<a class="jxr_linenumber" name="L305" href="#L305">305</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L306" href="#L306">306</a> <em class="jxr_javadoccomment">   * @since 14.0</em>
<a class="jxr_linenumber" name="L307" href="#L307">307</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L308" href="#L308">308</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">long</strong> mean(<strong class="jxr_keyword">long</strong> x, <strong class="jxr_keyword">long</strong> y) {
<a class="jxr_linenumber" name="L309" href="#L309">309</a>     <em class="jxr_comment">// Efficient method for computing the arithmetic mean.</em>
<a class="jxr_linenumber" name="L310" href="#L310">310</a>     <em class="jxr_comment">// The alternative (x + y) / 2 fails for large values.</em>
<a class="jxr_linenumber" name="L311" href="#L311">311</a>     <em class="jxr_comment">// The alternative (x + y) &gt;&gt;&gt; 1 fails for negative values.</em>
<a class="jxr_linenumber" name="L312" href="#L312">312</a>     <strong class="jxr_keyword">return</strong> (x &amp; y) + ((x ^ y) &gt;&gt; 1);
<a class="jxr_linenumber" name="L313" href="#L313">313</a>   }
<a class="jxr_linenumber" name="L314" href="#L314">314</a> 
<a class="jxr_linenumber" name="L315" href="#L315">315</a>   <strong class="jxr_keyword">private</strong> <a href="../../../../com/google/common/math/LongMath.html">LongMath</a>() {}
<a class="jxr_linenumber" name="L316" href="#L316">316</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
