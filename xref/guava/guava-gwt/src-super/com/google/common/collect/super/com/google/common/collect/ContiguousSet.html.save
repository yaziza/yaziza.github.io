<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>ContiguousSet xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../../../../../apidocs/com/google/common/collect/ContiguousSet.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2010 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * in compliance with the License. You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software distributed under the License</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * or implied. See the License for the specific language governing permissions and limitations under</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * the License.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <strong class="jxr_keyword">package</strong> com.google.common.collect;
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkArgument;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkNotNull;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.Beta;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> java.util.NoSuchElementException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <em class="jxr_javadoccomment"> * A sorted set of contiguous values in a given {@link DiscreteDomain}.</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Be extremely careful what you do with conceptually large instances (such as</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * {@code ContiguousSet.create(Range.greaterThan(0), DiscreteDomain.integers()}). Certain</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * operations on such a set can be performed efficiently, but others (such as {@link Set#hashCode}</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * or {@link Collections#frequency}) can cause major performance problems.</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * @author Gregory Kick</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * @since 10.0</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  @Beta
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  @SuppressWarnings(<span class="jxr_string">"rawtypes"</span>) <em class="jxr_comment">// allow ungenerified Comparable types</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">class</strong> ContiguousSet&lt;C <strong class="jxr_keyword">extends</strong> Comparable&gt; <strong class="jxr_keyword">extends</strong> ImmutableSortedSet&lt;C&gt; {
<a class="jxr_linenumber" name="L40" href="#L40">40</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment">   * Returns a {@code ContiguousSet} containing the same values in the given domain</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment">   * {@linkplain Range#contains contained} by the range.</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment">   *     neither has an upper bound</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment">   * @since 13.0</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;C <strong class="jxr_keyword">extends</strong> Comparable&gt; ContiguousSet&lt;C&gt; create(
<a class="jxr_linenumber" name="L50" href="#L50">50</a>        Range&lt;C&gt; range, DiscreteDomain&lt;C&gt; domain) {
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      checkNotNull(range);
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      checkNotNull(domain);
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      Range&lt;C&gt; effectiveRange = range;
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L55" href="#L55">55</a>        <strong class="jxr_keyword">if</strong> (!range.hasLowerBound()) {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          effectiveRange = effectiveRange.intersection(Range.atLeast(domain.minValue()));
<a class="jxr_linenumber" name="L57" href="#L57">57</a>        }
<a class="jxr_linenumber" name="L58" href="#L58">58</a>        <strong class="jxr_keyword">if</strong> (!range.hasUpperBound()) {
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          effectiveRange = effectiveRange.intersection(Range.atMost(domain.maxValue()));
<a class="jxr_linenumber" name="L60" href="#L60">60</a>        }
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      } <strong class="jxr_keyword">catch</strong> (NoSuchElementException e) {
<a class="jxr_linenumber" name="L62" href="#L62">62</a>        <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalArgumentException(e);
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      }
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      <em class="jxr_comment">// Per class spec, we are allowed to throw CCE if necessary</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      <strong class="jxr_keyword">boolean</strong> empty = effectiveRange.isEmpty()
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          || Range.compareOrThrow(
<a class="jxr_linenumber" name="L68" href="#L68">68</a>              range.lowerBound.leastValueAbove(domain),
<a class="jxr_linenumber" name="L69" href="#L69">69</a>              range.upperBound.greatestValueBelow(domain)) &gt; 0;
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <strong class="jxr_keyword">return</strong> empty
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          ? <strong class="jxr_keyword">new</strong> EmptyContiguousSet&lt;C&gt;(domain)
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          : <strong class="jxr_keyword">new</strong> RegularContiguousSet&lt;C&gt;(effectiveRange, domain);
<a class="jxr_linenumber" name="L74" href="#L74">74</a>    }
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  
<a class="jxr_linenumber" name="L76" href="#L76">76</a>    <strong class="jxr_keyword">final</strong> DiscreteDomain&lt;C&gt; domain;
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>    <a href="../../../../com/google/common/collect/ContiguousSet.html">ContiguousSet</a>(DiscreteDomain&lt;C&gt; domain) {
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      <strong class="jxr_keyword">super</strong>(Ordering.natural());
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      <strong class="jxr_keyword">this</strong>.domain = domain;
<a class="jxr_linenumber" name="L81" href="#L81">81</a>    }
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  
<a class="jxr_linenumber" name="L83" href="#L83">83</a>    @Override <strong class="jxr_keyword">public</strong> ContiguousSet&lt;C&gt; headSet(C toElement) {
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      <strong class="jxr_keyword">return</strong> headSetImpl(checkNotNull(toElement), false);
<a class="jxr_linenumber" name="L85" href="#L85">85</a>    }
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  
<a class="jxr_linenumber" name="L87" href="#L87">87</a>    @Override <strong class="jxr_keyword">public</strong> ContiguousSet&lt;C&gt; subSet(C fromElement, C toElement) {
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      checkNotNull(fromElement);
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      checkNotNull(toElement);
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      checkArgument(comparator().compare(fromElement, toElement) &lt;= 0);
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      <strong class="jxr_keyword">return</strong> subSetImpl(fromElement, <strong class="jxr_keyword">true</strong>, toElement, false);
<a class="jxr_linenumber" name="L92" href="#L92">92</a>    }
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  
<a class="jxr_linenumber" name="L94" href="#L94">94</a>    @Override <strong class="jxr_keyword">public</strong> ContiguousSet&lt;C&gt; tailSet(C fromElement) {
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      <strong class="jxr_keyword">return</strong> tailSetImpl(checkNotNull(fromElement), <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L96" href="#L96">96</a>    }
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  
<a class="jxr_linenumber" name="L98" href="#L98">98</a>    <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_comment">   * These methods perform most headSet, subSet, and tailSet logic, besides parameter validation.</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_comment">   */</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a>   <em class="jxr_comment">/*@Override*/</em> <strong class="jxr_keyword">abstract</strong> ContiguousSet&lt;C&gt; headSetImpl(C toElement, <strong class="jxr_keyword">boolean</strong> inclusive);
<a class="jxr_linenumber" name="L102" href="#L102">102</a> 
<a class="jxr_linenumber" name="L103" href="#L103">103</a>   <em class="jxr_comment">/*@Override*/</em> <strong class="jxr_keyword">abstract</strong> ContiguousSet&lt;C&gt; subSetImpl(C fromElement, <strong class="jxr_keyword">boolean</strong> fromInclusive,
<a class="jxr_linenumber" name="L104" href="#L104">104</a>       C toElement, <strong class="jxr_keyword">boolean</strong> toInclusive);
<a class="jxr_linenumber" name="L105" href="#L105">105</a> 
<a class="jxr_linenumber" name="L106" href="#L106">106</a>   <em class="jxr_comment">/*@Override*/</em> <strong class="jxr_keyword">abstract</strong> ContiguousSet&lt;C&gt; tailSetImpl(C fromElement, <strong class="jxr_keyword">boolean</strong> inclusive);
<a class="jxr_linenumber" name="L107" href="#L107">107</a> 
<a class="jxr_linenumber" name="L108" href="#L108">108</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <em class="jxr_javadoccomment">   * Returns the set of values that are contained in both this set and the other.</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <em class="jxr_javadoccomment">   * &lt;p&gt;This method should always be used instead of</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">   * {@link Sets#intersection} for {@link ContiguousSet} instances.</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> ContiguousSet&lt;C&gt; intersection(ContiguousSet&lt;C&gt; other);
<a class="jxr_linenumber" name="L115" href="#L115">115</a> 
<a class="jxr_linenumber" name="L116" href="#L116">116</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <em class="jxr_javadoccomment">   * Returns a range, closed on both ends, whose endpoints are the minimum and maximum values</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <em class="jxr_javadoccomment">   * contained in this set.  This is equivalent to {@code range(CLOSED, CLOSED)}.</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment">   * @throws NoSuchElementException if this set is empty</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> Range&lt;C&gt; range();
<a class="jxr_linenumber" name="L123" href="#L123">123</a> 
<a class="jxr_linenumber" name="L124" href="#L124">124</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">   * Returns the minimal range with the given boundary types for which all values in this set are</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">   * {@linkplain Range#contains(Comparable) contained} within the range.</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Note that this method will return ranges with unbounded endpoints if {@link BoundType#OPEN}</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment">   * is requested for a domain minimum or maximum.  For example, if {@code set} was created from the</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a> <em class="jxr_javadoccomment">   * range {@code [1..Integer.MAX_VALUE]} then {@code set.range(CLOSED, OPEN)} must return</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment">   * {@code [1..∞)}.</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a> <em class="jxr_javadoccomment">   * @throws NoSuchElementException if this set is empty</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> Range&lt;C&gt; range(<a href="../../../../com/google/common/collect/BoundType.html">BoundType</a> lowerBoundType, <a href="../../../../com/google/common/collect/BoundType.html">BoundType</a> upperBoundType);
<a class="jxr_linenumber" name="L136" href="#L136">136</a> 
<a class="jxr_linenumber" name="L137" href="#L137">137</a>   <em class="jxr_javadoccomment">/** Returns a short-hand representation of the contents such as {@code "[1..100]"}. */</em>
<a class="jxr_linenumber" name="L138" href="#L138">138</a>   @Override <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L139" href="#L139">139</a>     <strong class="jxr_keyword">return</strong> range().toString();
<a class="jxr_linenumber" name="L140" href="#L140">140</a>   }
<a class="jxr_linenumber" name="L141" href="#L141">141</a> 
<a class="jxr_linenumber" name="L142" href="#L142">142</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L143" href="#L143">143</a> <em class="jxr_javadoccomment">   * Not supported. {@code ContiguousSet} instances are constructed with {@link #create}. This</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <em class="jxr_javadoccomment">   * method exists only to hide {@link ImmutableSet#builder} from consumers of {@code</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a> <em class="jxr_javadoccomment">   * ContiguousSet}.</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a> <em class="jxr_javadoccomment">   * @throws UnsupportedOperationException always</em>
<a class="jxr_linenumber" name="L148" href="#L148">148</a> <em class="jxr_javadoccomment">   * @deprecated Use {@link #create}.</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a>   @Deprecated <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;E&gt; ImmutableSortedSet.Builder&lt;E&gt; builder() {
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> UnsupportedOperationException();
<a class="jxr_linenumber" name="L152" href="#L152">152</a>   }
<a class="jxr_linenumber" name="L153" href="#L153">153</a> }
<a class="jxr_linenumber" name="L154" href="#L154">154</a> 
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
