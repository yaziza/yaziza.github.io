<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Iterators xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../../../../../apidocs/com/google/common/collect/Iterators.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2007 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.collect;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkArgument;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkNotNull;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkState;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Predicates.equalTo;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Predicates.in;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Predicates.not;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.collect.CollectPreconditions.checkRemove;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.Beta;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Function;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Objects;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Optional;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Preconditions;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Predicate;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> java.util.Collections;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> java.util.Comparator;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">import</strong> java.util.Enumeration;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <strong class="jxr_keyword">import</strong> java.util.Iterator;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <strong class="jxr_keyword">import</strong> java.util.ListIterator;
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <strong class="jxr_keyword">import</strong> java.util.NoSuchElementException;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <strong class="jxr_keyword">import</strong> java.util.PriorityQueue;
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <strong class="jxr_keyword">import</strong> java.util.Queue;
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <strong class="jxr_keyword">import</strong> javax.annotation.Nullable;
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> * This class contains static utility methods that operate on or return objects</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> * of type {@link Iterator}. Except as noted, each method has a corresponding</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> * {@link Iterable}-based method in the {@link Iterables} class.</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;&lt;i&gt;Performance notes:&lt;/i&gt; Unless otherwise noted, all of the iterators</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment"> * produced in this class are &lt;i&gt;lazy&lt;/i&gt;, which means that they only advance</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment"> * the backing iteration when absolutely necessary.</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;See the Guava User Guide section on &lt;a href=</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment"> * "<a href="http://code.google.com/p/guava-libraries/wiki/CollectionUtilitiesExplained" target="alexandria_uri">http://code.google.com/p/guava-libraries/wiki/CollectionUtilitiesExplained</a>#Iterables"&gt;</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment"> * {@code Iterators}&lt;/a&gt;.</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment"> * @author Kevin Bourrillion</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment"> * @author Jared Levy</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment"> * @since 2.0 (imported from Google Collections Library)</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/collect/Iterators.html">Iterators</a> {
<a class="jxr_linenumber" name="L68" href="#L68">68</a>    <strong class="jxr_keyword">private</strong> <a href="../../../../com/google/common/collect/Iterators.html">Iterators</a>() {}
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  
<a class="jxr_linenumber" name="L70" href="#L70">70</a>    <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> UnmodifiableListIterator&lt;Object&gt; EMPTY_LIST_ITERATOR
<a class="jxr_linenumber" name="L71" href="#L71">71</a>        = <strong class="jxr_keyword">new</strong> UnmodifiableListIterator&lt;Object&gt;() {
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          @Override
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L74" href="#L74">74</a>            <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          }
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          @Override
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          <strong class="jxr_keyword">public</strong> Object next() {
<a class="jxr_linenumber" name="L78" href="#L78">78</a>            <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          }
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          @Override
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasPrevious() {
<a class="jxr_linenumber" name="L82" href="#L82">82</a>            <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          }
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          @Override
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          <strong class="jxr_keyword">public</strong> Object previous() {
<a class="jxr_linenumber" name="L86" href="#L86">86</a>            <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          }
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          @Override
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> nextIndex() {
<a class="jxr_linenumber" name="L90" href="#L90">90</a>            <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          }
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          @Override
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> previousIndex() {
<a class="jxr_linenumber" name="L94" href="#L94">94</a>            <strong class="jxr_keyword">return</strong> -1;
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          }
<a class="jxr_linenumber" name="L96" href="#L96">96</a>        };
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  
<a class="jxr_linenumber" name="L98" href="#L98">98</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment">   * Returns the empty iterator.</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The {@link Iterable} equivalent of this method is {@link</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment">   * ImmutableSet#of()}.</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <em class="jxr_javadoccomment">   * @deprecated Use {@code ImmutableSet.&lt;T&gt;of().iterator()} instead; or for</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a> <em class="jxr_javadoccomment">   *     Java 7 or later, {@link Collections#emptyIterator}. This method is</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a> <em class="jxr_javadoccomment">   *     scheduled for removal in May 2016.</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a>   @Deprecated
<a class="jxr_linenumber" name="L109" href="#L109">109</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;T&gt; emptyIterator() {
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     <strong class="jxr_keyword">return</strong> emptyListIterator();
<a class="jxr_linenumber" name="L111" href="#L111">111</a>   }
<a class="jxr_linenumber" name="L112" href="#L112">112</a> 
<a class="jxr_linenumber" name="L113" href="#L113">113</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">   * Returns the empty iterator.</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The {@link Iterable} equivalent of this method is {@link</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <em class="jxr_javadoccomment">   * ImmutableSet#of()}.</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a>   <em class="jxr_comment">// Casting to any type is safe since there are no actual elements.</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a>   @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L121" href="#L121">121</a>   <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableListIterator&lt;T&gt; emptyListIterator() {
<a class="jxr_linenumber" name="L122" href="#L122">122</a>     <strong class="jxr_keyword">return</strong> (UnmodifiableListIterator&lt;T&gt;) EMPTY_LIST_ITERATOR;
<a class="jxr_linenumber" name="L123" href="#L123">123</a>   }
<a class="jxr_linenumber" name="L124" href="#L124">124</a> 
<a class="jxr_linenumber" name="L125" href="#L125">125</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> Iterator&lt;Object&gt; EMPTY_MODIFIABLE_ITERATOR =
<a class="jxr_linenumber" name="L126" href="#L126">126</a>       <strong class="jxr_keyword">new</strong> Iterator&lt;Object&gt;() {
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L128" href="#L128">128</a>           <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         }
<a class="jxr_linenumber" name="L130" href="#L130">130</a> 
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         @Override <strong class="jxr_keyword">public</strong> Object next() {
<a class="jxr_linenumber" name="L132" href="#L132">132</a>           <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         }
<a class="jxr_linenumber" name="L134" href="#L134">134</a> 
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> remove() {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>           checkRemove(false);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>         }
<a class="jxr_linenumber" name="L138" href="#L138">138</a>       };
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a> <em class="jxr_javadoccomment">   * Returns the empty {@code Iterator} that throws</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a> <em class="jxr_javadoccomment">   * {@link IllegalStateException} instead of</em>
<a class="jxr_linenumber" name="L143" href="#L143">143</a> <em class="jxr_javadoccomment">   * {@link UnsupportedOperationException} on a call to</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <em class="jxr_javadoccomment">   * {@link Iterator#remove()}.</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a>   <em class="jxr_comment">// Casting to any type is safe since there are no actual elements.</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a>   @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L148" href="#L148">148</a>   <strong class="jxr_keyword">static</strong> &lt;T&gt; Iterator&lt;T&gt; emptyModifiableIterator() {
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     <strong class="jxr_keyword">return</strong> (Iterator&lt;T&gt;) EMPTY_MODIFIABLE_ITERATOR;
<a class="jxr_linenumber" name="L150" href="#L150">150</a>   }
<a class="jxr_linenumber" name="L151" href="#L151">151</a> 
<a class="jxr_linenumber" name="L152" href="#L152">152</a>   <em class="jxr_javadoccomment">/** Returns an unmodifiable view of {@code iterator}. */</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;T&gt; unmodifiableIterator(
<a class="jxr_linenumber" name="L154" href="#L154">154</a>       <strong class="jxr_keyword">final</strong> Iterator&lt;T&gt; iterator) {
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     checkNotNull(iterator);
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     <strong class="jxr_keyword">if</strong> (iterator instanceof UnmodifiableIterator) {
<a class="jxr_linenumber" name="L157" href="#L157">157</a>       <strong class="jxr_keyword">return</strong> (UnmodifiableIterator&lt;T&gt;) iterator;
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     }
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> UnmodifiableIterator&lt;T&gt;() {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>       @Override
<a class="jxr_linenumber" name="L161" href="#L161">161</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         <strong class="jxr_keyword">return</strong> iterator.hasNext();
<a class="jxr_linenumber" name="L163" href="#L163">163</a>       }
<a class="jxr_linenumber" name="L164" href="#L164">164</a>       @Override
<a class="jxr_linenumber" name="L165" href="#L165">165</a>       <strong class="jxr_keyword">public</strong> T next() {
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         <strong class="jxr_keyword">return</strong> iterator.next();
<a class="jxr_linenumber" name="L167" href="#L167">167</a>       }
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     };
<a class="jxr_linenumber" name="L169" href="#L169">169</a>   }
<a class="jxr_linenumber" name="L170" href="#L170">170</a> 
<a class="jxr_linenumber" name="L171" href="#L171">171</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a> <em class="jxr_javadoccomment">   * Simply returns its argument.</em>
<a class="jxr_linenumber" name="L173" href="#L173">173</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> <em class="jxr_javadoccomment">   * @deprecated no need to use this</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">   * @since 10.0</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a>   @Deprecated <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;T&gt; unmodifiableIterator(
<a class="jxr_linenumber" name="L178" href="#L178">178</a>       UnmodifiableIterator&lt;T&gt; iterator) {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>     <strong class="jxr_keyword">return</strong> checkNotNull(iterator);
<a class="jxr_linenumber" name="L180" href="#L180">180</a>   }
<a class="jxr_linenumber" name="L181" href="#L181">181</a> 
<a class="jxr_linenumber" name="L182" href="#L182">182</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a> <em class="jxr_javadoccomment">   * Returns the number of elements remaining in {@code iterator}. The iterator</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a> <em class="jxr_javadoccomment">   * will be left exhausted: its {@code hasNext()} method will return</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a> <em class="jxr_javadoccomment">   * {@code false}.</em>
<a class="jxr_linenumber" name="L186" href="#L186">186</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">int</strong> size(Iterator&lt;?&gt; iterator) {
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     <strong class="jxr_keyword">while</strong> (iterator.hasNext()) {
<a class="jxr_linenumber" name="L190" href="#L190">190</a>       iterator.next();
<a class="jxr_linenumber" name="L191" href="#L191">191</a>       count++;
<a class="jxr_linenumber" name="L192" href="#L192">192</a>     }
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     <strong class="jxr_keyword">return</strong> count;
<a class="jxr_linenumber" name="L194" href="#L194">194</a>   }
<a class="jxr_linenumber" name="L195" href="#L195">195</a> 
<a class="jxr_linenumber" name="L196" href="#L196">196</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L197" href="#L197">197</a> <em class="jxr_javadoccomment">   * Returns {@code true} if {@code iterator} contains {@code element}.</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L199" href="#L199">199</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> contains(Iterator&lt;?&gt; iterator, @Nullable Object element) {
<a class="jxr_linenumber" name="L200" href="#L200">200</a>     <strong class="jxr_keyword">return</strong> any(iterator, equalTo(element));
<a class="jxr_linenumber" name="L201" href="#L201">201</a>   }
<a class="jxr_linenumber" name="L202" href="#L202">202</a> 
<a class="jxr_linenumber" name="L203" href="#L203">203</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L204" href="#L204">204</a> <em class="jxr_javadoccomment">   * Traverses an iterator and removes every element that belongs to the</em>
<a class="jxr_linenumber" name="L205" href="#L205">205</a> <em class="jxr_javadoccomment">   * provided collection. The iterator will be left exhausted: its</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a> <em class="jxr_javadoccomment">   * {@code hasNext()} method will return {@code false}.</em>
<a class="jxr_linenumber" name="L207" href="#L207">207</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L208" href="#L208">208</a> <em class="jxr_javadoccomment">   * @param removeFrom the iterator to (potentially) remove elements from</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a> <em class="jxr_javadoccomment">   * @param elementsToRemove the elements to remove</em>
<a class="jxr_linenumber" name="L210" href="#L210">210</a> <em class="jxr_javadoccomment">   * @return {@code true} if any element was removed from {@code iterator}</em>
<a class="jxr_linenumber" name="L211" href="#L211">211</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L212" href="#L212">212</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> removeAll(
<a class="jxr_linenumber" name="L213" href="#L213">213</a>       Iterator&lt;?&gt; removeFrom, Collection&lt;?&gt; elementsToRemove) {
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     <strong class="jxr_keyword">return</strong> removeIf(removeFrom, in(elementsToRemove));
<a class="jxr_linenumber" name="L215" href="#L215">215</a>   }
<a class="jxr_linenumber" name="L216" href="#L216">216</a> 
<a class="jxr_linenumber" name="L217" href="#L217">217</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L218" href="#L218">218</a> <em class="jxr_javadoccomment">   * Removes every element that satisfies the provided predicate from the</em>
<a class="jxr_linenumber" name="L219" href="#L219">219</a> <em class="jxr_javadoccomment">   * iterator. The iterator will be left exhausted: its {@code hasNext()}</em>
<a class="jxr_linenumber" name="L220" href="#L220">220</a> <em class="jxr_javadoccomment">   * method will return {@code false}.</em>
<a class="jxr_linenumber" name="L221" href="#L221">221</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L222" href="#L222">222</a> <em class="jxr_javadoccomment">   * @param removeFrom the iterator to (potentially) remove elements from</em>
<a class="jxr_linenumber" name="L223" href="#L223">223</a> <em class="jxr_javadoccomment">   * @param predicate a predicate that determines whether an element should</em>
<a class="jxr_linenumber" name="L224" href="#L224">224</a> <em class="jxr_javadoccomment">   *     be removed</em>
<a class="jxr_linenumber" name="L225" href="#L225">225</a> <em class="jxr_javadoccomment">   * @return {@code true} if any elements were removed from the iterator</em>
<a class="jxr_linenumber" name="L226" href="#L226">226</a> <em class="jxr_javadoccomment">   * @since 2.0</em>
<a class="jxr_linenumber" name="L227" href="#L227">227</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L228" href="#L228">228</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; <strong class="jxr_keyword">boolean</strong> removeIf(
<a class="jxr_linenumber" name="L229" href="#L229">229</a>       Iterator&lt;T&gt; removeFrom, Predicate&lt;? <strong class="jxr_keyword">super</strong> T&gt; predicate) {
<a class="jxr_linenumber" name="L230" href="#L230">230</a>     checkNotNull(predicate);
<a class="jxr_linenumber" name="L231" href="#L231">231</a>     <strong class="jxr_keyword">boolean</strong> modified = false;
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     <strong class="jxr_keyword">while</strong> (removeFrom.hasNext()) {
<a class="jxr_linenumber" name="L233" href="#L233">233</a>       <strong class="jxr_keyword">if</strong> (predicate.apply(removeFrom.next())) {
<a class="jxr_linenumber" name="L234" href="#L234">234</a>         removeFrom.remove();
<a class="jxr_linenumber" name="L235" href="#L235">235</a>         modified = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L236" href="#L236">236</a>       }
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     }
<a class="jxr_linenumber" name="L238" href="#L238">238</a>     <strong class="jxr_keyword">return</strong> modified;
<a class="jxr_linenumber" name="L239" href="#L239">239</a>   }
<a class="jxr_linenumber" name="L240" href="#L240">240</a> 
<a class="jxr_linenumber" name="L241" href="#L241">241</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a> <em class="jxr_javadoccomment">   * Traverses an iterator and removes every element that does not belong to the</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a> <em class="jxr_javadoccomment">   * provided collection. The iterator will be left exhausted: its</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a> <em class="jxr_javadoccomment">   * {@code hasNext()} method will return {@code false}.</em>
<a class="jxr_linenumber" name="L245" href="#L245">245</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L246" href="#L246">246</a> <em class="jxr_javadoccomment">   * @param removeFrom the iterator to (potentially) remove elements from</em>
<a class="jxr_linenumber" name="L247" href="#L247">247</a> <em class="jxr_javadoccomment">   * @param elementsToRetain the elements to retain</em>
<a class="jxr_linenumber" name="L248" href="#L248">248</a> <em class="jxr_javadoccomment">   * @return {@code true} if any element was removed from {@code iterator}</em>
<a class="jxr_linenumber" name="L249" href="#L249">249</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L250" href="#L250">250</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> retainAll(
<a class="jxr_linenumber" name="L251" href="#L251">251</a>       Iterator&lt;?&gt; removeFrom, Collection&lt;?&gt; elementsToRetain) {
<a class="jxr_linenumber" name="L252" href="#L252">252</a>     <strong class="jxr_keyword">return</strong> removeIf(removeFrom, not(in(elementsToRetain)));
<a class="jxr_linenumber" name="L253" href="#L253">253</a>   }
<a class="jxr_linenumber" name="L254" href="#L254">254</a> 
<a class="jxr_linenumber" name="L255" href="#L255">255</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L256" href="#L256">256</a> <em class="jxr_javadoccomment">   * Determines whether two iterators contain equal elements in the same order.</em>
<a class="jxr_linenumber" name="L257" href="#L257">257</a> <em class="jxr_javadoccomment">   * More specifically, this method returns {@code true} if {@code iterator1}</em>
<a class="jxr_linenumber" name="L258" href="#L258">258</a> <em class="jxr_javadoccomment">   * and {@code iterator2} contain the same number of elements and every element</em>
<a class="jxr_linenumber" name="L259" href="#L259">259</a> <em class="jxr_javadoccomment">   * of {@code iterator1} is equal to the corresponding element of</em>
<a class="jxr_linenumber" name="L260" href="#L260">260</a> <em class="jxr_javadoccomment">   * {@code iterator2}.</em>
<a class="jxr_linenumber" name="L261" href="#L261">261</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Note that this will modify the supplied iterators, since they will have</em>
<a class="jxr_linenumber" name="L263" href="#L263">263</a> <em class="jxr_javadoccomment">   * been advanced some number of elements forward.</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L265" href="#L265">265</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> elementsEqual(
<a class="jxr_linenumber" name="L266" href="#L266">266</a>       Iterator&lt;?&gt; iterator1, Iterator&lt;?&gt; iterator2) {
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     <strong class="jxr_keyword">while</strong> (iterator1.hasNext()) {
<a class="jxr_linenumber" name="L268" href="#L268">268</a>       <strong class="jxr_keyword">if</strong> (!iterator2.hasNext()) {
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L270" href="#L270">270</a>       }
<a class="jxr_linenumber" name="L271" href="#L271">271</a>       Object o1 = iterator1.next();
<a class="jxr_linenumber" name="L272" href="#L272">272</a>       Object o2 = iterator2.next();
<a class="jxr_linenumber" name="L273" href="#L273">273</a>       <strong class="jxr_keyword">if</strong> (!Objects.equal(o1, o2)) {
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L275" href="#L275">275</a>       }
<a class="jxr_linenumber" name="L276" href="#L276">276</a>     }
<a class="jxr_linenumber" name="L277" href="#L277">277</a>     <strong class="jxr_keyword">return</strong> !iterator2.hasNext();
<a class="jxr_linenumber" name="L278" href="#L278">278</a>   }
<a class="jxr_linenumber" name="L279" href="#L279">279</a> 
<a class="jxr_linenumber" name="L280" href="#L280">280</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a> <em class="jxr_javadoccomment">   * Returns a string representation of {@code iterator}, with the format</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a> <em class="jxr_javadoccomment">   * {@code [e1, e2, ..., en]}. The iterator will be left exhausted: its</em>
<a class="jxr_linenumber" name="L283" href="#L283">283</a> <em class="jxr_javadoccomment">   * {@code hasNext()} method will return {@code false}.</em>
<a class="jxr_linenumber" name="L284" href="#L284">284</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L285" href="#L285">285</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> String toString(Iterator&lt;?&gt; iterator) {
<a class="jxr_linenumber" name="L286" href="#L286">286</a>     <strong class="jxr_keyword">return</strong> Collections2.STANDARD_JOINER
<a class="jxr_linenumber" name="L287" href="#L287">287</a>         .appendTo(<strong class="jxr_keyword">new</strong> StringBuilder().append('['), iterator)
<a class="jxr_linenumber" name="L288" href="#L288">288</a>         .append(']')
<a class="jxr_linenumber" name="L289" href="#L289">289</a>         .toString();
<a class="jxr_linenumber" name="L290" href="#L290">290</a>   }
<a class="jxr_linenumber" name="L291" href="#L291">291</a> 
<a class="jxr_linenumber" name="L292" href="#L292">292</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a> <em class="jxr_javadoccomment">   * Returns the single element contained in {@code iterator}.</em>
<a class="jxr_linenumber" name="L294" href="#L294">294</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a> <em class="jxr_javadoccomment">   * @throws NoSuchElementException if the iterator is empty</em>
<a class="jxr_linenumber" name="L296" href="#L296">296</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if the iterator contains multiple</em>
<a class="jxr_linenumber" name="L297" href="#L297">297</a> <em class="jxr_javadoccomment">   *     elements.  The state of the iterator is unspecified.</em>
<a class="jxr_linenumber" name="L298" href="#L298">298</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L299" href="#L299">299</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T getOnlyElement(Iterator&lt;T&gt; iterator) {
<a class="jxr_linenumber" name="L300" href="#L300">300</a>     T first = iterator.next();
<a class="jxr_linenumber" name="L301" href="#L301">301</a>     <strong class="jxr_keyword">if</strong> (!iterator.hasNext()) {
<a class="jxr_linenumber" name="L302" href="#L302">302</a>       <strong class="jxr_keyword">return</strong> first;
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     }
<a class="jxr_linenumber" name="L304" href="#L304">304</a> 
<a class="jxr_linenumber" name="L305" href="#L305">305</a>     StringBuilder sb = <strong class="jxr_keyword">new</strong> StringBuilder();
<a class="jxr_linenumber" name="L306" href="#L306">306</a>     sb.append(<span class="jxr_string">"expected one element but was: &lt;"</span> + first);
<a class="jxr_linenumber" name="L307" href="#L307">307</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 4 &amp;&amp; iterator.hasNext(); i++) {
<a class="jxr_linenumber" name="L308" href="#L308">308</a>       sb.append(<span class="jxr_string">", "</span> + iterator.next());
<a class="jxr_linenumber" name="L309" href="#L309">309</a>     }
<a class="jxr_linenumber" name="L310" href="#L310">310</a>     <strong class="jxr_keyword">if</strong> (iterator.hasNext()) {
<a class="jxr_linenumber" name="L311" href="#L311">311</a>       sb.append(<span class="jxr_string">", ..."</span>);
<a class="jxr_linenumber" name="L312" href="#L312">312</a>     }
<a class="jxr_linenumber" name="L313" href="#L313">313</a>     sb.append('&gt;');
<a class="jxr_linenumber" name="L314" href="#L314">314</a> 
<a class="jxr_linenumber" name="L315" href="#L315">315</a>     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalArgumentException(sb.toString());
<a class="jxr_linenumber" name="L316" href="#L316">316</a>   }
<a class="jxr_linenumber" name="L317" href="#L317">317</a> 
<a class="jxr_linenumber" name="L318" href="#L318">318</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L319" href="#L319">319</a> <em class="jxr_javadoccomment">   * Returns the single element contained in {@code iterator}, or {@code</em>
<a class="jxr_linenumber" name="L320" href="#L320">320</a> <em class="jxr_javadoccomment">   * defaultValue} if the iterator is empty.</em>
<a class="jxr_linenumber" name="L321" href="#L321">321</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L322" href="#L322">322</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if the iterator contains multiple</em>
<a class="jxr_linenumber" name="L323" href="#L323">323</a> <em class="jxr_javadoccomment">   *     elements.  The state of the iterator is unspecified.</em>
<a class="jxr_linenumber" name="L324" href="#L324">324</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L325" href="#L325">325</a>   @Nullable
<a class="jxr_linenumber" name="L326" href="#L326">326</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T getOnlyElement(Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; iterator, @Nullable T defaultValue) {
<a class="jxr_linenumber" name="L327" href="#L327">327</a>     <strong class="jxr_keyword">return</strong> iterator.hasNext() ? getOnlyElement(iterator) : defaultValue;
<a class="jxr_linenumber" name="L328" href="#L328">328</a>   }
<a class="jxr_linenumber" name="L329" href="#L329">329</a> 
<a class="jxr_linenumber" name="L330" href="#L330">330</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L331" href="#L331">331</a> <em class="jxr_javadoccomment">   * Adds all elements in {@code iterator} to {@code collection}. The iterator</em>
<a class="jxr_linenumber" name="L332" href="#L332">332</a> <em class="jxr_javadoccomment">   * will be left exhausted: its {@code hasNext()} method will return</em>
<a class="jxr_linenumber" name="L333" href="#L333">333</a> <em class="jxr_javadoccomment">   * {@code false}.</em>
<a class="jxr_linenumber" name="L334" href="#L334">334</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L335" href="#L335">335</a> <em class="jxr_javadoccomment">   * @return {@code true} if {@code collection} was modified as a result of this</em>
<a class="jxr_linenumber" name="L336" href="#L336">336</a> <em class="jxr_javadoccomment">   *         operation</em>
<a class="jxr_linenumber" name="L337" href="#L337">337</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L338" href="#L338">338</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; <strong class="jxr_keyword">boolean</strong> addAll(
<a class="jxr_linenumber" name="L339" href="#L339">339</a>       Collection&lt;T&gt; addTo, Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; iterator) {
<a class="jxr_linenumber" name="L340" href="#L340">340</a>     checkNotNull(addTo);
<a class="jxr_linenumber" name="L341" href="#L341">341</a>     checkNotNull(iterator);
<a class="jxr_linenumber" name="L342" href="#L342">342</a>     <strong class="jxr_keyword">boolean</strong> wasModified = false;
<a class="jxr_linenumber" name="L343" href="#L343">343</a>     <strong class="jxr_keyword">while</strong> (iterator.hasNext()) {
<a class="jxr_linenumber" name="L344" href="#L344">344</a>       wasModified |= addTo.add(iterator.next());
<a class="jxr_linenumber" name="L345" href="#L345">345</a>     }
<a class="jxr_linenumber" name="L346" href="#L346">346</a>     <strong class="jxr_keyword">return</strong> wasModified;
<a class="jxr_linenumber" name="L347" href="#L347">347</a>   }
<a class="jxr_linenumber" name="L348" href="#L348">348</a> 
<a class="jxr_linenumber" name="L349" href="#L349">349</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L350" href="#L350">350</a> <em class="jxr_javadoccomment">   * Returns the number of elements in the specified iterator that equal the</em>
<a class="jxr_linenumber" name="L351" href="#L351">351</a> <em class="jxr_javadoccomment">   * specified object. The iterator will be left exhausted: its</em>
<a class="jxr_linenumber" name="L352" href="#L352">352</a> <em class="jxr_javadoccomment">   * {@code hasNext()} method will return {@code false}.</em>
<a class="jxr_linenumber" name="L353" href="#L353">353</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L354" href="#L354">354</a> <em class="jxr_javadoccomment">   * @see Collections#frequency</em>
<a class="jxr_linenumber" name="L355" href="#L355">355</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L356" href="#L356">356</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">int</strong> frequency(Iterator&lt;?&gt; iterator, @Nullable Object element) {
<a class="jxr_linenumber" name="L357" href="#L357">357</a>     <strong class="jxr_keyword">return</strong> size(filter(iterator, equalTo(element)));
<a class="jxr_linenumber" name="L358" href="#L358">358</a>   }
<a class="jxr_linenumber" name="L359" href="#L359">359</a> 
<a class="jxr_linenumber" name="L360" href="#L360">360</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L361" href="#L361">361</a> <em class="jxr_javadoccomment">   * Returns an iterator that cycles indefinitely over the elements of {@code</em>
<a class="jxr_linenumber" name="L362" href="#L362">362</a> <em class="jxr_javadoccomment">   * iterable}.</em>
<a class="jxr_linenumber" name="L363" href="#L363">363</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L364" href="#L364">364</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned iterator supports {@code remove()} if the provided iterator</em>
<a class="jxr_linenumber" name="L365" href="#L365">365</a> <em class="jxr_javadoccomment">   * does. After {@code remove()} is called, subsequent cycles omit the removed</em>
<a class="jxr_linenumber" name="L366" href="#L366">366</a> <em class="jxr_javadoccomment">   * element, which is no longer in {@code iterable}. The iterator's</em>
<a class="jxr_linenumber" name="L367" href="#L367">367</a> <em class="jxr_javadoccomment">   * {@code hasNext()} method returns {@code true} until {@code iterable} is</em>
<a class="jxr_linenumber" name="L368" href="#L368">368</a> <em class="jxr_javadoccomment">   * empty.</em>
<a class="jxr_linenumber" name="L369" href="#L369">369</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L370" href="#L370">370</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Typical uses of the resulting iterator may produce an</em>
<a class="jxr_linenumber" name="L371" href="#L371">371</a> <em class="jxr_javadoccomment">   * infinite loop. You should use an explicit {@code break} or be certain that</em>
<a class="jxr_linenumber" name="L372" href="#L372">372</a> <em class="jxr_javadoccomment">   * you will eventually remove all the elements.</em>
<a class="jxr_linenumber" name="L373" href="#L373">373</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L374" href="#L374">374</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Iterator&lt;T&gt; cycle(<strong class="jxr_keyword">final</strong> Iterable&lt;T&gt; iterable) {
<a class="jxr_linenumber" name="L375" href="#L375">375</a>     checkNotNull(iterable);
<a class="jxr_linenumber" name="L376" href="#L376">376</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Iterator&lt;T&gt;() {
<a class="jxr_linenumber" name="L377" href="#L377">377</a>       Iterator&lt;T&gt; iterator = emptyIterator();
<a class="jxr_linenumber" name="L378" href="#L378">378</a>       Iterator&lt;T&gt; removeFrom;
<a class="jxr_linenumber" name="L379" href="#L379">379</a> 
<a class="jxr_linenumber" name="L380" href="#L380">380</a>       @Override
<a class="jxr_linenumber" name="L381" href="#L381">381</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L382" href="#L382">382</a>         <strong class="jxr_keyword">if</strong> (!iterator.hasNext()) {
<a class="jxr_linenumber" name="L383" href="#L383">383</a>           iterator = iterable.iterator();
<a class="jxr_linenumber" name="L384" href="#L384">384</a>         }
<a class="jxr_linenumber" name="L385" href="#L385">385</a>         <strong class="jxr_keyword">return</strong> iterator.hasNext();
<a class="jxr_linenumber" name="L386" href="#L386">386</a>       }
<a class="jxr_linenumber" name="L387" href="#L387">387</a>       @Override
<a class="jxr_linenumber" name="L388" href="#L388">388</a>       <strong class="jxr_keyword">public</strong> T next() {
<a class="jxr_linenumber" name="L389" href="#L389">389</a>         <strong class="jxr_keyword">if</strong> (!hasNext()) {
<a class="jxr_linenumber" name="L390" href="#L390">390</a>           <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L391" href="#L391">391</a>         }
<a class="jxr_linenumber" name="L392" href="#L392">392</a>         removeFrom = iterator;
<a class="jxr_linenumber" name="L393" href="#L393">393</a>         <strong class="jxr_keyword">return</strong> iterator.next();
<a class="jxr_linenumber" name="L394" href="#L394">394</a>       }
<a class="jxr_linenumber" name="L395" href="#L395">395</a>       @Override
<a class="jxr_linenumber" name="L396" href="#L396">396</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> remove() {
<a class="jxr_linenumber" name="L397" href="#L397">397</a>         checkRemove(removeFrom != <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L398" href="#L398">398</a>         removeFrom.remove();
<a class="jxr_linenumber" name="L399" href="#L399">399</a>         removeFrom = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L400" href="#L400">400</a>       }
<a class="jxr_linenumber" name="L401" href="#L401">401</a>     };
<a class="jxr_linenumber" name="L402" href="#L402">402</a>   }
<a class="jxr_linenumber" name="L403" href="#L403">403</a> 
<a class="jxr_linenumber" name="L404" href="#L404">404</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L405" href="#L405">405</a> <em class="jxr_javadoccomment">   * Returns an iterator that cycles indefinitely over the provided elements.</em>
<a class="jxr_linenumber" name="L406" href="#L406">406</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L407" href="#L407">407</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned iterator supports {@code remove()}. After {@code remove()}</em>
<a class="jxr_linenumber" name="L408" href="#L408">408</a> <em class="jxr_javadoccomment">   * is called, subsequent cycles omit the removed</em>
<a class="jxr_linenumber" name="L409" href="#L409">409</a> <em class="jxr_javadoccomment">   * element, but {@code elements} does not change. The iterator's</em>
<a class="jxr_linenumber" name="L410" href="#L410">410</a> <em class="jxr_javadoccomment">   * {@code hasNext()} method returns {@code true} until all of the original</em>
<a class="jxr_linenumber" name="L411" href="#L411">411</a> <em class="jxr_javadoccomment">   * elements have been removed.</em>
<a class="jxr_linenumber" name="L412" href="#L412">412</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L413" href="#L413">413</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Typical uses of the resulting iterator may produce an</em>
<a class="jxr_linenumber" name="L414" href="#L414">414</a> <em class="jxr_javadoccomment">   * infinite loop. You should use an explicit {@code break} or be certain that</em>
<a class="jxr_linenumber" name="L415" href="#L415">415</a> <em class="jxr_javadoccomment">   * you will eventually remove all the elements.</em>
<a class="jxr_linenumber" name="L416" href="#L416">416</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L417" href="#L417">417</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Iterator&lt;T&gt; cycle(T... elements) {
<a class="jxr_linenumber" name="L418" href="#L418">418</a>     <strong class="jxr_keyword">return</strong> cycle(Lists.newArrayList(elements));
<a class="jxr_linenumber" name="L419" href="#L419">419</a>   }
<a class="jxr_linenumber" name="L420" href="#L420">420</a> 
<a class="jxr_linenumber" name="L421" href="#L421">421</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L422" href="#L422">422</a> <em class="jxr_javadoccomment">   * Combines two iterators into a single iterator. The returned iterator</em>
<a class="jxr_linenumber" name="L423" href="#L423">423</a> <em class="jxr_javadoccomment">   * iterates across the elements in {@code a}, followed by the elements in</em>
<a class="jxr_linenumber" name="L424" href="#L424">424</a> <em class="jxr_javadoccomment">   * {@code b}. The source iterators are not polled until necessary.</em>
<a class="jxr_linenumber" name="L425" href="#L425">425</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L426" href="#L426">426</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned iterator supports {@code remove()} when the corresponding</em>
<a class="jxr_linenumber" name="L427" href="#L427">427</a> <em class="jxr_javadoccomment">   * input iterator supports it.</em>
<a class="jxr_linenumber" name="L428" href="#L428">428</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L429" href="#L429">429</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; the current implementation is not suitable for nested</em>
<a class="jxr_linenumber" name="L430" href="#L430">430</a> <em class="jxr_javadoccomment">   * concatenated iterators, i.e. the following should be avoided when in a loop:</em>
<a class="jxr_linenumber" name="L431" href="#L431">431</a> <em class="jxr_javadoccomment">   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the</em>
<a class="jxr_linenumber" name="L432" href="#L432">432</a> <em class="jxr_javadoccomment">   * resulting iterator has a cubic complexity to the depth of the nesting.</em>
<a class="jxr_linenumber" name="L433" href="#L433">433</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L434" href="#L434">434</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Iterator&lt;T&gt; concat(Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; a,
<a class="jxr_linenumber" name="L435" href="#L435">435</a>       Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; b) {
<a class="jxr_linenumber" name="L436" href="#L436">436</a>     <strong class="jxr_keyword">return</strong> concat(ImmutableList.of(a, b).iterator());
<a class="jxr_linenumber" name="L437" href="#L437">437</a>   }
<a class="jxr_linenumber" name="L438" href="#L438">438</a> 
<a class="jxr_linenumber" name="L439" href="#L439">439</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L440" href="#L440">440</a> <em class="jxr_javadoccomment">   * Combines three iterators into a single iterator. The returned iterator</em>
<a class="jxr_linenumber" name="L441" href="#L441">441</a> <em class="jxr_javadoccomment">   * iterates across the elements in {@code a}, followed by the elements in</em>
<a class="jxr_linenumber" name="L442" href="#L442">442</a> <em class="jxr_javadoccomment">   * {@code b}, followed by the elements in {@code c}. The source iterators</em>
<a class="jxr_linenumber" name="L443" href="#L443">443</a> <em class="jxr_javadoccomment">   * are not polled until necessary.</em>
<a class="jxr_linenumber" name="L444" href="#L444">444</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L445" href="#L445">445</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned iterator supports {@code remove()} when the corresponding</em>
<a class="jxr_linenumber" name="L446" href="#L446">446</a> <em class="jxr_javadoccomment">   * input iterator supports it.</em>
<a class="jxr_linenumber" name="L447" href="#L447">447</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L448" href="#L448">448</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; the current implementation is not suitable for nested</em>
<a class="jxr_linenumber" name="L449" href="#L449">449</a> <em class="jxr_javadoccomment">   * concatenated iterators, i.e. the following should be avoided when in a loop:</em>
<a class="jxr_linenumber" name="L450" href="#L450">450</a> <em class="jxr_javadoccomment">   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the</em>
<a class="jxr_linenumber" name="L451" href="#L451">451</a> <em class="jxr_javadoccomment">   * resulting iterator has a cubic complexity to the depth of the nesting.</em>
<a class="jxr_linenumber" name="L452" href="#L452">452</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L453" href="#L453">453</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Iterator&lt;T&gt; concat(Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; a,
<a class="jxr_linenumber" name="L454" href="#L454">454</a>       Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; b, Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; c) {
<a class="jxr_linenumber" name="L455" href="#L455">455</a>     <strong class="jxr_keyword">return</strong> concat(ImmutableList.of(a, b, c).iterator());
<a class="jxr_linenumber" name="L456" href="#L456">456</a>   }
<a class="jxr_linenumber" name="L457" href="#L457">457</a> 
<a class="jxr_linenumber" name="L458" href="#L458">458</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L459" href="#L459">459</a> <em class="jxr_javadoccomment">   * Combines four iterators into a single iterator. The returned iterator</em>
<a class="jxr_linenumber" name="L460" href="#L460">460</a> <em class="jxr_javadoccomment">   * iterates across the elements in {@code a}, followed by the elements in</em>
<a class="jxr_linenumber" name="L461" href="#L461">461</a> <em class="jxr_javadoccomment">   * {@code b}, followed by the elements in {@code c}, followed by the elements</em>
<a class="jxr_linenumber" name="L462" href="#L462">462</a> <em class="jxr_javadoccomment">   * in {@code d}. The source iterators are not polled until necessary.</em>
<a class="jxr_linenumber" name="L463" href="#L463">463</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L464" href="#L464">464</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned iterator supports {@code remove()} when the corresponding</em>
<a class="jxr_linenumber" name="L465" href="#L465">465</a> <em class="jxr_javadoccomment">   * input iterator supports it.</em>
<a class="jxr_linenumber" name="L466" href="#L466">466</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L467" href="#L467">467</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; the current implementation is not suitable for nested</em>
<a class="jxr_linenumber" name="L468" href="#L468">468</a> <em class="jxr_javadoccomment">   * concatenated iterators, i.e. the following should be avoided when in a loop:</em>
<a class="jxr_linenumber" name="L469" href="#L469">469</a> <em class="jxr_javadoccomment">   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the</em>
<a class="jxr_linenumber" name="L470" href="#L470">470</a> <em class="jxr_javadoccomment">   * resulting iterator has a cubic complexity to the depth of the nesting.</em>
<a class="jxr_linenumber" name="L471" href="#L471">471</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L472" href="#L472">472</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Iterator&lt;T&gt; concat(Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; a,
<a class="jxr_linenumber" name="L473" href="#L473">473</a>       Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; b, Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; c,
<a class="jxr_linenumber" name="L474" href="#L474">474</a>       Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; d) {
<a class="jxr_linenumber" name="L475" href="#L475">475</a>     <strong class="jxr_keyword">return</strong> concat(ImmutableList.of(a, b, c, d).iterator());
<a class="jxr_linenumber" name="L476" href="#L476">476</a>   }
<a class="jxr_linenumber" name="L477" href="#L477">477</a> 
<a class="jxr_linenumber" name="L478" href="#L478">478</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L479" href="#L479">479</a> <em class="jxr_javadoccomment">   * Combines multiple iterators into a single iterator. The returned iterator</em>
<a class="jxr_linenumber" name="L480" href="#L480">480</a> <em class="jxr_javadoccomment">   * iterates across the elements of each iterator in {@code inputs}. The input</em>
<a class="jxr_linenumber" name="L481" href="#L481">481</a> <em class="jxr_javadoccomment">   * iterators are not polled until necessary.</em>
<a class="jxr_linenumber" name="L482" href="#L482">482</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L483" href="#L483">483</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned iterator supports {@code remove()} when the corresponding</em>
<a class="jxr_linenumber" name="L484" href="#L484">484</a> <em class="jxr_javadoccomment">   * input iterator supports it.</em>
<a class="jxr_linenumber" name="L485" href="#L485">485</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L486" href="#L486">486</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; the current implementation is not suitable for nested</em>
<a class="jxr_linenumber" name="L487" href="#L487">487</a> <em class="jxr_javadoccomment">   * concatenated iterators, i.e. the following should be avoided when in a loop:</em>
<a class="jxr_linenumber" name="L488" href="#L488">488</a> <em class="jxr_javadoccomment">   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the</em>
<a class="jxr_linenumber" name="L489" href="#L489">489</a> <em class="jxr_javadoccomment">   * resulting iterator has a cubic complexity to the depth of the nesting.</em>
<a class="jxr_linenumber" name="L490" href="#L490">490</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L491" href="#L491">491</a> <em class="jxr_javadoccomment">   * @throws NullPointerException if any of the provided iterators is null</em>
<a class="jxr_linenumber" name="L492" href="#L492">492</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L493" href="#L493">493</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Iterator&lt;T&gt; concat(Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt;... inputs) {
<a class="jxr_linenumber" name="L494" href="#L494">494</a>     <strong class="jxr_keyword">return</strong> concat(ImmutableList.copyOf(inputs).iterator());
<a class="jxr_linenumber" name="L495" href="#L495">495</a>   }
<a class="jxr_linenumber" name="L496" href="#L496">496</a> 
<a class="jxr_linenumber" name="L497" href="#L497">497</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L498" href="#L498">498</a> <em class="jxr_javadoccomment">   * Combines multiple iterators into a single iterator. The returned iterator</em>
<a class="jxr_linenumber" name="L499" href="#L499">499</a> <em class="jxr_javadoccomment">   * iterates across the elements of each iterator in {@code inputs}. The input</em>
<a class="jxr_linenumber" name="L500" href="#L500">500</a> <em class="jxr_javadoccomment">   * iterators are not polled until necessary.</em>
<a class="jxr_linenumber" name="L501" href="#L501">501</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L502" href="#L502">502</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned iterator supports {@code remove()} when the corresponding</em>
<a class="jxr_linenumber" name="L503" href="#L503">503</a> <em class="jxr_javadoccomment">   * input iterator supports it. The methods of the returned iterator may throw</em>
<a class="jxr_linenumber" name="L504" href="#L504">504</a> <em class="jxr_javadoccomment">   * {@code NullPointerException} if any of the input iterators is null.</em>
<a class="jxr_linenumber" name="L505" href="#L505">505</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L506" href="#L506">506</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; the current implementation is not suitable for nested</em>
<a class="jxr_linenumber" name="L507" href="#L507">507</a> <em class="jxr_javadoccomment">   * concatenated iterators, i.e. the following should be avoided when in a loop:</em>
<a class="jxr_linenumber" name="L508" href="#L508">508</a> <em class="jxr_javadoccomment">   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the</em>
<a class="jxr_linenumber" name="L509" href="#L509">509</a> <em class="jxr_javadoccomment">   * resulting iterator has a cubic complexity to the depth of the nesting.</em>
<a class="jxr_linenumber" name="L510" href="#L510">510</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L511" href="#L511">511</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Iterator&lt;T&gt; concat(
<a class="jxr_linenumber" name="L512" href="#L512">512</a>       <strong class="jxr_keyword">final</strong> Iterator&lt;? <strong class="jxr_keyword">extends</strong> Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt;&gt; inputs) {
<a class="jxr_linenumber" name="L513" href="#L513">513</a>     checkNotNull(inputs);
<a class="jxr_linenumber" name="L514" href="#L514">514</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Iterator&lt;T&gt;() {
<a class="jxr_linenumber" name="L515" href="#L515">515</a>       Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; current = emptyIterator();
<a class="jxr_linenumber" name="L516" href="#L516">516</a>       Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; removeFrom;
<a class="jxr_linenumber" name="L517" href="#L517">517</a> 
<a class="jxr_linenumber" name="L518" href="#L518">518</a>       @Override
<a class="jxr_linenumber" name="L519" href="#L519">519</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L520" href="#L520">520</a>         <em class="jxr_comment">// http://code.google.com/p/google-collections/issues/detail?id=151</em>
<a class="jxr_linenumber" name="L521" href="#L521">521</a>         <em class="jxr_comment">// current.hasNext() might be relatively expensive, worth minimizing.</em>
<a class="jxr_linenumber" name="L522" href="#L522">522</a>         <strong class="jxr_keyword">boolean</strong> currentHasNext;
<a class="jxr_linenumber" name="L523" href="#L523">523</a>         <em class="jxr_comment">// checkNotNull eager for GWT</em>
<a class="jxr_linenumber" name="L524" href="#L524">524</a>         <em class="jxr_comment">// note: it must be here &amp; not where 'current' is assigned,</em>
<a class="jxr_linenumber" name="L525" href="#L525">525</a>         <em class="jxr_comment">// because otherwise we'll have called inputs.next() before throwing</em>
<a class="jxr_linenumber" name="L526" href="#L526">526</a>         <em class="jxr_comment">// the first NPE, and the next time around we'll call inputs.next()</em>
<a class="jxr_linenumber" name="L527" href="#L527">527</a>         <em class="jxr_comment">// again, incorrectly moving beyond the error.</em>
<a class="jxr_linenumber" name="L528" href="#L528">528</a>         <strong class="jxr_keyword">while</strong> (!(currentHasNext = checkNotNull(current).hasNext())
<a class="jxr_linenumber" name="L529" href="#L529">529</a>             &amp;&amp; inputs.hasNext()) {
<a class="jxr_linenumber" name="L530" href="#L530">530</a>           current = inputs.next();
<a class="jxr_linenumber" name="L531" href="#L531">531</a>         }
<a class="jxr_linenumber" name="L532" href="#L532">532</a>         <strong class="jxr_keyword">return</strong> currentHasNext;
<a class="jxr_linenumber" name="L533" href="#L533">533</a>       }
<a class="jxr_linenumber" name="L534" href="#L534">534</a>       @Override
<a class="jxr_linenumber" name="L535" href="#L535">535</a>       <strong class="jxr_keyword">public</strong> T next() {
<a class="jxr_linenumber" name="L536" href="#L536">536</a>         <strong class="jxr_keyword">if</strong> (!hasNext()) {
<a class="jxr_linenumber" name="L537" href="#L537">537</a>           <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L538" href="#L538">538</a>         }
<a class="jxr_linenumber" name="L539" href="#L539">539</a>         removeFrom = current;
<a class="jxr_linenumber" name="L540" href="#L540">540</a>         <strong class="jxr_keyword">return</strong> current.next();
<a class="jxr_linenumber" name="L541" href="#L541">541</a>       }
<a class="jxr_linenumber" name="L542" href="#L542">542</a>       @Override
<a class="jxr_linenumber" name="L543" href="#L543">543</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> remove() {
<a class="jxr_linenumber" name="L544" href="#L544">544</a>         checkRemove(removeFrom != <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L545" href="#L545">545</a>         removeFrom.remove();
<a class="jxr_linenumber" name="L546" href="#L546">546</a>         removeFrom = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L547" href="#L547">547</a>       }
<a class="jxr_linenumber" name="L548" href="#L548">548</a>     };
<a class="jxr_linenumber" name="L549" href="#L549">549</a>   }
<a class="jxr_linenumber" name="L550" href="#L550">550</a> 
<a class="jxr_linenumber" name="L551" href="#L551">551</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L552" href="#L552">552</a> <em class="jxr_javadoccomment">   * Divides an iterator into unmodifiable sublists of the given size (the final</em>
<a class="jxr_linenumber" name="L553" href="#L553">553</a> <em class="jxr_javadoccomment">   * list may be smaller). For example, partitioning an iterator containing</em>
<a class="jxr_linenumber" name="L554" href="#L554">554</a> <em class="jxr_javadoccomment">   * {@code [a, b, c, d, e]} with a partition size of 3 yields {@code</em>
<a class="jxr_linenumber" name="L555" href="#L555">555</a> <em class="jxr_javadoccomment">   * [[a, b, c], [d, e]]} -- an outer iterator containing two inner lists of</em>
<a class="jxr_linenumber" name="L556" href="#L556">556</a> <em class="jxr_javadoccomment">   * three and two elements, all in the original order.</em>
<a class="jxr_linenumber" name="L557" href="#L557">557</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L558" href="#L558">558</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned lists implement {@link java.util.RandomAccess}.</em>
<a class="jxr_linenumber" name="L559" href="#L559">559</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L560" href="#L560">560</a> <em class="jxr_javadoccomment">   * @param iterator the iterator to return a partitioned view of</em>
<a class="jxr_linenumber" name="L561" href="#L561">561</a> <em class="jxr_javadoccomment">   * @param size the desired size of each partition (the last may be smaller)</em>
<a class="jxr_linenumber" name="L562" href="#L562">562</a> <em class="jxr_javadoccomment">   * @return an iterator of immutable lists containing the elements of {@code</em>
<a class="jxr_linenumber" name="L563" href="#L563">563</a> <em class="jxr_javadoccomment">   *     iterator} divided into partitions</em>
<a class="jxr_linenumber" name="L564" href="#L564">564</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code size} is nonpositive</em>
<a class="jxr_linenumber" name="L565" href="#L565">565</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L566" href="#L566">566</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;List&lt;T&gt;&gt; partition(
<a class="jxr_linenumber" name="L567" href="#L567">567</a>       Iterator&lt;T&gt; iterator, <strong class="jxr_keyword">int</strong> size) {
<a class="jxr_linenumber" name="L568" href="#L568">568</a>     <strong class="jxr_keyword">return</strong> partitionImpl(iterator, size, false);
<a class="jxr_linenumber" name="L569" href="#L569">569</a>   }
<a class="jxr_linenumber" name="L570" href="#L570">570</a> 
<a class="jxr_linenumber" name="L571" href="#L571">571</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L572" href="#L572">572</a> <em class="jxr_javadoccomment">   * Divides an iterator into unmodifiable sublists of the given size, padding</em>
<a class="jxr_linenumber" name="L573" href="#L573">573</a> <em class="jxr_javadoccomment">   * the final iterator with null values if necessary. For example, partitioning</em>
<a class="jxr_linenumber" name="L574" href="#L574">574</a> <em class="jxr_javadoccomment">   * an iterator containing {@code [a, b, c, d, e]} with a partition size of 3</em>
<a class="jxr_linenumber" name="L575" href="#L575">575</a> <em class="jxr_javadoccomment">   * yields {@code [[a, b, c], [d, e, null]]} -- an outer iterator containing</em>
<a class="jxr_linenumber" name="L576" href="#L576">576</a> <em class="jxr_javadoccomment">   * two inner lists of three elements each, all in the original order.</em>
<a class="jxr_linenumber" name="L577" href="#L577">577</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L578" href="#L578">578</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned lists implement {@link java.util.RandomAccess}.</em>
<a class="jxr_linenumber" name="L579" href="#L579">579</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L580" href="#L580">580</a> <em class="jxr_javadoccomment">   * @param iterator the iterator to return a partitioned view of</em>
<a class="jxr_linenumber" name="L581" href="#L581">581</a> <em class="jxr_javadoccomment">   * @param size the desired size of each partition</em>
<a class="jxr_linenumber" name="L582" href="#L582">582</a> <em class="jxr_javadoccomment">   * @return an iterator of immutable lists containing the elements of {@code</em>
<a class="jxr_linenumber" name="L583" href="#L583">583</a> <em class="jxr_javadoccomment">   *     iterator} divided into partitions (the final iterable may have</em>
<a class="jxr_linenumber" name="L584" href="#L584">584</a> <em class="jxr_javadoccomment">   *     trailing null elements)</em>
<a class="jxr_linenumber" name="L585" href="#L585">585</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code size} is nonpositive</em>
<a class="jxr_linenumber" name="L586" href="#L586">586</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L587" href="#L587">587</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;List&lt;T&gt;&gt; paddedPartition(
<a class="jxr_linenumber" name="L588" href="#L588">588</a>       Iterator&lt;T&gt; iterator, <strong class="jxr_keyword">int</strong> size) {
<a class="jxr_linenumber" name="L589" href="#L589">589</a>     <strong class="jxr_keyword">return</strong> partitionImpl(iterator, size, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L590" href="#L590">590</a>   }
<a class="jxr_linenumber" name="L591" href="#L591">591</a> 
<a class="jxr_linenumber" name="L592" href="#L592">592</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;List&lt;T&gt;&gt; partitionImpl(
<a class="jxr_linenumber" name="L593" href="#L593">593</a>       <strong class="jxr_keyword">final</strong> Iterator&lt;T&gt; iterator, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> size, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> pad) {
<a class="jxr_linenumber" name="L594" href="#L594">594</a>     checkNotNull(iterator);
<a class="jxr_linenumber" name="L595" href="#L595">595</a>     checkArgument(size &gt; 0);
<a class="jxr_linenumber" name="L596" href="#L596">596</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> UnmodifiableIterator&lt;List&lt;T&gt;&gt;() {
<a class="jxr_linenumber" name="L597" href="#L597">597</a>       @Override
<a class="jxr_linenumber" name="L598" href="#L598">598</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L599" href="#L599">599</a>         <strong class="jxr_keyword">return</strong> iterator.hasNext();
<a class="jxr_linenumber" name="L600" href="#L600">600</a>       }
<a class="jxr_linenumber" name="L601" href="#L601">601</a>       @Override
<a class="jxr_linenumber" name="L602" href="#L602">602</a>       <strong class="jxr_keyword">public</strong> List&lt;T&gt; next() {
<a class="jxr_linenumber" name="L603" href="#L603">603</a>         <strong class="jxr_keyword">if</strong> (!hasNext()) {
<a class="jxr_linenumber" name="L604" href="#L604">604</a>           <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L605" href="#L605">605</a>         }
<a class="jxr_linenumber" name="L606" href="#L606">606</a>         Object[] array = <strong class="jxr_keyword">new</strong> Object[size];
<a class="jxr_linenumber" name="L607" href="#L607">607</a>         <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L608" href="#L608">608</a>         <strong class="jxr_keyword">for</strong> (; count &lt; size &amp;&amp; iterator.hasNext(); count++) {
<a class="jxr_linenumber" name="L609" href="#L609">609</a>           array[count] = iterator.next();
<a class="jxr_linenumber" name="L610" href="#L610">610</a>         }
<a class="jxr_linenumber" name="L611" href="#L611">611</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = count; i &lt; size; i++) {
<a class="jxr_linenumber" name="L612" href="#L612">612</a>           array[i] = <strong class="jxr_keyword">null</strong>; <em class="jxr_comment">// for GWT</em>
<a class="jxr_linenumber" name="L613" href="#L613">613</a>         }
<a class="jxr_linenumber" name="L614" href="#L614">614</a> 
<a class="jxr_linenumber" name="L615" href="#L615">615</a>         @SuppressWarnings(<span class="jxr_string">"unchecked"</span>) <em class="jxr_comment">// we only put Ts in it</em>
<a class="jxr_linenumber" name="L616" href="#L616">616</a>         List&lt;T&gt; list = Collections.unmodifiableList(
<a class="jxr_linenumber" name="L617" href="#L617">617</a>             (List&lt;T&gt;) Arrays.asList(array));
<a class="jxr_linenumber" name="L618" href="#L618">618</a>         <strong class="jxr_keyword">return</strong> (pad || count == size) ? list : list.subList(0, count);
<a class="jxr_linenumber" name="L619" href="#L619">619</a>       }
<a class="jxr_linenumber" name="L620" href="#L620">620</a>     };
<a class="jxr_linenumber" name="L621" href="#L621">621</a>   }
<a class="jxr_linenumber" name="L622" href="#L622">622</a> 
<a class="jxr_linenumber" name="L623" href="#L623">623</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L624" href="#L624">624</a> <em class="jxr_javadoccomment">   * Returns the elements of {@code unfiltered} that satisfy a predicate.</em>
<a class="jxr_linenumber" name="L625" href="#L625">625</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L626" href="#L626">626</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;T&gt; filter(
<a class="jxr_linenumber" name="L627" href="#L627">627</a>       <strong class="jxr_keyword">final</strong> Iterator&lt;T&gt; unfiltered, <strong class="jxr_keyword">final</strong> Predicate&lt;? <strong class="jxr_keyword">super</strong> T&gt; predicate) {
<a class="jxr_linenumber" name="L628" href="#L628">628</a>     checkNotNull(unfiltered);
<a class="jxr_linenumber" name="L629" href="#L629">629</a>     checkNotNull(predicate);
<a class="jxr_linenumber" name="L630" href="#L630">630</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> AbstractIterator&lt;T&gt;() {
<a class="jxr_linenumber" name="L631" href="#L631">631</a>       @Override <strong class="jxr_keyword">protected</strong> T computeNext() {
<a class="jxr_linenumber" name="L632" href="#L632">632</a>         <strong class="jxr_keyword">while</strong> (unfiltered.hasNext()) {
<a class="jxr_linenumber" name="L633" href="#L633">633</a>           T element = unfiltered.next();
<a class="jxr_linenumber" name="L634" href="#L634">634</a>           <strong class="jxr_keyword">if</strong> (predicate.apply(element)) {
<a class="jxr_linenumber" name="L635" href="#L635">635</a>             <strong class="jxr_keyword">return</strong> element;
<a class="jxr_linenumber" name="L636" href="#L636">636</a>           }
<a class="jxr_linenumber" name="L637" href="#L637">637</a>         }
<a class="jxr_linenumber" name="L638" href="#L638">638</a>         <strong class="jxr_keyword">return</strong> endOfData();
<a class="jxr_linenumber" name="L639" href="#L639">639</a>       }
<a class="jxr_linenumber" name="L640" href="#L640">640</a>     };
<a class="jxr_linenumber" name="L641" href="#L641">641</a>   }
<a class="jxr_linenumber" name="L642" href="#L642">642</a> 
<a class="jxr_linenumber" name="L643" href="#L643">643</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L644" href="#L644">644</a> <em class="jxr_javadoccomment">   * Returns {@code true} if one or more elements returned by {@code iterator}</em>
<a class="jxr_linenumber" name="L645" href="#L645">645</a> <em class="jxr_javadoccomment">   * satisfy the given predicate.</em>
<a class="jxr_linenumber" name="L646" href="#L646">646</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L647" href="#L647">647</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; <strong class="jxr_keyword">boolean</strong> any(
<a class="jxr_linenumber" name="L648" href="#L648">648</a>       Iterator&lt;T&gt; iterator, Predicate&lt;? <strong class="jxr_keyword">super</strong> T&gt; predicate) {
<a class="jxr_linenumber" name="L649" href="#L649">649</a>     <strong class="jxr_keyword">return</strong> indexOf(iterator, predicate) != -1;
<a class="jxr_linenumber" name="L650" href="#L650">650</a>   }
<a class="jxr_linenumber" name="L651" href="#L651">651</a> 
<a class="jxr_linenumber" name="L652" href="#L652">652</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L653" href="#L653">653</a> <em class="jxr_javadoccomment">   * Returns {@code true} if every element returned by {@code iterator}</em>
<a class="jxr_linenumber" name="L654" href="#L654">654</a> <em class="jxr_javadoccomment">   * satisfies the given predicate. If {@code iterator} is empty, {@code true}</em>
<a class="jxr_linenumber" name="L655" href="#L655">655</a> <em class="jxr_javadoccomment">   * is returned.</em>
<a class="jxr_linenumber" name="L656" href="#L656">656</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L657" href="#L657">657</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; <strong class="jxr_keyword">boolean</strong> all(
<a class="jxr_linenumber" name="L658" href="#L658">658</a>       Iterator&lt;T&gt; iterator, Predicate&lt;? <strong class="jxr_keyword">super</strong> T&gt; predicate) {
<a class="jxr_linenumber" name="L659" href="#L659">659</a>     checkNotNull(predicate);
<a class="jxr_linenumber" name="L660" href="#L660">660</a>     <strong class="jxr_keyword">while</strong> (iterator.hasNext()) {
<a class="jxr_linenumber" name="L661" href="#L661">661</a>       T element = iterator.next();
<a class="jxr_linenumber" name="L662" href="#L662">662</a>       <strong class="jxr_keyword">if</strong> (!predicate.apply(element)) {
<a class="jxr_linenumber" name="L663" href="#L663">663</a>         <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L664" href="#L664">664</a>       }
<a class="jxr_linenumber" name="L665" href="#L665">665</a>     }
<a class="jxr_linenumber" name="L666" href="#L666">666</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L667" href="#L667">667</a>   }
<a class="jxr_linenumber" name="L668" href="#L668">668</a> 
<a class="jxr_linenumber" name="L669" href="#L669">669</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L670" href="#L670">670</a> <em class="jxr_javadoccomment">   * Returns the first element in {@code iterator} that satisfies the given</em>
<a class="jxr_linenumber" name="L671" href="#L671">671</a> <em class="jxr_javadoccomment">   * predicate; use this method only when such an element is known to exist. If</em>
<a class="jxr_linenumber" name="L672" href="#L672">672</a> <em class="jxr_javadoccomment">   * no such element is found, the iterator will be left exhausted: its {@code</em>
<a class="jxr_linenumber" name="L673" href="#L673">673</a> <em class="jxr_javadoccomment">   * hasNext()} method will return {@code false}. If it is possible that</em>
<a class="jxr_linenumber" name="L674" href="#L674">674</a> <em class="jxr_javadoccomment">   * &lt;i&gt;no&lt;/i&gt; element will match, use {@link #tryFind} or {@link</em>
<a class="jxr_linenumber" name="L675" href="#L675">675</a> <em class="jxr_javadoccomment">   * #find(Iterator, Predicate, Object)} instead.</em>
<a class="jxr_linenumber" name="L676" href="#L676">676</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L677" href="#L677">677</a> <em class="jxr_javadoccomment">   * @throws NoSuchElementException if no element in {@code iterator} matches</em>
<a class="jxr_linenumber" name="L678" href="#L678">678</a> <em class="jxr_javadoccomment">   *     the given predicate</em>
<a class="jxr_linenumber" name="L679" href="#L679">679</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L680" href="#L680">680</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T find(
<a class="jxr_linenumber" name="L681" href="#L681">681</a>       Iterator&lt;T&gt; iterator, Predicate&lt;? <strong class="jxr_keyword">super</strong> T&gt; predicate) {
<a class="jxr_linenumber" name="L682" href="#L682">682</a>     <strong class="jxr_keyword">return</strong> filter(iterator, predicate).next();
<a class="jxr_linenumber" name="L683" href="#L683">683</a>   }
<a class="jxr_linenumber" name="L684" href="#L684">684</a> 
<a class="jxr_linenumber" name="L685" href="#L685">685</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L686" href="#L686">686</a> <em class="jxr_javadoccomment">   * Returns the first element in {@code iterator} that satisfies the given</em>
<a class="jxr_linenumber" name="L687" href="#L687">687</a> <em class="jxr_javadoccomment">   * predicate. If no such element is found, {@code defaultValue} will be</em>
<a class="jxr_linenumber" name="L688" href="#L688">688</a> <em class="jxr_javadoccomment">   * returned from this method and the iterator will be left exhausted: its</em>
<a class="jxr_linenumber" name="L689" href="#L689">689</a> <em class="jxr_javadoccomment">   * {@code hasNext()} method will return {@code false}. Note that this can</em>
<a class="jxr_linenumber" name="L690" href="#L690">690</a> <em class="jxr_javadoccomment">   * usually be handled more naturally using {@code</em>
<a class="jxr_linenumber" name="L691" href="#L691">691</a> <em class="jxr_javadoccomment">   * tryFind(iterator, predicate).or(defaultValue)}.</em>
<a class="jxr_linenumber" name="L692" href="#L692">692</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L693" href="#L693">693</a> <em class="jxr_javadoccomment">   * @since 7.0</em>
<a class="jxr_linenumber" name="L694" href="#L694">694</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L695" href="#L695">695</a>   @Nullable
<a class="jxr_linenumber" name="L696" href="#L696">696</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T find(Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; iterator, Predicate&lt;? <strong class="jxr_keyword">super</strong> T&gt; predicate,
<a class="jxr_linenumber" name="L697" href="#L697">697</a>       @Nullable T defaultValue) {
<a class="jxr_linenumber" name="L698" href="#L698">698</a>     <strong class="jxr_keyword">return</strong> getNext(filter(iterator, predicate), defaultValue);
<a class="jxr_linenumber" name="L699" href="#L699">699</a>   }
<a class="jxr_linenumber" name="L700" href="#L700">700</a> 
<a class="jxr_linenumber" name="L701" href="#L701">701</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L702" href="#L702">702</a> <em class="jxr_javadoccomment">   * Returns an {@link Optional} containing the first element in {@code</em>
<a class="jxr_linenumber" name="L703" href="#L703">703</a> <em class="jxr_javadoccomment">   * iterator} that satisfies the given predicate, if such an element exists. If</em>
<a class="jxr_linenumber" name="L704" href="#L704">704</a> <em class="jxr_javadoccomment">   * no such element is found, an empty {@link Optional} will be returned from</em>
<a class="jxr_linenumber" name="L705" href="#L705">705</a> <em class="jxr_javadoccomment">   * this method and the iterator will be left exhausted: its {@code</em>
<a class="jxr_linenumber" name="L706" href="#L706">706</a> <em class="jxr_javadoccomment">   * hasNext()} method will return {@code false}.</em>
<a class="jxr_linenumber" name="L707" href="#L707">707</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L708" href="#L708">708</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; avoid using a {@code predicate} that matches {@code</em>
<a class="jxr_linenumber" name="L709" href="#L709">709</a> <em class="jxr_javadoccomment">   * null}. If {@code null} is matched in {@code iterator}, a</em>
<a class="jxr_linenumber" name="L710" href="#L710">710</a> <em class="jxr_javadoccomment">   * NullPointerException will be thrown.</em>
<a class="jxr_linenumber" name="L711" href="#L711">711</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L712" href="#L712">712</a> <em class="jxr_javadoccomment">   * @since 11.0</em>
<a class="jxr_linenumber" name="L713" href="#L713">713</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L714" href="#L714">714</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Optional&lt;T&gt; tryFind(
<a class="jxr_linenumber" name="L715" href="#L715">715</a>       Iterator&lt;T&gt; iterator, Predicate&lt;? <strong class="jxr_keyword">super</strong> T&gt; predicate) {
<a class="jxr_linenumber" name="L716" href="#L716">716</a>     UnmodifiableIterator&lt;T&gt; filteredIterator = filter(iterator, predicate);
<a class="jxr_linenumber" name="L717" href="#L717">717</a>     <strong class="jxr_keyword">return</strong> filteredIterator.hasNext()
<a class="jxr_linenumber" name="L718" href="#L718">718</a>         ? Optional.of(filteredIterator.next())
<a class="jxr_linenumber" name="L719" href="#L719">719</a>         : Optional.&lt;T&gt;absent();
<a class="jxr_linenumber" name="L720" href="#L720">720</a>   }
<a class="jxr_linenumber" name="L721" href="#L721">721</a> 
<a class="jxr_linenumber" name="L722" href="#L722">722</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L723" href="#L723">723</a> <em class="jxr_javadoccomment">   * Returns the index in {@code iterator} of the first element that satisfies</em>
<a class="jxr_linenumber" name="L724" href="#L724">724</a> <em class="jxr_javadoccomment">   * the provided {@code predicate}, or {@code -1} if the Iterator has no such</em>
<a class="jxr_linenumber" name="L725" href="#L725">725</a> <em class="jxr_javadoccomment">   * elements.</em>
<a class="jxr_linenumber" name="L726" href="#L726">726</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L727" href="#L727">727</a> <em class="jxr_javadoccomment">   * &lt;p&gt;More formally, returns the lowest index {@code i} such that</em>
<a class="jxr_linenumber" name="L728" href="#L728">728</a> <em class="jxr_javadoccomment">   * {@code predicate.apply(Iterators.get(iterator, i))} returns {@code true},</em>
<a class="jxr_linenumber" name="L729" href="#L729">729</a> <em class="jxr_javadoccomment">   * or {@code -1} if there is no such index.</em>
<a class="jxr_linenumber" name="L730" href="#L730">730</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L731" href="#L731">731</a> <em class="jxr_javadoccomment">   * &lt;p&gt;If -1 is returned, the iterator will be left exhausted: its</em>
<a class="jxr_linenumber" name="L732" href="#L732">732</a> <em class="jxr_javadoccomment">   * {@code hasNext()} method will return {@code false}.  Otherwise,</em>
<a class="jxr_linenumber" name="L733" href="#L733">733</a> <em class="jxr_javadoccomment">   * the iterator will be set to the element which satisfies the</em>
<a class="jxr_linenumber" name="L734" href="#L734">734</a> <em class="jxr_javadoccomment">   * {@code predicate}.</em>
<a class="jxr_linenumber" name="L735" href="#L735">735</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L736" href="#L736">736</a> <em class="jxr_javadoccomment">   * @since 2.0</em>
<a class="jxr_linenumber" name="L737" href="#L737">737</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L738" href="#L738">738</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; <strong class="jxr_keyword">int</strong> indexOf(
<a class="jxr_linenumber" name="L739" href="#L739">739</a>       Iterator&lt;T&gt; iterator, Predicate&lt;? <strong class="jxr_keyword">super</strong> T&gt; predicate) {
<a class="jxr_linenumber" name="L740" href="#L740">740</a>     checkNotNull(predicate, <span class="jxr_string">"predicate"</span>);
<a class="jxr_linenumber" name="L741" href="#L741">741</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; iterator.hasNext(); i++) {
<a class="jxr_linenumber" name="L742" href="#L742">742</a>       T current = iterator.next();
<a class="jxr_linenumber" name="L743" href="#L743">743</a>       <strong class="jxr_keyword">if</strong> (predicate.apply(current)) {
<a class="jxr_linenumber" name="L744" href="#L744">744</a>         <strong class="jxr_keyword">return</strong> i;
<a class="jxr_linenumber" name="L745" href="#L745">745</a>       }
<a class="jxr_linenumber" name="L746" href="#L746">746</a>     }
<a class="jxr_linenumber" name="L747" href="#L747">747</a>     <strong class="jxr_keyword">return</strong> -1;
<a class="jxr_linenumber" name="L748" href="#L748">748</a>   }
<a class="jxr_linenumber" name="L749" href="#L749">749</a> 
<a class="jxr_linenumber" name="L750" href="#L750">750</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L751" href="#L751">751</a> <em class="jxr_javadoccomment">   * Returns an iterator that applies {@code function} to each element of {@code</em>
<a class="jxr_linenumber" name="L752" href="#L752">752</a> <em class="jxr_javadoccomment">   * fromIterator}.</em>
<a class="jxr_linenumber" name="L753" href="#L753">753</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L754" href="#L754">754</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned iterator supports {@code remove()} if the provided iterator</em>
<a class="jxr_linenumber" name="L755" href="#L755">755</a> <em class="jxr_javadoccomment">   * does. After a successful {@code remove()} call, {@code fromIterator} no</em>
<a class="jxr_linenumber" name="L756" href="#L756">756</a> <em class="jxr_javadoccomment">   * longer contains the corresponding element.</em>
<a class="jxr_linenumber" name="L757" href="#L757">757</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L758" href="#L758">758</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;F, T&gt; Iterator&lt;T&gt; transform(<strong class="jxr_keyword">final</strong> Iterator&lt;F&gt; fromIterator,
<a class="jxr_linenumber" name="L759" href="#L759">759</a>       <strong class="jxr_keyword">final</strong> Function&lt;? <strong class="jxr_keyword">super</strong> F, ? <strong class="jxr_keyword">extends</strong> T&gt; function) {
<a class="jxr_linenumber" name="L760" href="#L760">760</a>     checkNotNull(function);
<a class="jxr_linenumber" name="L761" href="#L761">761</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> TransformedIterator&lt;F, T&gt;(fromIterator) {
<a class="jxr_linenumber" name="L762" href="#L762">762</a>       @Override
<a class="jxr_linenumber" name="L763" href="#L763">763</a>       T transform(F from) {
<a class="jxr_linenumber" name="L764" href="#L764">764</a>         <strong class="jxr_keyword">return</strong> function.apply(from);
<a class="jxr_linenumber" name="L765" href="#L765">765</a>       }
<a class="jxr_linenumber" name="L766" href="#L766">766</a>     };
<a class="jxr_linenumber" name="L767" href="#L767">767</a>   }
<a class="jxr_linenumber" name="L768" href="#L768">768</a> 
<a class="jxr_linenumber" name="L769" href="#L769">769</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L770" href="#L770">770</a> <em class="jxr_javadoccomment">   * Advances {@code iterator} {@code position + 1} times, returning the</em>
<a class="jxr_linenumber" name="L771" href="#L771">771</a> <em class="jxr_javadoccomment">   * element at the {@code position}th position.</em>
<a class="jxr_linenumber" name="L772" href="#L772">772</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L773" href="#L773">773</a> <em class="jxr_javadoccomment">   * @param position position of the element to return</em>
<a class="jxr_linenumber" name="L774" href="#L774">774</a> <em class="jxr_javadoccomment">   * @return the element at the specified position in {@code iterator}</em>
<a class="jxr_linenumber" name="L775" href="#L775">775</a> <em class="jxr_javadoccomment">   * @throws IndexOutOfBoundsException if {@code position} is negative or</em>
<a class="jxr_linenumber" name="L776" href="#L776">776</a> <em class="jxr_javadoccomment">   *     greater than or equal to the number of elements remaining in</em>
<a class="jxr_linenumber" name="L777" href="#L777">777</a> <em class="jxr_javadoccomment">   *     {@code iterator}</em>
<a class="jxr_linenumber" name="L778" href="#L778">778</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L779" href="#L779">779</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T get(Iterator&lt;T&gt; iterator, <strong class="jxr_keyword">int</strong> position) {
<a class="jxr_linenumber" name="L780" href="#L780">780</a>     checkNonnegative(position);
<a class="jxr_linenumber" name="L781" href="#L781">781</a>     <strong class="jxr_keyword">int</strong> skipped = advance(iterator, position);
<a class="jxr_linenumber" name="L782" href="#L782">782</a>     <strong class="jxr_keyword">if</strong> (!iterator.hasNext()) {
<a class="jxr_linenumber" name="L783" href="#L783">783</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IndexOutOfBoundsException(<span class="jxr_string">"position ("</span> + position
<a class="jxr_linenumber" name="L784" href="#L784">784</a>           + <span class="jxr_string">") must be less than the number of elements that remained ("</span>
<a class="jxr_linenumber" name="L785" href="#L785">785</a>           + skipped + <span class="jxr_string">")"</span>);
<a class="jxr_linenumber" name="L786" href="#L786">786</a>     }
<a class="jxr_linenumber" name="L787" href="#L787">787</a>     <strong class="jxr_keyword">return</strong> iterator.next();
<a class="jxr_linenumber" name="L788" href="#L788">788</a>   }
<a class="jxr_linenumber" name="L789" href="#L789">789</a> 
<a class="jxr_linenumber" name="L790" href="#L790">790</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> checkNonnegative(<strong class="jxr_keyword">int</strong> position) {
<a class="jxr_linenumber" name="L791" href="#L791">791</a>     <strong class="jxr_keyword">if</strong> (position &lt; 0) {
<a class="jxr_linenumber" name="L792" href="#L792">792</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IndexOutOfBoundsException(<span class="jxr_string">"position ("</span> + position
<a class="jxr_linenumber" name="L793" href="#L793">793</a>           + <span class="jxr_string">") must not be negative"</span>);
<a class="jxr_linenumber" name="L794" href="#L794">794</a>     }
<a class="jxr_linenumber" name="L795" href="#L795">795</a>   }
<a class="jxr_linenumber" name="L796" href="#L796">796</a> 
<a class="jxr_linenumber" name="L797" href="#L797">797</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L798" href="#L798">798</a> <em class="jxr_javadoccomment">   * Advances {@code iterator} {@code position + 1} times, returning the</em>
<a class="jxr_linenumber" name="L799" href="#L799">799</a> <em class="jxr_javadoccomment">   * element at the {@code position}th position or {@code defaultValue}</em>
<a class="jxr_linenumber" name="L800" href="#L800">800</a> <em class="jxr_javadoccomment">   * otherwise.</em>
<a class="jxr_linenumber" name="L801" href="#L801">801</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L802" href="#L802">802</a> <em class="jxr_javadoccomment">   * @param position position of the element to return</em>
<a class="jxr_linenumber" name="L803" href="#L803">803</a> <em class="jxr_javadoccomment">   * @param defaultValue the default value to return if the iterator is empty</em>
<a class="jxr_linenumber" name="L804" href="#L804">804</a> <em class="jxr_javadoccomment">   *     or if {@code position} is greater than the number of elements</em>
<a class="jxr_linenumber" name="L805" href="#L805">805</a> <em class="jxr_javadoccomment">   *     remaining in {@code iterator}</em>
<a class="jxr_linenumber" name="L806" href="#L806">806</a> <em class="jxr_javadoccomment">   * @return the element at the specified position in {@code iterator} or</em>
<a class="jxr_linenumber" name="L807" href="#L807">807</a> <em class="jxr_javadoccomment">   *     {@code defaultValue} if {@code iterator} produces fewer than</em>
<a class="jxr_linenumber" name="L808" href="#L808">808</a> <em class="jxr_javadoccomment">   *     {@code position + 1} elements.</em>
<a class="jxr_linenumber" name="L809" href="#L809">809</a> <em class="jxr_javadoccomment">   * @throws IndexOutOfBoundsException if {@code position} is negative</em>
<a class="jxr_linenumber" name="L810" href="#L810">810</a> <em class="jxr_javadoccomment">   * @since 4.0</em>
<a class="jxr_linenumber" name="L811" href="#L811">811</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L812" href="#L812">812</a>   @Nullable
<a class="jxr_linenumber" name="L813" href="#L813">813</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T get(Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; iterator, <strong class="jxr_keyword">int</strong> position, @Nullable T defaultValue) {
<a class="jxr_linenumber" name="L814" href="#L814">814</a>     checkNonnegative(position);
<a class="jxr_linenumber" name="L815" href="#L815">815</a>     advance(iterator, position);
<a class="jxr_linenumber" name="L816" href="#L816">816</a>     <strong class="jxr_keyword">return</strong> getNext(iterator, defaultValue);
<a class="jxr_linenumber" name="L817" href="#L817">817</a>   }
<a class="jxr_linenumber" name="L818" href="#L818">818</a> 
<a class="jxr_linenumber" name="L819" href="#L819">819</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L820" href="#L820">820</a> <em class="jxr_javadoccomment">   * Returns the next element in {@code iterator} or {@code defaultValue} if</em>
<a class="jxr_linenumber" name="L821" href="#L821">821</a> <em class="jxr_javadoccomment">   * the iterator is empty.  The {@link Iterables} analog to this method is</em>
<a class="jxr_linenumber" name="L822" href="#L822">822</a> <em class="jxr_javadoccomment">   * {@link Iterables#getFirst}.</em>
<a class="jxr_linenumber" name="L823" href="#L823">823</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L824" href="#L824">824</a> <em class="jxr_javadoccomment">   * @param defaultValue the default value to return if the iterator is empty</em>
<a class="jxr_linenumber" name="L825" href="#L825">825</a> <em class="jxr_javadoccomment">   * @return the next element of {@code iterator} or the default value</em>
<a class="jxr_linenumber" name="L826" href="#L826">826</a> <em class="jxr_javadoccomment">   * @since 7.0</em>
<a class="jxr_linenumber" name="L827" href="#L827">827</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L828" href="#L828">828</a>   @Nullable
<a class="jxr_linenumber" name="L829" href="#L829">829</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T getNext(Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; iterator, @Nullable T defaultValue) {
<a class="jxr_linenumber" name="L830" href="#L830">830</a>     <strong class="jxr_keyword">return</strong> iterator.hasNext() ? iterator.next() : defaultValue;
<a class="jxr_linenumber" name="L831" href="#L831">831</a>   }
<a class="jxr_linenumber" name="L832" href="#L832">832</a> 
<a class="jxr_linenumber" name="L833" href="#L833">833</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L834" href="#L834">834</a> <em class="jxr_javadoccomment">   * Advances {@code iterator} to the end, returning the last element.</em>
<a class="jxr_linenumber" name="L835" href="#L835">835</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L836" href="#L836">836</a> <em class="jxr_javadoccomment">   * @return the last element of {@code iterator}</em>
<a class="jxr_linenumber" name="L837" href="#L837">837</a> <em class="jxr_javadoccomment">   * @throws NoSuchElementException if the iterator is empty</em>
<a class="jxr_linenumber" name="L838" href="#L838">838</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L839" href="#L839">839</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T getLast(Iterator&lt;T&gt; iterator) {
<a class="jxr_linenumber" name="L840" href="#L840">840</a>     <strong class="jxr_keyword">while</strong> (<strong class="jxr_keyword">true</strong>) {
<a class="jxr_linenumber" name="L841" href="#L841">841</a>       T current = iterator.next();
<a class="jxr_linenumber" name="L842" href="#L842">842</a>       <strong class="jxr_keyword">if</strong> (!iterator.hasNext()) {
<a class="jxr_linenumber" name="L843" href="#L843">843</a>         <strong class="jxr_keyword">return</strong> current;
<a class="jxr_linenumber" name="L844" href="#L844">844</a>       }
<a class="jxr_linenumber" name="L845" href="#L845">845</a>     }
<a class="jxr_linenumber" name="L846" href="#L846">846</a>   }
<a class="jxr_linenumber" name="L847" href="#L847">847</a> 
<a class="jxr_linenumber" name="L848" href="#L848">848</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L849" href="#L849">849</a> <em class="jxr_javadoccomment">   * Advances {@code iterator} to the end, returning the last element or</em>
<a class="jxr_linenumber" name="L850" href="#L850">850</a> <em class="jxr_javadoccomment">   * {@code defaultValue} if the iterator is empty.</em>
<a class="jxr_linenumber" name="L851" href="#L851">851</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L852" href="#L852">852</a> <em class="jxr_javadoccomment">   * @param defaultValue the default value to return if the iterator is empty</em>
<a class="jxr_linenumber" name="L853" href="#L853">853</a> <em class="jxr_javadoccomment">   * @return the last element of {@code iterator}</em>
<a class="jxr_linenumber" name="L854" href="#L854">854</a> <em class="jxr_javadoccomment">   * @since 3.0</em>
<a class="jxr_linenumber" name="L855" href="#L855">855</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L856" href="#L856">856</a>   @Nullable
<a class="jxr_linenumber" name="L857" href="#L857">857</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T getLast(Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; iterator, @Nullable T defaultValue) {
<a class="jxr_linenumber" name="L858" href="#L858">858</a>     <strong class="jxr_keyword">return</strong> iterator.hasNext() ? getLast(iterator) : defaultValue;
<a class="jxr_linenumber" name="L859" href="#L859">859</a>   }
<a class="jxr_linenumber" name="L860" href="#L860">860</a> 
<a class="jxr_linenumber" name="L861" href="#L861">861</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L862" href="#L862">862</a> <em class="jxr_javadoccomment">   * Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times</em>
<a class="jxr_linenumber" name="L863" href="#L863">863</a> <em class="jxr_javadoccomment">   * or until {@code hasNext()} returns {@code false}, whichever comes first.</em>
<a class="jxr_linenumber" name="L864" href="#L864">864</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L865" href="#L865">865</a> <em class="jxr_javadoccomment">   * @return the number of elements the iterator was advanced</em>
<a class="jxr_linenumber" name="L866" href="#L866">866</a> <em class="jxr_javadoccomment">   * @since 13.0 (since 3.0 as {@code Iterators.skip})</em>
<a class="jxr_linenumber" name="L867" href="#L867">867</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L868" href="#L868">868</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">int</strong> advance(Iterator&lt;?&gt; iterator, <strong class="jxr_keyword">int</strong> numberToAdvance) {
<a class="jxr_linenumber" name="L869" href="#L869">869</a>     checkNotNull(iterator);
<a class="jxr_linenumber" name="L870" href="#L870">870</a>     checkArgument(numberToAdvance &gt;= 0, <span class="jxr_string">"numberToAdvance must be nonnegative"</span>);
<a class="jxr_linenumber" name="L871" href="#L871">871</a> 
<a class="jxr_linenumber" name="L872" href="#L872">872</a>     <strong class="jxr_keyword">int</strong> i;
<a class="jxr_linenumber" name="L873" href="#L873">873</a>     <strong class="jxr_keyword">for</strong> (i = 0; i &lt; numberToAdvance &amp;&amp; iterator.hasNext(); i++) {
<a class="jxr_linenumber" name="L874" href="#L874">874</a>       iterator.next();
<a class="jxr_linenumber" name="L875" href="#L875">875</a>     }
<a class="jxr_linenumber" name="L876" href="#L876">876</a>     <strong class="jxr_keyword">return</strong> i;
<a class="jxr_linenumber" name="L877" href="#L877">877</a>   }
<a class="jxr_linenumber" name="L878" href="#L878">878</a> 
<a class="jxr_linenumber" name="L879" href="#L879">879</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L880" href="#L880">880</a> <em class="jxr_javadoccomment">   * Creates an iterator returning the first {@code limitSize} elements of the</em>
<a class="jxr_linenumber" name="L881" href="#L881">881</a> <em class="jxr_javadoccomment">   * given iterator. If the original iterator does not contain that many</em>
<a class="jxr_linenumber" name="L882" href="#L882">882</a> <em class="jxr_javadoccomment">   * elements, the returned iterator will have the same behavior as the original</em>
<a class="jxr_linenumber" name="L883" href="#L883">883</a> <em class="jxr_javadoccomment">   * iterator. The returned iterator supports {@code remove()} if the original</em>
<a class="jxr_linenumber" name="L884" href="#L884">884</a> <em class="jxr_javadoccomment">   * iterator does.</em>
<a class="jxr_linenumber" name="L885" href="#L885">885</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L886" href="#L886">886</a> <em class="jxr_javadoccomment">   * @param iterator the iterator to limit</em>
<a class="jxr_linenumber" name="L887" href="#L887">887</a> <em class="jxr_javadoccomment">   * @param limitSize the maximum number of elements in the returned iterator</em>
<a class="jxr_linenumber" name="L888" href="#L888">888</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code limitSize} is negative</em>
<a class="jxr_linenumber" name="L889" href="#L889">889</a> <em class="jxr_javadoccomment">   * @since 3.0</em>
<a class="jxr_linenumber" name="L890" href="#L890">890</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L891" href="#L891">891</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Iterator&lt;T&gt; limit(
<a class="jxr_linenumber" name="L892" href="#L892">892</a>       <strong class="jxr_keyword">final</strong> Iterator&lt;T&gt; iterator, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> limitSize) {
<a class="jxr_linenumber" name="L893" href="#L893">893</a>     checkNotNull(iterator);
<a class="jxr_linenumber" name="L894" href="#L894">894</a>     checkArgument(limitSize &gt;= 0, <span class="jxr_string">"limit is negative"</span>);
<a class="jxr_linenumber" name="L895" href="#L895">895</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Iterator&lt;T&gt;() {
<a class="jxr_linenumber" name="L896" href="#L896">896</a>       <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> count;
<a class="jxr_linenumber" name="L897" href="#L897">897</a> 
<a class="jxr_linenumber" name="L898" href="#L898">898</a>       @Override
<a class="jxr_linenumber" name="L899" href="#L899">899</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L900" href="#L900">900</a>         <strong class="jxr_keyword">return</strong> count &lt; limitSize &amp;&amp; iterator.hasNext();
<a class="jxr_linenumber" name="L901" href="#L901">901</a>       }
<a class="jxr_linenumber" name="L902" href="#L902">902</a> 
<a class="jxr_linenumber" name="L903" href="#L903">903</a>       @Override
<a class="jxr_linenumber" name="L904" href="#L904">904</a>       <strong class="jxr_keyword">public</strong> T next() {
<a class="jxr_linenumber" name="L905" href="#L905">905</a>         <strong class="jxr_keyword">if</strong> (!hasNext()) {
<a class="jxr_linenumber" name="L906" href="#L906">906</a>           <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L907" href="#L907">907</a>         }
<a class="jxr_linenumber" name="L908" href="#L908">908</a>         count++;
<a class="jxr_linenumber" name="L909" href="#L909">909</a>         <strong class="jxr_keyword">return</strong> iterator.next();
<a class="jxr_linenumber" name="L910" href="#L910">910</a>       }
<a class="jxr_linenumber" name="L911" href="#L911">911</a> 
<a class="jxr_linenumber" name="L912" href="#L912">912</a>       @Override
<a class="jxr_linenumber" name="L913" href="#L913">913</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> remove() {
<a class="jxr_linenumber" name="L914" href="#L914">914</a>         iterator.remove();
<a class="jxr_linenumber" name="L915" href="#L915">915</a>       }
<a class="jxr_linenumber" name="L916" href="#L916">916</a>     };
<a class="jxr_linenumber" name="L917" href="#L917">917</a>   }
<a class="jxr_linenumber" name="L918" href="#L918">918</a> 
<a class="jxr_linenumber" name="L919" href="#L919">919</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L920" href="#L920">920</a> <em class="jxr_javadoccomment">   * Returns a view of the supplied {@code iterator} that removes each element</em>
<a class="jxr_linenumber" name="L921" href="#L921">921</a> <em class="jxr_javadoccomment">   * from the supplied {@code iterator} as it is returned.</em>
<a class="jxr_linenumber" name="L922" href="#L922">922</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L923" href="#L923">923</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The provided iterator must support {@link Iterator#remove()} or</em>
<a class="jxr_linenumber" name="L924" href="#L924">924</a> <em class="jxr_javadoccomment">   * else the returned iterator will fail on the first call to {@code</em>
<a class="jxr_linenumber" name="L925" href="#L925">925</a> <em class="jxr_javadoccomment">   * next}.</em>
<a class="jxr_linenumber" name="L926" href="#L926">926</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L927" href="#L927">927</a> <em class="jxr_javadoccomment">   * @param iterator the iterator to remove and return elements from</em>
<a class="jxr_linenumber" name="L928" href="#L928">928</a> <em class="jxr_javadoccomment">   * @return an iterator that removes and returns elements from the</em>
<a class="jxr_linenumber" name="L929" href="#L929">929</a> <em class="jxr_javadoccomment">   *     supplied iterator</em>
<a class="jxr_linenumber" name="L930" href="#L930">930</a> <em class="jxr_javadoccomment">   * @since 2.0</em>
<a class="jxr_linenumber" name="L931" href="#L931">931</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L932" href="#L932">932</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Iterator&lt;T&gt; consumingIterator(<strong class="jxr_keyword">final</strong> Iterator&lt;T&gt; iterator) {
<a class="jxr_linenumber" name="L933" href="#L933">933</a>     checkNotNull(iterator);
<a class="jxr_linenumber" name="L934" href="#L934">934</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> UnmodifiableIterator&lt;T&gt;() {
<a class="jxr_linenumber" name="L935" href="#L935">935</a>       @Override
<a class="jxr_linenumber" name="L936" href="#L936">936</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L937" href="#L937">937</a>         <strong class="jxr_keyword">return</strong> iterator.hasNext();
<a class="jxr_linenumber" name="L938" href="#L938">938</a>       }
<a class="jxr_linenumber" name="L939" href="#L939">939</a> 
<a class="jxr_linenumber" name="L940" href="#L940">940</a>       @Override
<a class="jxr_linenumber" name="L941" href="#L941">941</a>       <strong class="jxr_keyword">public</strong> T next() {
<a class="jxr_linenumber" name="L942" href="#L942">942</a>         T next = iterator.next();
<a class="jxr_linenumber" name="L943" href="#L943">943</a>         iterator.remove();
<a class="jxr_linenumber" name="L944" href="#L944">944</a>         <strong class="jxr_keyword">return</strong> next;
<a class="jxr_linenumber" name="L945" href="#L945">945</a>       }
<a class="jxr_linenumber" name="L946" href="#L946">946</a> 
<a class="jxr_linenumber" name="L947" href="#L947">947</a>       @Override
<a class="jxr_linenumber" name="L948" href="#L948">948</a>       <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L949" href="#L949">949</a>         <strong class="jxr_keyword">return</strong> <span class="jxr_string">"Iterators.consumingIterator(...)"</span>;
<a class="jxr_linenumber" name="L950" href="#L950">950</a>       }
<a class="jxr_linenumber" name="L951" href="#L951">951</a>     };
<a class="jxr_linenumber" name="L952" href="#L952">952</a>   }
<a class="jxr_linenumber" name="L953" href="#L953">953</a> 
<a class="jxr_linenumber" name="L954" href="#L954">954</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L955" href="#L955">955</a> <em class="jxr_javadoccomment">   * Deletes and returns the next value from the iterator, or returns</em>
<a class="jxr_linenumber" name="L956" href="#L956">956</a> <em class="jxr_javadoccomment">   * {@code null} if there is no such value.</em>
<a class="jxr_linenumber" name="L957" href="#L957">957</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L958" href="#L958">958</a>   @Nullable
<a class="jxr_linenumber" name="L959" href="#L959">959</a>   <strong class="jxr_keyword">static</strong> &lt;T&gt; T pollNext(Iterator&lt;T&gt; iterator) {
<a class="jxr_linenumber" name="L960" href="#L960">960</a>     <strong class="jxr_keyword">if</strong> (iterator.hasNext()) {
<a class="jxr_linenumber" name="L961" href="#L961">961</a>       T result = iterator.next();
<a class="jxr_linenumber" name="L962" href="#L962">962</a>       iterator.remove();
<a class="jxr_linenumber" name="L963" href="#L963">963</a>       <strong class="jxr_keyword">return</strong> result;
<a class="jxr_linenumber" name="L964" href="#L964">964</a>     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L965" href="#L965">965</a>       <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L966" href="#L966">966</a>     }
<a class="jxr_linenumber" name="L967" href="#L967">967</a>   }
<a class="jxr_linenumber" name="L968" href="#L968">968</a> 
<a class="jxr_linenumber" name="L969" href="#L969">969</a>   <em class="jxr_comment">// Methods only in Iterators, not in Iterables</em>
<a class="jxr_linenumber" name="L970" href="#L970">970</a> 
<a class="jxr_linenumber" name="L971" href="#L971">971</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L972" href="#L972">972</a> <em class="jxr_javadoccomment">   * Clears the iterator using its remove method.</em>
<a class="jxr_linenumber" name="L973" href="#L973">973</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L974" href="#L974">974</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> clear(Iterator&lt;?&gt; iterator) {
<a class="jxr_linenumber" name="L975" href="#L975">975</a>     checkNotNull(iterator);
<a class="jxr_linenumber" name="L976" href="#L976">976</a>     <strong class="jxr_keyword">while</strong> (iterator.hasNext()) {
<a class="jxr_linenumber" name="L977" href="#L977">977</a>       iterator.next();
<a class="jxr_linenumber" name="L978" href="#L978">978</a>       iterator.remove();
<a class="jxr_linenumber" name="L979" href="#L979">979</a>     }
<a class="jxr_linenumber" name="L980" href="#L980">980</a>   }
<a class="jxr_linenumber" name="L981" href="#L981">981</a> 
<a class="jxr_linenumber" name="L982" href="#L982">982</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L983" href="#L983">983</a> <em class="jxr_javadoccomment">   * Returns an iterator containing the elements of {@code array} in order. The</em>
<a class="jxr_linenumber" name="L984" href="#L984">984</a> <em class="jxr_javadoccomment">   * returned iterator is a view of the array; subsequent changes to the array</em>
<a class="jxr_linenumber" name="L985" href="#L985">985</a> <em class="jxr_javadoccomment">   * will be reflected in the iterator.</em>
<a class="jxr_linenumber" name="L986" href="#L986">986</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L987" href="#L987">987</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; It is often preferable to represent your data using a</em>
<a class="jxr_linenumber" name="L988" href="#L988">988</a> <em class="jxr_javadoccomment">   * collection type, for example using {@link Arrays#asList(Object[])}, making</em>
<a class="jxr_linenumber" name="L989" href="#L989">989</a> <em class="jxr_javadoccomment">   * this method unnecessary.</em>
<a class="jxr_linenumber" name="L990" href="#L990">990</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L991" href="#L991">991</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The {@code Iterable} equivalent of this method is either {@link</em>
<a class="jxr_linenumber" name="L992" href="#L992">992</a> <em class="jxr_javadoccomment">   * Arrays#asList(Object[])}, {@link ImmutableList#copyOf(Object[])}},</em>
<a class="jxr_linenumber" name="L993" href="#L993">993</a> <em class="jxr_javadoccomment">   * or {@link ImmutableList#of}.</em>
<a class="jxr_linenumber" name="L994" href="#L994">994</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L995" href="#L995">995</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;T&gt; forArray(<strong class="jxr_keyword">final</strong> T... array) {
<a class="jxr_linenumber" name="L996" href="#L996">996</a>     <strong class="jxr_keyword">return</strong> forArray(array, 0, array.length, 0);
<a class="jxr_linenumber" name="L997" href="#L997">997</a>   }
<a class="jxr_linenumber" name="L998" href="#L998">998</a> 
<a class="jxr_linenumber" name="L999" href="#L999">999</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1000" href="#L1000">1000</a> <em class="jxr_javadoccomment">   * Returns a list iterator containing the elements in the specified range of</em>
<a class="jxr_linenumber" name="L1001" href="#L1001">1001</a> <em class="jxr_javadoccomment">   * {@code array} in order, starting at the specified index.</em>
<a class="jxr_linenumber" name="L1002" href="#L1002">1002</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1003" href="#L1003">1003</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The {@code Iterable} equivalent of this method is {@code</em>
<a class="jxr_linenumber" name="L1004" href="#L1004">1004</a> <em class="jxr_javadoccomment">   * Arrays.asList(array).subList(offset, offset + length).listIterator(index)}.</em>
<a class="jxr_linenumber" name="L1005" href="#L1005">1005</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L1006" href="#L1006">1006</a>   <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableListIterator&lt;T&gt; forArray(
<a class="jxr_linenumber" name="L1007" href="#L1007">1007</a>       <strong class="jxr_keyword">final</strong> T[] array, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> offset, <strong class="jxr_keyword">int</strong> length, <strong class="jxr_keyword">int</strong> index) {
<a class="jxr_linenumber" name="L1008" href="#L1008">1008</a>     checkArgument(length &gt;= 0);
<a class="jxr_linenumber" name="L1009" href="#L1009">1009</a>     <strong class="jxr_keyword">int</strong> end = offset + length;
<a class="jxr_linenumber" name="L1010" href="#L1010">1010</a> 
<a class="jxr_linenumber" name="L1011" href="#L1011">1011</a>     <em class="jxr_comment">// Technically we should give a slightly more descriptive error on overflow</em>
<a class="jxr_linenumber" name="L1012" href="#L1012">1012</a>     Preconditions.checkPositionIndexes(offset, end, array.length);
<a class="jxr_linenumber" name="L1013" href="#L1013">1013</a>     Preconditions.checkPositionIndex(index, length);
<a class="jxr_linenumber" name="L1014" href="#L1014">1014</a>     <strong class="jxr_keyword">if</strong> (length == 0) {
<a class="jxr_linenumber" name="L1015" href="#L1015">1015</a>       <strong class="jxr_keyword">return</strong> emptyListIterator();
<a class="jxr_linenumber" name="L1016" href="#L1016">1016</a>     }
<a class="jxr_linenumber" name="L1017" href="#L1017">1017</a> 
<a class="jxr_linenumber" name="L1018" href="#L1018">1018</a>     <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L1019" href="#L1019">1019</a> <em class="jxr_comment">     * We can't use call the two-arg constructor with arguments (offset, end)</em>
<a class="jxr_linenumber" name="L1020" href="#L1020">1020</a> <em class="jxr_comment">     * because the returned Iterator is a ListIterator that may be moved back</em>
<a class="jxr_linenumber" name="L1021" href="#L1021">1021</a> <em class="jxr_comment">     * past the beginning of the iteration.</em>
<a class="jxr_linenumber" name="L1022" href="#L1022">1022</a> <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L1023" href="#L1023">1023</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> AbstractIndexedListIterator&lt;T&gt;(length, index) {
<a class="jxr_linenumber" name="L1024" href="#L1024">1024</a>       @Override <strong class="jxr_keyword">protected</strong> T get(<strong class="jxr_keyword">int</strong> index) {
<a class="jxr_linenumber" name="L1025" href="#L1025">1025</a>         <strong class="jxr_keyword">return</strong> array[offset + index];
<a class="jxr_linenumber" name="L1026" href="#L1026">1026</a>       }
<a class="jxr_linenumber" name="L1027" href="#L1027">1027</a>     };
<a class="jxr_linenumber" name="L1028" href="#L1028">1028</a>   }
<a class="jxr_linenumber" name="L1029" href="#L1029">1029</a> 
<a class="jxr_linenumber" name="L1030" href="#L1030">1030</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1031" href="#L1031">1031</a> <em class="jxr_javadoccomment">   * Returns an iterator containing only {@code value}.</em>
<a class="jxr_linenumber" name="L1032" href="#L1032">1032</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1033" href="#L1033">1033</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The {@link Iterable} equivalent of this method is {@link</em>
<a class="jxr_linenumber" name="L1034" href="#L1034">1034</a> <em class="jxr_javadoccomment">   * Collections#singleton}.</em>
<a class="jxr_linenumber" name="L1035" href="#L1035">1035</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L1036" href="#L1036">1036</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;T&gt; singletonIterator(
<a class="jxr_linenumber" name="L1037" href="#L1037">1037</a>       @Nullable <strong class="jxr_keyword">final</strong> T value) {
<a class="jxr_linenumber" name="L1038" href="#L1038">1038</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> UnmodifiableIterator&lt;T&gt;() {
<a class="jxr_linenumber" name="L1039" href="#L1039">1039</a>       <strong class="jxr_keyword">boolean</strong> done;
<a class="jxr_linenumber" name="L1040" href="#L1040">1040</a>       @Override
<a class="jxr_linenumber" name="L1041" href="#L1041">1041</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L1042" href="#L1042">1042</a>         <strong class="jxr_keyword">return</strong> !done;
<a class="jxr_linenumber" name="L1043" href="#L1043">1043</a>       }
<a class="jxr_linenumber" name="L1044" href="#L1044">1044</a>       @Override
<a class="jxr_linenumber" name="L1045" href="#L1045">1045</a>       <strong class="jxr_keyword">public</strong> T next() {
<a class="jxr_linenumber" name="L1046" href="#L1046">1046</a>         <strong class="jxr_keyword">if</strong> (done) {
<a class="jxr_linenumber" name="L1047" href="#L1047">1047</a>           <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L1048" href="#L1048">1048</a>         }
<a class="jxr_linenumber" name="L1049" href="#L1049">1049</a>         done = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L1050" href="#L1050">1050</a>         <strong class="jxr_keyword">return</strong> value;
<a class="jxr_linenumber" name="L1051" href="#L1051">1051</a>       }
<a class="jxr_linenumber" name="L1052" href="#L1052">1052</a>     };
<a class="jxr_linenumber" name="L1053" href="#L1053">1053</a>   }
<a class="jxr_linenumber" name="L1054" href="#L1054">1054</a> 
<a class="jxr_linenumber" name="L1055" href="#L1055">1055</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1056" href="#L1056">1056</a> <em class="jxr_javadoccomment">   * Adapts an {@code Enumeration} to the {@code Iterator} interface.</em>
<a class="jxr_linenumber" name="L1057" href="#L1057">1057</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1058" href="#L1058">1058</a> <em class="jxr_javadoccomment">   * &lt;p&gt;This method has no equivalent in {@link Iterables} because viewing an</em>
<a class="jxr_linenumber" name="L1059" href="#L1059">1059</a> <em class="jxr_javadoccomment">   * {@code Enumeration} as an {@code Iterable} is impossible. However, the</em>
<a class="jxr_linenumber" name="L1060" href="#L1060">1060</a> <em class="jxr_javadoccomment">   * contents can be &lt;i&gt;copied&lt;/i&gt; into a collection using {@link</em>
<a class="jxr_linenumber" name="L1061" href="#L1061">1061</a> <em class="jxr_javadoccomment">   * Collections#list}.</em>
<a class="jxr_linenumber" name="L1062" href="#L1062">1062</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L1063" href="#L1063">1063</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;T&gt; forEnumeration(
<a class="jxr_linenumber" name="L1064" href="#L1064">1064</a>       <strong class="jxr_keyword">final</strong> Enumeration&lt;T&gt; enumeration) {
<a class="jxr_linenumber" name="L1065" href="#L1065">1065</a>     checkNotNull(enumeration);
<a class="jxr_linenumber" name="L1066" href="#L1066">1066</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> UnmodifiableIterator&lt;T&gt;() {
<a class="jxr_linenumber" name="L1067" href="#L1067">1067</a>       @Override
<a class="jxr_linenumber" name="L1068" href="#L1068">1068</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L1069" href="#L1069">1069</a>         <strong class="jxr_keyword">return</strong> enumeration.hasMoreElements();
<a class="jxr_linenumber" name="L1070" href="#L1070">1070</a>       }
<a class="jxr_linenumber" name="L1071" href="#L1071">1071</a>       @Override
<a class="jxr_linenumber" name="L1072" href="#L1072">1072</a>       <strong class="jxr_keyword">public</strong> T next() {
<a class="jxr_linenumber" name="L1073" href="#L1073">1073</a>         <strong class="jxr_keyword">return</strong> enumeration.nextElement();
<a class="jxr_linenumber" name="L1074" href="#L1074">1074</a>       }
<a class="jxr_linenumber" name="L1075" href="#L1075">1075</a>     };
<a class="jxr_linenumber" name="L1076" href="#L1076">1076</a>   }
<a class="jxr_linenumber" name="L1077" href="#L1077">1077</a> 
<a class="jxr_linenumber" name="L1078" href="#L1078">1078</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1079" href="#L1079">1079</a> <em class="jxr_javadoccomment">   * Adapts an {@code Iterator} to the {@code Enumeration} interface.</em>
<a class="jxr_linenumber" name="L1080" href="#L1080">1080</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1081" href="#L1081">1081</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The {@code Iterable} equivalent of this method is either {@link</em>
<a class="jxr_linenumber" name="L1082" href="#L1082">1082</a> <em class="jxr_javadoccomment">   * Collections#enumeration} (if you have a {@link Collection}), or</em>
<a class="jxr_linenumber" name="L1083" href="#L1083">1083</a> <em class="jxr_javadoccomment">   * {@code Iterators.asEnumeration(collection.iterator())}.</em>
<a class="jxr_linenumber" name="L1084" href="#L1084">1084</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L1085" href="#L1085">1085</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Enumeration&lt;T&gt; asEnumeration(<strong class="jxr_keyword">final</strong> Iterator&lt;T&gt; iterator) {
<a class="jxr_linenumber" name="L1086" href="#L1086">1086</a>     checkNotNull(iterator);
<a class="jxr_linenumber" name="L1087" href="#L1087">1087</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Enumeration&lt;T&gt;() {
<a class="jxr_linenumber" name="L1088" href="#L1088">1088</a>       @Override
<a class="jxr_linenumber" name="L1089" href="#L1089">1089</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasMoreElements() {
<a class="jxr_linenumber" name="L1090" href="#L1090">1090</a>         <strong class="jxr_keyword">return</strong> iterator.hasNext();
<a class="jxr_linenumber" name="L1091" href="#L1091">1091</a>       }
<a class="jxr_linenumber" name="L1092" href="#L1092">1092</a>       @Override
<a class="jxr_linenumber" name="L1093" href="#L1093">1093</a>       <strong class="jxr_keyword">public</strong> T nextElement() {
<a class="jxr_linenumber" name="L1094" href="#L1094">1094</a>         <strong class="jxr_keyword">return</strong> iterator.next();
<a class="jxr_linenumber" name="L1095" href="#L1095">1095</a>       }
<a class="jxr_linenumber" name="L1096" href="#L1096">1096</a>     };
<a class="jxr_linenumber" name="L1097" href="#L1097">1097</a>   }
<a class="jxr_linenumber" name="L1098" href="#L1098">1098</a> 
<a class="jxr_linenumber" name="L1099" href="#L1099">1099</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1100" href="#L1100">1100</a> <em class="jxr_javadoccomment">   * Implementation of PeekingIterator that avoids peeking unless necessary.</em>
<a class="jxr_linenumber" name="L1101" href="#L1101">1101</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L1102" href="#L1102">1102</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> PeekingImpl&lt;E&gt; <strong class="jxr_keyword">implements</strong> PeekingIterator&lt;E&gt; {
<a class="jxr_linenumber" name="L1103" href="#L1103">1103</a> 
<a class="jxr_linenumber" name="L1104" href="#L1104">1104</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> Iterator&lt;? <strong class="jxr_keyword">extends</strong> E&gt; iterator;
<a class="jxr_linenumber" name="L1105" href="#L1105">1105</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> hasPeeked;
<a class="jxr_linenumber" name="L1106" href="#L1106">1106</a>     <strong class="jxr_keyword">private</strong> E peekedElement;
<a class="jxr_linenumber" name="L1107" href="#L1107">1107</a> 
<a class="jxr_linenumber" name="L1108" href="#L1108">1108</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/collect/Iterators.html">PeekingImpl</a>(Iterator&lt;? <strong class="jxr_keyword">extends</strong> E&gt; iterator) {
<a class="jxr_linenumber" name="L1109" href="#L1109">1109</a>       <strong class="jxr_keyword">this</strong>.iterator = checkNotNull(iterator);
<a class="jxr_linenumber" name="L1110" href="#L1110">1110</a>     }
<a class="jxr_linenumber" name="L1111" href="#L1111">1111</a> 
<a class="jxr_linenumber" name="L1112" href="#L1112">1112</a>     @Override
<a class="jxr_linenumber" name="L1113" href="#L1113">1113</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L1114" href="#L1114">1114</a>       <strong class="jxr_keyword">return</strong> hasPeeked || iterator.hasNext();
<a class="jxr_linenumber" name="L1115" href="#L1115">1115</a>     }
<a class="jxr_linenumber" name="L1116" href="#L1116">1116</a> 
<a class="jxr_linenumber" name="L1117" href="#L1117">1117</a>     @Override
<a class="jxr_linenumber" name="L1118" href="#L1118">1118</a>     <strong class="jxr_keyword">public</strong> E next() {
<a class="jxr_linenumber" name="L1119" href="#L1119">1119</a>       <strong class="jxr_keyword">if</strong> (!hasPeeked) {
<a class="jxr_linenumber" name="L1120" href="#L1120">1120</a>         <strong class="jxr_keyword">return</strong> iterator.next();
<a class="jxr_linenumber" name="L1121" href="#L1121">1121</a>       }
<a class="jxr_linenumber" name="L1122" href="#L1122">1122</a>       E result = peekedElement;
<a class="jxr_linenumber" name="L1123" href="#L1123">1123</a>       hasPeeked = false;
<a class="jxr_linenumber" name="L1124" href="#L1124">1124</a>       peekedElement = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L1125" href="#L1125">1125</a>       <strong class="jxr_keyword">return</strong> result;
<a class="jxr_linenumber" name="L1126" href="#L1126">1126</a>     }
<a class="jxr_linenumber" name="L1127" href="#L1127">1127</a> 
<a class="jxr_linenumber" name="L1128" href="#L1128">1128</a>     @Override
<a class="jxr_linenumber" name="L1129" href="#L1129">1129</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> remove() {
<a class="jxr_linenumber" name="L1130" href="#L1130">1130</a>       checkState(!hasPeeked, <span class="jxr_string">"Can't remove after you've peeked at next"</span>);
<a class="jxr_linenumber" name="L1131" href="#L1131">1131</a>       iterator.remove();
<a class="jxr_linenumber" name="L1132" href="#L1132">1132</a>     }
<a class="jxr_linenumber" name="L1133" href="#L1133">1133</a> 
<a class="jxr_linenumber" name="L1134" href="#L1134">1134</a>     @Override
<a class="jxr_linenumber" name="L1135" href="#L1135">1135</a>     <strong class="jxr_keyword">public</strong> E peek() {
<a class="jxr_linenumber" name="L1136" href="#L1136">1136</a>       <strong class="jxr_keyword">if</strong> (!hasPeeked) {
<a class="jxr_linenumber" name="L1137" href="#L1137">1137</a>         peekedElement = iterator.next();
<a class="jxr_linenumber" name="L1138" href="#L1138">1138</a>         hasPeeked = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L1139" href="#L1139">1139</a>       }
<a class="jxr_linenumber" name="L1140" href="#L1140">1140</a>       <strong class="jxr_keyword">return</strong> peekedElement;
<a class="jxr_linenumber" name="L1141" href="#L1141">1141</a>     }
<a class="jxr_linenumber" name="L1142" href="#L1142">1142</a>   }
<a class="jxr_linenumber" name="L1143" href="#L1143">1143</a> 
<a class="jxr_linenumber" name="L1144" href="#L1144">1144</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1145" href="#L1145">1145</a> <em class="jxr_javadoccomment">   * Returns a {@code PeekingIterator} backed by the given iterator.</em>
<a class="jxr_linenumber" name="L1146" href="#L1146">1146</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1147" href="#L1147">1147</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Calls to the {@code peek} method with no intervening calls to {@code</em>
<a class="jxr_linenumber" name="L1148" href="#L1148">1148</a> <em class="jxr_javadoccomment">   * next} do not affect the iteration, and hence return the same object each</em>
<a class="jxr_linenumber" name="L1149" href="#L1149">1149</a> <em class="jxr_javadoccomment">   * time. A subsequent call to {@code next} is guaranteed to return the same</em>
<a class="jxr_linenumber" name="L1150" href="#L1150">1150</a> <em class="jxr_javadoccomment">   * object again. For example: &lt;pre&gt;   {@code</em>
<a class="jxr_linenumber" name="L1151" href="#L1151">1151</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1152" href="#L1152">1152</a> <em class="jxr_javadoccomment">   *   PeekingIterator&lt;String&gt; peekingIterator =</em>
<a class="jxr_linenumber" name="L1153" href="#L1153">1153</a> <em class="jxr_javadoccomment">   *       Iterators.peekingIterator(Iterators.forArray("a", "b"));</em>
<a class="jxr_linenumber" name="L1154" href="#L1154">1154</a> <em class="jxr_javadoccomment">   *   String a1 = peekingIterator.peek(); // returns "a"</em>
<a class="jxr_linenumber" name="L1155" href="#L1155">1155</a> <em class="jxr_javadoccomment">   *   String a2 = peekingIterator.peek(); // also returns "a"</em>
<a class="jxr_linenumber" name="L1156" href="#L1156">1156</a> <em class="jxr_javadoccomment">   *   String a3 = peekingIterator.next(); // also returns "a"}&lt;/pre&gt;</em>
<a class="jxr_linenumber" name="L1157" href="#L1157">1157</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1158" href="#L1158">1158</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Any structural changes to the underlying iteration (aside from those</em>
<a class="jxr_linenumber" name="L1159" href="#L1159">1159</a> <em class="jxr_javadoccomment">   * performed by the iterator's own {@link PeekingIterator#remove()} method)</em>
<a class="jxr_linenumber" name="L1160" href="#L1160">1160</a> <em class="jxr_javadoccomment">   * will leave the iterator in an undefined state.</em>
<a class="jxr_linenumber" name="L1161" href="#L1161">1161</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1162" href="#L1162">1162</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned iterator does not support removal after peeking, as</em>
<a class="jxr_linenumber" name="L1163" href="#L1163">1163</a> <em class="jxr_javadoccomment">   * explained by {@link PeekingIterator#remove()}.</em>
<a class="jxr_linenumber" name="L1164" href="#L1164">1164</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1165" href="#L1165">1165</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Note: If the given iterator is already a {@code PeekingIterator},</em>
<a class="jxr_linenumber" name="L1166" href="#L1166">1166</a> <em class="jxr_javadoccomment">   * it &lt;i&gt;might&lt;/i&gt; be returned to the caller, although this is neither</em>
<a class="jxr_linenumber" name="L1167" href="#L1167">1167</a> <em class="jxr_javadoccomment">   * guaranteed to occur nor required to be consistent.  For example, this</em>
<a class="jxr_linenumber" name="L1168" href="#L1168">1168</a> <em class="jxr_javadoccomment">   * method &lt;i&gt;might&lt;/i&gt; choose to pass through recognized implementations of</em>
<a class="jxr_linenumber" name="L1169" href="#L1169">1169</a> <em class="jxr_javadoccomment">   * {@code PeekingIterator} when the behavior of the implementation is</em>
<a class="jxr_linenumber" name="L1170" href="#L1170">1170</a> <em class="jxr_javadoccomment">   * known to meet the contract guaranteed by this method.</em>
<a class="jxr_linenumber" name="L1171" href="#L1171">1171</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1172" href="#L1172">1172</a> <em class="jxr_javadoccomment">   * &lt;p&gt;There is no {@link Iterable} equivalent to this method, so use this</em>
<a class="jxr_linenumber" name="L1173" href="#L1173">1173</a> <em class="jxr_javadoccomment">   * method to wrap each individual iterator as it is generated.</em>
<a class="jxr_linenumber" name="L1174" href="#L1174">1174</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1175" href="#L1175">1175</a> <em class="jxr_javadoccomment">   * @param iterator the backing iterator. The {@link PeekingIterator} assumes</em>
<a class="jxr_linenumber" name="L1176" href="#L1176">1176</a> <em class="jxr_javadoccomment">   *     ownership of this iterator, so users should cease making direct calls</em>
<a class="jxr_linenumber" name="L1177" href="#L1177">1177</a> <em class="jxr_javadoccomment">   *     to it after calling this method.</em>
<a class="jxr_linenumber" name="L1178" href="#L1178">1178</a> <em class="jxr_javadoccomment">   * @return a peeking iterator backed by that iterator. Apart from the</em>
<a class="jxr_linenumber" name="L1179" href="#L1179">1179</a> <em class="jxr_javadoccomment">   *     additional {@link PeekingIterator#peek()} method, this iterator behaves</em>
<a class="jxr_linenumber" name="L1180" href="#L1180">1180</a> <em class="jxr_javadoccomment">   *     exactly the same as {@code iterator}.</em>
<a class="jxr_linenumber" name="L1181" href="#L1181">1181</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L1182" href="#L1182">1182</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; PeekingIterator&lt;T&gt; peekingIterator(
<a class="jxr_linenumber" name="L1183" href="#L1183">1183</a>       Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; iterator) {
<a class="jxr_linenumber" name="L1184" href="#L1184">1184</a>     <strong class="jxr_keyword">if</strong> (iterator instanceof PeekingImpl) {
<a class="jxr_linenumber" name="L1185" href="#L1185">1185</a>       <em class="jxr_comment">// Safe to cast &lt;? extends T&gt; to &lt;T&gt; because PeekingImpl only uses T</em>
<a class="jxr_linenumber" name="L1186" href="#L1186">1186</a>       <em class="jxr_comment">// covariantly (and cannot be subclassed to add non-covariant uses).</em>
<a class="jxr_linenumber" name="L1187" href="#L1187">1187</a>       @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L1188" href="#L1188">1188</a>       PeekingImpl&lt;T&gt; peeking = (PeekingImpl&lt;T&gt;) iterator;
<a class="jxr_linenumber" name="L1189" href="#L1189">1189</a>       <strong class="jxr_keyword">return</strong> peeking;
<a class="jxr_linenumber" name="L1190" href="#L1190">1190</a>     }
<a class="jxr_linenumber" name="L1191" href="#L1191">1191</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> PeekingImpl&lt;T&gt;(iterator);
<a class="jxr_linenumber" name="L1192" href="#L1192">1192</a>   }
<a class="jxr_linenumber" name="L1193" href="#L1193">1193</a> 
<a class="jxr_linenumber" name="L1194" href="#L1194">1194</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1195" href="#L1195">1195</a> <em class="jxr_javadoccomment">   * Simply returns its argument.</em>
<a class="jxr_linenumber" name="L1196" href="#L1196">1196</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1197" href="#L1197">1197</a> <em class="jxr_javadoccomment">   * @deprecated no need to use this</em>
<a class="jxr_linenumber" name="L1198" href="#L1198">1198</a> <em class="jxr_javadoccomment">   * @since 10.0</em>
<a class="jxr_linenumber" name="L1199" href="#L1199">1199</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L1200" href="#L1200">1200</a>   @Deprecated <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; PeekingIterator&lt;T&gt; peekingIterator(
<a class="jxr_linenumber" name="L1201" href="#L1201">1201</a>       PeekingIterator&lt;T&gt; iterator) {
<a class="jxr_linenumber" name="L1202" href="#L1202">1202</a>     <strong class="jxr_keyword">return</strong> checkNotNull(iterator);
<a class="jxr_linenumber" name="L1203" href="#L1203">1203</a>   }
<a class="jxr_linenumber" name="L1204" href="#L1204">1204</a> 
<a class="jxr_linenumber" name="L1205" href="#L1205">1205</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1206" href="#L1206">1206</a> <em class="jxr_javadoccomment">   * Returns an iterator over the merged contents of all given</em>
<a class="jxr_linenumber" name="L1207" href="#L1207">1207</a> <em class="jxr_javadoccomment">   * {@code iterators}, traversing every element of the input iterators.</em>
<a class="jxr_linenumber" name="L1208" href="#L1208">1208</a> <em class="jxr_javadoccomment">   * Equivalent entries will not be de-duplicated.</em>
<a class="jxr_linenumber" name="L1209" href="#L1209">1209</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1210" href="#L1210">1210</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Callers must ensure that the source {@code iterators} are in</em>
<a class="jxr_linenumber" name="L1211" href="#L1211">1211</a> <em class="jxr_javadoccomment">   * non-descending order as this method does not sort its input.</em>
<a class="jxr_linenumber" name="L1212" href="#L1212">1212</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1213" href="#L1213">1213</a> <em class="jxr_javadoccomment">   * &lt;p&gt;For any equivalent elements across all {@code iterators}, it is</em>
<a class="jxr_linenumber" name="L1214" href="#L1214">1214</a> <em class="jxr_javadoccomment">   * undefined which element is returned first.</em>
<a class="jxr_linenumber" name="L1215" href="#L1215">1215</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1216" href="#L1216">1216</a> <em class="jxr_javadoccomment">   * @since 11.0</em>
<a class="jxr_linenumber" name="L1217" href="#L1217">1217</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L1218" href="#L1218">1218</a>   @Beta
<a class="jxr_linenumber" name="L1219" href="#L1219">1219</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; UnmodifiableIterator&lt;T&gt; mergeSorted(
<a class="jxr_linenumber" name="L1220" href="#L1220">1220</a>       Iterable&lt;? <strong class="jxr_keyword">extends</strong> Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt;&gt; iterators,
<a class="jxr_linenumber" name="L1221" href="#L1221">1221</a>       Comparator&lt;? <strong class="jxr_keyword">super</strong> T&gt; comparator) {
<a class="jxr_linenumber" name="L1222" href="#L1222">1222</a>     checkNotNull(iterators, <span class="jxr_string">"iterators"</span>);
<a class="jxr_linenumber" name="L1223" href="#L1223">1223</a>     checkNotNull(comparator, <span class="jxr_string">"comparator"</span>);
<a class="jxr_linenumber" name="L1224" href="#L1224">1224</a> 
<a class="jxr_linenumber" name="L1225" href="#L1225">1225</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> MergingIterator&lt;T&gt;(iterators, comparator);
<a class="jxr_linenumber" name="L1226" href="#L1226">1226</a>   }
<a class="jxr_linenumber" name="L1227" href="#L1227">1227</a> 
<a class="jxr_linenumber" name="L1228" href="#L1228">1228</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1229" href="#L1229">1229</a> <em class="jxr_javadoccomment">   * An iterator that performs a lazy N-way merge, calculating the next value</em>
<a class="jxr_linenumber" name="L1230" href="#L1230">1230</a> <em class="jxr_javadoccomment">   * each time the iterator is polled. This amortizes the sorting cost over the</em>
<a class="jxr_linenumber" name="L1231" href="#L1231">1231</a> <em class="jxr_javadoccomment">   * iteration and requires less memory than sorting all elements at once.</em>
<a class="jxr_linenumber" name="L1232" href="#L1232">1232</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L1233" href="#L1233">1233</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Retrieving a single element takes approximately O(log(M)) time, where M</em>
<a class="jxr_linenumber" name="L1234" href="#L1234">1234</a> <em class="jxr_javadoccomment">   * is the number of iterators. (Retrieving all elements takes approximately</em>
<a class="jxr_linenumber" name="L1235" href="#L1235">1235</a> <em class="jxr_javadoccomment">   * O(N*log(M)) time, where N is the total number of elements.)</em>
<a class="jxr_linenumber" name="L1236" href="#L1236">1236</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L1237" href="#L1237">1237</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> MergingIterator&lt;T&gt; <strong class="jxr_keyword">extends</strong> UnmodifiableIterator&lt;T&gt; {
<a class="jxr_linenumber" name="L1238" href="#L1238">1238</a>     <strong class="jxr_keyword">final</strong> Queue&lt;PeekingIterator&lt;T&gt;&gt; queue;
<a class="jxr_linenumber" name="L1239" href="#L1239">1239</a> 
<a class="jxr_linenumber" name="L1240" href="#L1240">1240</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/collect/Iterators.html">MergingIterator</a>(Iterable&lt;? <strong class="jxr_keyword">extends</strong> Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt;&gt; iterators,
<a class="jxr_linenumber" name="L1241" href="#L1241">1241</a>         <strong class="jxr_keyword">final</strong> Comparator&lt;? <strong class="jxr_keyword">super</strong> T&gt; itemComparator) {
<a class="jxr_linenumber" name="L1242" href="#L1242">1242</a>       <em class="jxr_comment">// A comparator that's used by the heap, allowing the heap</em>
<a class="jxr_linenumber" name="L1243" href="#L1243">1243</a>       <em class="jxr_comment">// to be sorted based on the top of each iterator.</em>
<a class="jxr_linenumber" name="L1244" href="#L1244">1244</a>       Comparator&lt;PeekingIterator&lt;T&gt;&gt; heapComparator =
<a class="jxr_linenumber" name="L1245" href="#L1245">1245</a>           <strong class="jxr_keyword">new</strong> Comparator&lt;PeekingIterator&lt;T&gt;&gt;() {
<a class="jxr_linenumber" name="L1246" href="#L1246">1246</a>             @Override
<a class="jxr_linenumber" name="L1247" href="#L1247">1247</a>             <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> compare(PeekingIterator&lt;T&gt; o1, PeekingIterator&lt;T&gt; o2) {
<a class="jxr_linenumber" name="L1248" href="#L1248">1248</a>               <strong class="jxr_keyword">return</strong> itemComparator.compare(o1.peek(), o2.peek());
<a class="jxr_linenumber" name="L1249" href="#L1249">1249</a>             }
<a class="jxr_linenumber" name="L1250" href="#L1250">1250</a>           };
<a class="jxr_linenumber" name="L1251" href="#L1251">1251</a> 
<a class="jxr_linenumber" name="L1252" href="#L1252">1252</a>       queue = <strong class="jxr_keyword">new</strong> PriorityQueue&lt;PeekingIterator&lt;T&gt;&gt;(2, heapComparator);
<a class="jxr_linenumber" name="L1253" href="#L1253">1253</a> 
<a class="jxr_linenumber" name="L1254" href="#L1254">1254</a>       <strong class="jxr_keyword">for</strong> (Iterator&lt;? <strong class="jxr_keyword">extends</strong> T&gt; iterator : iterators) {
<a class="jxr_linenumber" name="L1255" href="#L1255">1255</a>         <strong class="jxr_keyword">if</strong> (iterator.hasNext()) {
<a class="jxr_linenumber" name="L1256" href="#L1256">1256</a>           queue.add(Iterators.peekingIterator(iterator));
<a class="jxr_linenumber" name="L1257" href="#L1257">1257</a>         }
<a class="jxr_linenumber" name="L1258" href="#L1258">1258</a>       }
<a class="jxr_linenumber" name="L1259" href="#L1259">1259</a>     }
<a class="jxr_linenumber" name="L1260" href="#L1260">1260</a> 
<a class="jxr_linenumber" name="L1261" href="#L1261">1261</a>     @Override
<a class="jxr_linenumber" name="L1262" href="#L1262">1262</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L1263" href="#L1263">1263</a>       <strong class="jxr_keyword">return</strong> !queue.isEmpty();
<a class="jxr_linenumber" name="L1264" href="#L1264">1264</a>     }
<a class="jxr_linenumber" name="L1265" href="#L1265">1265</a> 
<a class="jxr_linenumber" name="L1266" href="#L1266">1266</a>     @Override
<a class="jxr_linenumber" name="L1267" href="#L1267">1267</a>     <strong class="jxr_keyword">public</strong> T next() {
<a class="jxr_linenumber" name="L1268" href="#L1268">1268</a>       PeekingIterator&lt;T&gt; nextIter = queue.remove();
<a class="jxr_linenumber" name="L1269" href="#L1269">1269</a>       T next = nextIter.next();
<a class="jxr_linenumber" name="L1270" href="#L1270">1270</a>       <strong class="jxr_keyword">if</strong> (nextIter.hasNext()) {
<a class="jxr_linenumber" name="L1271" href="#L1271">1271</a>         queue.add(nextIter);
<a class="jxr_linenumber" name="L1272" href="#L1272">1272</a>       }
<a class="jxr_linenumber" name="L1273" href="#L1273">1273</a>       <strong class="jxr_keyword">return</strong> next;
<a class="jxr_linenumber" name="L1274" href="#L1274">1274</a>     }
<a class="jxr_linenumber" name="L1275" href="#L1275">1275</a>   }
<a class="jxr_linenumber" name="L1276" href="#L1276">1276</a> 
<a class="jxr_linenumber" name="L1277" href="#L1277">1277</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1278" href="#L1278">1278</a> <em class="jxr_javadoccomment">   * Used to avoid <a href="http://bugs.sun.com/view_bug.do?bug_id=655855" target="alexandria_uri">http://bugs.sun.com/view_bug.do?bug_id=655855</a>7</em>
<a class="jxr_linenumber" name="L1279" href="#L1279">1279</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L1280" href="#L1280">1280</a>   <strong class="jxr_keyword">static</strong> &lt;T&gt; ListIterator&lt;T&gt; <strong class="jxr_keyword">cast</strong>(Iterator&lt;T&gt; iterator) {
<a class="jxr_linenumber" name="L1281" href="#L1281">1281</a>     <strong class="jxr_keyword">return</strong> (ListIterator&lt;T&gt;) iterator;
<a class="jxr_linenumber" name="L1282" href="#L1282">1282</a>   }
<a class="jxr_linenumber" name="L1283" href="#L1283">1283</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
