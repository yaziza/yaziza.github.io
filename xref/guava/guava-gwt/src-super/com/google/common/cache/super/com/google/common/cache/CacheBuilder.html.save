<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>CacheBuilder xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../../../../../apidocs/com/google/common/cache/CacheBuilder.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2009 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.cache;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkArgument;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkNotNull;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkState;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Ascii;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Equivalence;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.MoreObjects;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Supplier;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Suppliers;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Ticker;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> com.google.common.cache.AbstractCache.SimpleStatsCounter;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> com.google.common.cache.AbstractCache.StatsCounter;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> com.google.common.cache.LocalCache.Strength;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.TimeUnit;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> java.util.logging.Level;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> java.util.logging.Logger;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> javax.annotation.CheckReturnValue;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;A builder of {@link LoadingCache} and {@link Cache} instances having any combination of the</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * following features:</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;automatic loading of entries into the cache</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;least-recently-used eviction when a maximum size is exceeded</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;time-based expiration of entries, measured since last access or last write</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;keys automatically wrapped in {@linkplain WeakReference weak} references</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;values automatically wrapped in {@linkplain WeakReference weak} or</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> *     {@linkplain SoftReference soft} references</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;notification of evicted (or otherwise removed) entries</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;accumulation of cache access statistics</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment"> * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;These features are all optional; caches can be created using all or none of them. By default</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment"> * cache instances created by {@code CacheBuilder} will not perform any type of eviction.</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;Usage example: &lt;pre&gt;   {@code</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment"> *   LoadingCache&lt;Key, Graph&gt; graphs = CacheBuilder.newBuilder()</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment"> *       .maximumSize(10000)</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment"> *       .expireAfterWrite(10, TimeUnit.MINUTES)</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment"> *       .removalListener(MY_LISTENER)</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment"> *       .build(</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment"> *           new CacheLoader&lt;Key, Graph&gt;() {</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment"> *             public Graph load(Key key) throws AnyException {</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment"> *               return createExpensiveGraph(key);</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment"> *             }</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment"> *           });}&lt;/pre&gt;</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;Or equivalently, &lt;pre&gt;   {@code</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment"> *   // In real life this would come from a command-line flag or config file</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment"> *   String spec = "maximumSize=10000,expireAfterWrite=10m";</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment"> *   LoadingCache&lt;Key, Graph&gt; graphs = CacheBuilder.from(spec)</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment"> *       .removalListener(MY_LISTENER)</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment"> *       .build(</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment"> *           new CacheLoader&lt;Key, Graph&gt;() {</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment"> *             public Graph load(Key key) throws AnyException {</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment"> *               return createExpensiveGraph(key);</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment"> *             }</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment"> *           });}&lt;/pre&gt;</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;The returned cache is implemented as a hash table with similar performance characteristics to</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment"> * {@link ConcurrentHashMap}. It implements all optional operations of the {@link LoadingCache} and</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment"> * {@link Cache} interfaces. The {@code asMap} view (and its collection views) have &lt;i&gt;weakly</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment"> * consistent iterators&lt;/i&gt;. This means that they are safe for concurrent use, but if other threads</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <em class="jxr_javadoccomment"> * modify the cache after the iterator is created, it is undefined which of these changes, if any,</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment"> * are reflected in that iterator. These iterators never throw {@link</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <em class="jxr_javadoccomment"> * ConcurrentModificationException}.</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; by default, the returned cache uses equality comparisons (the</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment"> * {@link Object#equals equals} method) to determine equality for keys or values. However, if</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment"> * {@link #weakKeys} was specified, the cache uses identity ({@code ==})</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment"> * comparisons instead for keys. Likewise, if {@link #weakValues} or {@link #softValues} was</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <em class="jxr_javadoccomment"> * specified, the cache uses identity comparisons for values.</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;Entries are automatically evicted from the cache when any of</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment"> * {@linkplain #maximumSize(long) maximumSize}, {@linkplain #maximumWeight(long) maximumWeight},</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <em class="jxr_javadoccomment"> * {@linkplain #expireAfterWrite expireAfterWrite},</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment"> * {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys weakKeys},</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a> <em class="jxr_javadoccomment"> * {@linkplain #weakValues weakValues}, or {@linkplain #softValues softValues} are requested.</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a> <em class="jxr_javadoccomment"> * &lt;p&gt;If {@linkplain #maximumSize(long) maximumSize} or</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a> <em class="jxr_javadoccomment"> * {@linkplain #maximumWeight(long) maximumWeight} is requested entries may be evicted on each cache</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment"> * modification.</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <em class="jxr_javadoccomment"> * &lt;p&gt;If {@linkplain #expireAfterWrite expireAfterWrite} or</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <em class="jxr_javadoccomment"> * {@linkplain #expireAfterAccess expireAfterAccess} is requested entries may be evicted on each</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <em class="jxr_javadoccomment"> * cache modification, on occasional cache accesses, or on calls to {@link Cache#cleanUp}. Expired</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment"> * entries may be counted by {@link Cache#size}, but will never be visible to read or write</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment"> * operations.</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment"> * &lt;p&gt;If {@linkplain #weakKeys weakKeys}, {@linkplain #weakValues weakValues}, or</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <em class="jxr_javadoccomment"> * {@linkplain #softValues softValues} are requested, it is possible for a key or value present in</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <em class="jxr_javadoccomment"> * the cache to be reclaimed by the garbage collector. Entries with reclaimed keys or values may be</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <em class="jxr_javadoccomment"> * removed from the cache on each cache modification, on occasional cache accesses, or on calls to</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <em class="jxr_javadoccomment"> * {@link Cache#cleanUp}; such entries may be counted in {@link Cache#size}, but will never be</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment"> * visible to read or write operations.</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment"> * &lt;p&gt;Certain cache configurations will result in the accrual of periodic maintenance tasks which</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment"> * will be performed during write operations, or during occasional read operations in the absence of</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment"> * writes. The {@link Cache#cleanUp} method of the returned cache will also perform maintenance, but</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment"> * calling it should not be necessary with a high throughput cache. Only caches built with</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment"> * {@linkplain #removalListener removalListener}, {@linkplain #expireAfterWrite expireAfterWrite},</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment"> * {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys weakKeys},</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment"> * {@linkplain #weakValues weakValues}, or {@linkplain #softValues softValues} perform periodic</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment"> * maintenance.</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a> <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment"> * &lt;p&gt;The caches produced by {@code CacheBuilder} are serializable, and the deserialized caches</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment"> * retain all the configuration properties of the original cache. Note that the serialized form does</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a> <em class="jxr_javadoccomment"> * &lt;i&gt;not&lt;/i&gt; include cache contents, but only configuration.</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a> <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a> <em class="jxr_javadoccomment"> * &lt;p&gt;See the Guava User Guide article on &lt;a href=</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a> <em class="jxr_javadoccomment"> * "<a href="http://code.google.com/p/guava-libraries/wiki/CachesExplained" target="alexandria_uri">http://code.google.com/p/guava-libraries/wiki/CachesExplained</a>"&gt;caching&lt;/a&gt; for a higher-level</em>
<a class="jxr_linenumber" name="L137" href="#L137">137</a> <em class="jxr_javadoccomment"> * explanation.</em>
<a class="jxr_linenumber" name="L138" href="#L138">138</a> <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L139" href="#L139">139</a> <em class="jxr_javadoccomment"> * @param &lt;K&gt; the base key type for all caches created by this builder</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a> <em class="jxr_javadoccomment"> * @param &lt;V&gt; the base value type for all caches created by this builder</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a> <em class="jxr_javadoccomment"> * @author Charles Fry</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a> <em class="jxr_javadoccomment"> * @author Kevin Bourrillion</em>
<a class="jxr_linenumber" name="L143" href="#L143">143</a> <em class="jxr_javadoccomment"> * @since 10.0</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a> @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> CacheBuilder&lt;K, V&gt; {
<a class="jxr_linenumber" name="L147" href="#L147">147</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> DEFAULT_INITIAL_CAPACITY = 16;
<a class="jxr_linenumber" name="L148" href="#L148">148</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> DEFAULT_CONCURRENCY_LEVEL = 4;
<a class="jxr_linenumber" name="L149" href="#L149">149</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> DEFAULT_EXPIRATION_NANOS = 0;
<a class="jxr_linenumber" name="L150" href="#L150">150</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> DEFAULT_REFRESH_NANOS = 0;
<a class="jxr_linenumber" name="L151" href="#L151">151</a> 
<a class="jxr_linenumber" name="L152" href="#L152">152</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> Supplier&lt;? <strong class="jxr_keyword">extends</strong> StatsCounter&gt; NULL_STATS_COUNTER = Suppliers.ofInstance(
<a class="jxr_linenumber" name="L153" href="#L153">153</a>       <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/cache/AbstractCache.html">StatsCounter</a>() {
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         @Override
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> recordHits(<strong class="jxr_keyword">int</strong> count) {}
<a class="jxr_linenumber" name="L156" href="#L156">156</a> 
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         @Override
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> recordMisses(<strong class="jxr_keyword">int</strong> count) {}
<a class="jxr_linenumber" name="L159" href="#L159">159</a> 
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         @Override
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> recordLoadSuccess(<strong class="jxr_keyword">long</strong> loadTime) {}
<a class="jxr_linenumber" name="L162" href="#L162">162</a> 
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         @Override
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> recordLoadException(<strong class="jxr_keyword">long</strong> loadTime) {}
<a class="jxr_linenumber" name="L165" href="#L165">165</a> 
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         @Override
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> recordEviction() {}
<a class="jxr_linenumber" name="L168" href="#L168">168</a> 
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         @Override
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/cache/CacheStats.html">CacheStats</a> snapshot() {
<a class="jxr_linenumber" name="L171" href="#L171">171</a>           <strong class="jxr_keyword">return</strong> EMPTY_STATS;
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         }
<a class="jxr_linenumber" name="L173" href="#L173">173</a>       });
<a class="jxr_linenumber" name="L174" href="#L174">174</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/cache/CacheStats.html">CacheStats</a> EMPTY_STATS = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/cache/CacheStats.html">CacheStats</a>(0, 0, 0, 0, 0, 0);
<a class="jxr_linenumber" name="L175" href="#L175">175</a> 
<a class="jxr_linenumber" name="L176" href="#L176">176</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> Supplier&lt;StatsCounter&gt; CACHE_STATS_COUNTER =
<a class="jxr_linenumber" name="L177" href="#L177">177</a>       <strong class="jxr_keyword">new</strong> Supplier&lt;StatsCounter&gt;() {
<a class="jxr_linenumber" name="L178" href="#L178">178</a>     @Override
<a class="jxr_linenumber" name="L179" href="#L179">179</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/cache/AbstractCache.html">StatsCounter</a> get() {
<a class="jxr_linenumber" name="L180" href="#L180">180</a>       <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/cache/AbstractCache.html">SimpleStatsCounter</a>();
<a class="jxr_linenumber" name="L181" href="#L181">181</a>     }
<a class="jxr_linenumber" name="L182" href="#L182">182</a>   };
<a class="jxr_linenumber" name="L183" href="#L183">183</a> 
<a class="jxr_linenumber" name="L184" href="#L184">184</a>   enum <a href="../../../../com/google/common/cache/CacheBuilder.html">NullListener</a> <strong class="jxr_keyword">implements</strong> RemovalListener&lt;Object, Object&gt; {
<a class="jxr_linenumber" name="L185" href="#L185">185</a>     INSTANCE;
<a class="jxr_linenumber" name="L186" href="#L186">186</a> 
<a class="jxr_linenumber" name="L187" href="#L187">187</a>     @Override
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> onRemoval(RemovalNotification&lt;Object, Object&gt; notification) {}
<a class="jxr_linenumber" name="L189" href="#L189">189</a>   }
<a class="jxr_linenumber" name="L190" href="#L190">190</a> 
<a class="jxr_linenumber" name="L191" href="#L191">191</a>   enum <a href="../../../../com/google/common/cache/CacheBuilder.html">OneWeigher</a> <strong class="jxr_keyword">implements</strong> Weigher&lt;Object, Object&gt; {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>     INSTANCE;
<a class="jxr_linenumber" name="L193" href="#L193">193</a> 
<a class="jxr_linenumber" name="L194" href="#L194">194</a>     @Override
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> weigh(Object key, Object value) {
<a class="jxr_linenumber" name="L196" href="#L196">196</a>       <strong class="jxr_keyword">return</strong> 1;
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     }
<a class="jxr_linenumber" name="L198" href="#L198">198</a>   }
<a class="jxr_linenumber" name="L199" href="#L199">199</a> 
<a class="jxr_linenumber" name="L200" href="#L200">200</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/base/Ticker.html">Ticker</a> NULL_TICKER = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/base/Ticker.html">Ticker</a>() {
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     @Override
<a class="jxr_linenumber" name="L202" href="#L202">202</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">long</strong> read() {
<a class="jxr_linenumber" name="L203" href="#L203">203</a>       <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L204" href="#L204">204</a>     }
<a class="jxr_linenumber" name="L205" href="#L205">205</a>   };
<a class="jxr_linenumber" name="L206" href="#L206">206</a> 
<a class="jxr_linenumber" name="L207" href="#L207">207</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> Logger logger = Logger.getLogger(CacheBuilder.<strong class="jxr_keyword">class</strong>.getName());
<a class="jxr_linenumber" name="L208" href="#L208">208</a> 
<a class="jxr_linenumber" name="L209" href="#L209">209</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> UNSET_INT = -1;
<a class="jxr_linenumber" name="L210" href="#L210">210</a> 
<a class="jxr_linenumber" name="L211" href="#L211">211</a>   <strong class="jxr_keyword">boolean</strong> strictParsing = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L212" href="#L212">212</a> 
<a class="jxr_linenumber" name="L213" href="#L213">213</a>   <strong class="jxr_keyword">int</strong> initialCapacity = UNSET_INT;
<a class="jxr_linenumber" name="L214" href="#L214">214</a>   <strong class="jxr_keyword">int</strong> concurrencyLevel = UNSET_INT;
<a class="jxr_linenumber" name="L215" href="#L215">215</a>   <strong class="jxr_keyword">long</strong> maximumSize = UNSET_INT;
<a class="jxr_linenumber" name="L216" href="#L216">216</a>   <strong class="jxr_keyword">long</strong> maximumWeight = UNSET_INT;
<a class="jxr_linenumber" name="L217" href="#L217">217</a>   Weigher&lt;? <strong class="jxr_keyword">super</strong> K, ? <strong class="jxr_keyword">super</strong> V&gt; weigher;
<a class="jxr_linenumber" name="L218" href="#L218">218</a> 
<a class="jxr_linenumber" name="L219" href="#L219">219</a>   <a href="../../../../com/google/common/cache/LocalCache.html">Strength</a> keyStrength;
<a class="jxr_linenumber" name="L220" href="#L220">220</a>   <a href="../../../../com/google/common/cache/LocalCache.html">Strength</a> valueStrength;
<a class="jxr_linenumber" name="L221" href="#L221">221</a> 
<a class="jxr_linenumber" name="L222" href="#L222">222</a>   <strong class="jxr_keyword">long</strong> expireAfterWriteNanos = UNSET_INT;
<a class="jxr_linenumber" name="L223" href="#L223">223</a>   <strong class="jxr_keyword">long</strong> expireAfterAccessNanos = UNSET_INT;
<a class="jxr_linenumber" name="L224" href="#L224">224</a>   <strong class="jxr_keyword">long</strong> refreshNanos = UNSET_INT;
<a class="jxr_linenumber" name="L225" href="#L225">225</a> 
<a class="jxr_linenumber" name="L226" href="#L226">226</a>   Equivalence&lt;Object&gt; keyEquivalence;
<a class="jxr_linenumber" name="L227" href="#L227">227</a>   Equivalence&lt;Object&gt; valueEquivalence;
<a class="jxr_linenumber" name="L228" href="#L228">228</a> 
<a class="jxr_linenumber" name="L229" href="#L229">229</a>   RemovalListener&lt;? <strong class="jxr_keyword">super</strong> K, ? <strong class="jxr_keyword">super</strong> V&gt; removalListener;
<a class="jxr_linenumber" name="L230" href="#L230">230</a>   <a href="../../../../com/google/common/base/Ticker.html">Ticker</a> ticker;
<a class="jxr_linenumber" name="L231" href="#L231">231</a> 
<a class="jxr_linenumber" name="L232" href="#L232">232</a>   Supplier&lt;? <strong class="jxr_keyword">extends</strong> StatsCounter&gt; statsCounterSupplier = NULL_STATS_COUNTER;
<a class="jxr_linenumber" name="L233" href="#L233">233</a> 
<a class="jxr_linenumber" name="L234" href="#L234">234</a>   <em class="jxr_comment">// TODO(fry): make constructor private and update tests to use newBuilder</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a>   <a href="../../../../com/google/common/cache/CacheBuilder.html">CacheBuilder</a>() {}
<a class="jxr_linenumber" name="L236" href="#L236">236</a> 
<a class="jxr_linenumber" name="L237" href="#L237">237</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a> <em class="jxr_javadoccomment">   * Constructs a new {@code CacheBuilder} instance with default settings, including strong keys,</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a> <em class="jxr_javadoccomment">   * strong values, and no automatic eviction of any kind.</em>
<a class="jxr_linenumber" name="L240" href="#L240">240</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> CacheBuilder&lt;Object, Object&gt; newBuilder() {
<a class="jxr_linenumber" name="L242" href="#L242">242</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> CacheBuilder&lt;Object, Object&gt;();
<a class="jxr_linenumber" name="L243" href="#L243">243</a>   }
<a class="jxr_linenumber" name="L244" href="#L244">244</a> 
<a class="jxr_linenumber" name="L245" href="#L245">245</a>   Equivalence&lt;Object&gt; getKeyEquivalence() {
<a class="jxr_linenumber" name="L246" href="#L246">246</a>     <strong class="jxr_keyword">return</strong> MoreObjects.firstNonNull(keyEquivalence, getKeyStrength().defaultEquivalence());
<a class="jxr_linenumber" name="L247" href="#L247">247</a>   }
<a class="jxr_linenumber" name="L248" href="#L248">248</a> 
<a class="jxr_linenumber" name="L249" href="#L249">249</a>   Equivalence&lt;Object&gt; getValueEquivalence() {
<a class="jxr_linenumber" name="L250" href="#L250">250</a>     <strong class="jxr_keyword">return</strong> MoreObjects.firstNonNull(valueEquivalence, getValueStrength().defaultEquivalence());
<a class="jxr_linenumber" name="L251" href="#L251">251</a>   }
<a class="jxr_linenumber" name="L252" href="#L252">252</a> 
<a class="jxr_linenumber" name="L253" href="#L253">253</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L254" href="#L254">254</a> <em class="jxr_javadoccomment">   * Sets the minimum total size for the internal hash tables. For example, if the initial capacity</em>
<a class="jxr_linenumber" name="L255" href="#L255">255</a> <em class="jxr_javadoccomment">   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each</em>
<a class="jxr_linenumber" name="L256" href="#L256">256</a> <em class="jxr_javadoccomment">   * having a hash table of size eight. Providing a large enough estimate at construction time</em>
<a class="jxr_linenumber" name="L257" href="#L257">257</a> <em class="jxr_javadoccomment">   * avoids the need for expensive resizing operations later, but setting this value unnecessarily</em>
<a class="jxr_linenumber" name="L258" href="#L258">258</a> <em class="jxr_javadoccomment">   * high wastes memory.</em>
<a class="jxr_linenumber" name="L259" href="#L259">259</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L260" href="#L260">260</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code initialCapacity} is negative</em>
<a class="jxr_linenumber" name="L261" href="#L261">261</a> <em class="jxr_javadoccomment">   * @throws IllegalStateException if an initial capacity was already set</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L263" href="#L263">263</a>   <strong class="jxr_keyword">public</strong> CacheBuilder&lt;K, V&gt; initialCapacity(<strong class="jxr_keyword">int</strong> initialCapacity) {
<a class="jxr_linenumber" name="L264" href="#L264">264</a>     checkState(<strong class="jxr_keyword">this</strong>.initialCapacity == UNSET_INT, <span class="jxr_string">"initial capacity was already set to %s"</span>,
<a class="jxr_linenumber" name="L265" href="#L265">265</a>         <strong class="jxr_keyword">this</strong>.initialCapacity);
<a class="jxr_linenumber" name="L266" href="#L266">266</a>     checkArgument(initialCapacity &gt;= 0);
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     <strong class="jxr_keyword">this</strong>.initialCapacity = initialCapacity;
<a class="jxr_linenumber" name="L268" href="#L268">268</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L269" href="#L269">269</a>   }
<a class="jxr_linenumber" name="L270" href="#L270">270</a> 
<a class="jxr_linenumber" name="L271" href="#L271">271</a>   <strong class="jxr_keyword">int</strong> getInitialCapacity() {
<a class="jxr_linenumber" name="L272" href="#L272">272</a>     <strong class="jxr_keyword">return</strong> (initialCapacity == UNSET_INT) ? DEFAULT_INITIAL_CAPACITY : initialCapacity;
<a class="jxr_linenumber" name="L273" href="#L273">273</a>   }
<a class="jxr_linenumber" name="L274" href="#L274">274</a> 
<a class="jxr_linenumber" name="L275" href="#L275">275</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L276" href="#L276">276</a> <em class="jxr_javadoccomment">   * Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The</em>
<a class="jxr_linenumber" name="L277" href="#L277">277</a> <em class="jxr_javadoccomment">   * table is internally partitioned to try to permit the indicated number of concurrent updates</em>
<a class="jxr_linenumber" name="L278" href="#L278">278</a> <em class="jxr_javadoccomment">   * without contention. Because assignment of entries to these partitions is not necessarily</em>
<a class="jxr_linenumber" name="L279" href="#L279">279</a> <em class="jxr_javadoccomment">   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to</em>
<a class="jxr_linenumber" name="L280" href="#L280">280</a> <em class="jxr_javadoccomment">   * accommodate as many threads as will ever concurrently modify the table. Using a significantly</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a> <em class="jxr_javadoccomment">   * higher value than you need can waste space and time, and a significantly lower value can lead</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a> <em class="jxr_javadoccomment">   * to thread contention. But overestimates and underestimates within an order of magnitude do not</em>
<a class="jxr_linenumber" name="L283" href="#L283">283</a> <em class="jxr_javadoccomment">   * usually have much noticeable impact. A value of one permits only one thread to modify the cache</em>
<a class="jxr_linenumber" name="L284" href="#L284">284</a> <em class="jxr_javadoccomment">   * at a time, but since read operations and cache loading computations can proceed concurrently,</em>
<a class="jxr_linenumber" name="L285" href="#L285">285</a> <em class="jxr_javadoccomment">   * this still yields higher concurrency than full synchronization.</em>
<a class="jxr_linenumber" name="L286" href="#L286">286</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L287" href="#L287">287</a> <em class="jxr_javadoccomment">   * &lt;p&gt; Defaults to 4. &lt;b&gt;Note:&lt;/b&gt;The default may change in the future. If you care about this</em>
<a class="jxr_linenumber" name="L288" href="#L288">288</a> <em class="jxr_javadoccomment">   * value, you should always choose it explicitly.</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The current implementation uses the concurrency level to create a fixed number of hashtable</em>
<a class="jxr_linenumber" name="L291" href="#L291">291</a> <em class="jxr_javadoccomment">   * segments, each governed by its own write lock. The segment lock is taken once for each explicit</em>
<a class="jxr_linenumber" name="L292" href="#L292">292</a> <em class="jxr_javadoccomment">   * write, and twice for each cache loading computation (once prior to loading the new value,</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a> <em class="jxr_javadoccomment">   * and once after loading completes). Much internal cache management is performed at the segment</em>
<a class="jxr_linenumber" name="L294" href="#L294">294</a> <em class="jxr_javadoccomment">   * granularity. For example, access queues and write queues are kept per segment when they are</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a> <em class="jxr_javadoccomment">   * required by the selected eviction algorithm. As such, when writing unit tests it is not</em>
<a class="jxr_linenumber" name="L296" href="#L296">296</a> <em class="jxr_javadoccomment">   * uncommon to specify {@code concurrencyLevel(1)} in order to achieve more deterministic eviction</em>
<a class="jxr_linenumber" name="L297" href="#L297">297</a> <em class="jxr_javadoccomment">   * behavior.</em>
<a class="jxr_linenumber" name="L298" href="#L298">298</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L299" href="#L299">299</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Note that future implementations may abandon segment locking in favor of more advanced</em>
<a class="jxr_linenumber" name="L300" href="#L300">300</a> <em class="jxr_javadoccomment">   * concurrency controls.</em>
<a class="jxr_linenumber" name="L301" href="#L301">301</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L302" href="#L302">302</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive</em>
<a class="jxr_linenumber" name="L303" href="#L303">303</a> <em class="jxr_javadoccomment">   * @throws IllegalStateException if a concurrency level was already set</em>
<a class="jxr_linenumber" name="L304" href="#L304">304</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L305" href="#L305">305</a>   <strong class="jxr_keyword">public</strong> CacheBuilder&lt;K, V&gt; concurrencyLevel(<strong class="jxr_keyword">int</strong> concurrencyLevel) {
<a class="jxr_linenumber" name="L306" href="#L306">306</a>     checkState(<strong class="jxr_keyword">this</strong>.concurrencyLevel == UNSET_INT, <span class="jxr_string">"concurrency level was already set to %s"</span>,
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         <strong class="jxr_keyword">this</strong>.concurrencyLevel);
<a class="jxr_linenumber" name="L308" href="#L308">308</a>     checkArgument(concurrencyLevel &gt; 0);
<a class="jxr_linenumber" name="L309" href="#L309">309</a>     <strong class="jxr_keyword">this</strong>.concurrencyLevel = concurrencyLevel;
<a class="jxr_linenumber" name="L310" href="#L310">310</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L311" href="#L311">311</a>   }
<a class="jxr_linenumber" name="L312" href="#L312">312</a> 
<a class="jxr_linenumber" name="L313" href="#L313">313</a>   <strong class="jxr_keyword">int</strong> getConcurrencyLevel() {
<a class="jxr_linenumber" name="L314" href="#L314">314</a>     <strong class="jxr_keyword">return</strong> (concurrencyLevel == UNSET_INT) ? DEFAULT_CONCURRENCY_LEVEL : concurrencyLevel;
<a class="jxr_linenumber" name="L315" href="#L315">315</a>   }
<a class="jxr_linenumber" name="L316" href="#L316">316</a> 
<a class="jxr_linenumber" name="L317" href="#L317">317</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L318" href="#L318">318</a> <em class="jxr_javadoccomment">   * Specifies the maximum number of entries the cache may contain. Note that the cache &lt;b&gt;may evict</em>
<a class="jxr_linenumber" name="L319" href="#L319">319</a> <em class="jxr_javadoccomment">   * an entry before this limit is exceeded&lt;/b&gt;. As the cache size grows close to the maximum, the</em>
<a class="jxr_linenumber" name="L320" href="#L320">320</a> <em class="jxr_javadoccomment">   * cache evicts entries that are less likely to be used again. For example, the cache may evict an</em>
<a class="jxr_linenumber" name="L321" href="#L321">321</a> <em class="jxr_javadoccomment">   * entry because it hasn't been used recently or very often.</em>
<a class="jxr_linenumber" name="L322" href="#L322">322</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L323" href="#L323">323</a> <em class="jxr_javadoccomment">   * &lt;p&gt;When {@code size} is zero, elements will be evicted immediately after being loaded into the</em>
<a class="jxr_linenumber" name="L324" href="#L324">324</a> <em class="jxr_javadoccomment">   * cache. This can be useful in testing, or to disable caching temporarily without a code change.</em>
<a class="jxr_linenumber" name="L325" href="#L325">325</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L326" href="#L326">326</a> <em class="jxr_javadoccomment">   * &lt;p&gt;This feature cannot be used in conjunction with {@link #maximumWeight}.</em>
<a class="jxr_linenumber" name="L327" href="#L327">327</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L328" href="#L328">328</a> <em class="jxr_javadoccomment">   * @param size the maximum size of the cache</em>
<a class="jxr_linenumber" name="L329" href="#L329">329</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code size} is negative</em>
<a class="jxr_linenumber" name="L330" href="#L330">330</a> <em class="jxr_javadoccomment">   * @throws IllegalStateException if a maximum size or weight was already set</em>
<a class="jxr_linenumber" name="L331" href="#L331">331</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L332" href="#L332">332</a>   <strong class="jxr_keyword">public</strong> CacheBuilder&lt;K, V&gt; maximumSize(<strong class="jxr_keyword">long</strong> size) {
<a class="jxr_linenumber" name="L333" href="#L333">333</a>     checkState(<strong class="jxr_keyword">this</strong>.maximumSize == UNSET_INT, <span class="jxr_string">"maximum size was already set to %s"</span>,
<a class="jxr_linenumber" name="L334" href="#L334">334</a>         <strong class="jxr_keyword">this</strong>.maximumSize);
<a class="jxr_linenumber" name="L335" href="#L335">335</a>     checkState(<strong class="jxr_keyword">this</strong>.maximumWeight == UNSET_INT, <span class="jxr_string">"maximum weight was already set to %s"</span>,
<a class="jxr_linenumber" name="L336" href="#L336">336</a>         <strong class="jxr_keyword">this</strong>.maximumWeight);
<a class="jxr_linenumber" name="L337" href="#L337">337</a>     checkState(<strong class="jxr_keyword">this</strong>.weigher == <strong class="jxr_keyword">null</strong>, <span class="jxr_string">"maximum size can not be combined with weigher"</span>);
<a class="jxr_linenumber" name="L338" href="#L338">338</a>     checkArgument(size &gt;= 0, <span class="jxr_string">"maximum size must not be negative"</span>);
<a class="jxr_linenumber" name="L339" href="#L339">339</a>     <strong class="jxr_keyword">this</strong>.maximumSize = size;
<a class="jxr_linenumber" name="L340" href="#L340">340</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L341" href="#L341">341</a>   }
<a class="jxr_linenumber" name="L342" href="#L342">342</a> 
<a class="jxr_linenumber" name="L343" href="#L343">343</a>   <strong class="jxr_keyword">long</strong> getMaximumWeight() {
<a class="jxr_linenumber" name="L344" href="#L344">344</a>     <strong class="jxr_keyword">if</strong> (expireAfterWriteNanos == 0 || expireAfterAccessNanos == 0) {
<a class="jxr_linenumber" name="L345" href="#L345">345</a>       <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L346" href="#L346">346</a>     }
<a class="jxr_linenumber" name="L347" href="#L347">347</a>     <strong class="jxr_keyword">return</strong> (weigher == <strong class="jxr_keyword">null</strong>) ? maximumSize : maximumWeight;
<a class="jxr_linenumber" name="L348" href="#L348">348</a>   }
<a class="jxr_linenumber" name="L349" href="#L349">349</a> 
<a class="jxr_linenumber" name="L350" href="#L350">350</a>   <em class="jxr_comment">// Make a safe contravariant cast now so we don't have to do it over and over.</em>
<a class="jxr_linenumber" name="L351" href="#L351">351</a>   @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L352" href="#L352">352</a>   &lt;K1 <strong class="jxr_keyword">extends</strong> K, V1 <strong class="jxr_keyword">extends</strong> V&gt; Weigher&lt;K1, V1&gt; getWeigher() {
<a class="jxr_linenumber" name="L353" href="#L353">353</a>     <strong class="jxr_keyword">return</strong> (Weigher&lt;K1, V1&gt;) MoreObjects.firstNonNull(weigher, OneWeigher.INSTANCE);
<a class="jxr_linenumber" name="L354" href="#L354">354</a>   }
<a class="jxr_linenumber" name="L355" href="#L355">355</a> 
<a class="jxr_linenumber" name="L356" href="#L356">356</a>   CacheBuilder&lt;K, V&gt; setKeyStrength(<a href="../../../../com/google/common/cache/LocalCache.html">Strength</a> strength) {
<a class="jxr_linenumber" name="L357" href="#L357">357</a>     checkState(keyStrength == <strong class="jxr_keyword">null</strong>, <span class="jxr_string">"Key strength was already set to %s"</span>, keyStrength);
<a class="jxr_linenumber" name="L358" href="#L358">358</a>     keyStrength = checkNotNull(strength);
<a class="jxr_linenumber" name="L359" href="#L359">359</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L360" href="#L360">360</a>   }
<a class="jxr_linenumber" name="L361" href="#L361">361</a> 
<a class="jxr_linenumber" name="L362" href="#L362">362</a>   <a href="../../../../com/google/common/cache/LocalCache.html">Strength</a> getKeyStrength() {
<a class="jxr_linenumber" name="L363" href="#L363">363</a>     <strong class="jxr_keyword">return</strong> MoreObjects.firstNonNull(keyStrength, Strength.STRONG);
<a class="jxr_linenumber" name="L364" href="#L364">364</a>   }
<a class="jxr_linenumber" name="L365" href="#L365">365</a> 
<a class="jxr_linenumber" name="L366" href="#L366">366</a>   CacheBuilder&lt;K, V&gt; setValueStrength(<a href="../../../../com/google/common/cache/LocalCache.html">Strength</a> strength) {
<a class="jxr_linenumber" name="L367" href="#L367">367</a>     checkState(valueStrength == <strong class="jxr_keyword">null</strong>, <span class="jxr_string">"Value strength was already set to %s"</span>, valueStrength);
<a class="jxr_linenumber" name="L368" href="#L368">368</a>     valueStrength = checkNotNull(strength);
<a class="jxr_linenumber" name="L369" href="#L369">369</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L370" href="#L370">370</a>   }
<a class="jxr_linenumber" name="L371" href="#L371">371</a> 
<a class="jxr_linenumber" name="L372" href="#L372">372</a>   <a href="../../../../com/google/common/cache/LocalCache.html">Strength</a> getValueStrength() {
<a class="jxr_linenumber" name="L373" href="#L373">373</a>     <strong class="jxr_keyword">return</strong> MoreObjects.firstNonNull(valueStrength, Strength.STRONG);
<a class="jxr_linenumber" name="L374" href="#L374">374</a>   }
<a class="jxr_linenumber" name="L375" href="#L375">375</a> 
<a class="jxr_linenumber" name="L376" href="#L376">376</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L377" href="#L377">377</a> <em class="jxr_javadoccomment">   * Specifies that each entry should be automatically removed from the cache once a fixed duration</em>
<a class="jxr_linenumber" name="L378" href="#L378">378</a> <em class="jxr_javadoccomment">   * has elapsed after the entry's creation, or the most recent replacement of its value.</em>
<a class="jxr_linenumber" name="L379" href="#L379">379</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L380" href="#L380">380</a> <em class="jxr_javadoccomment">   * &lt;p&gt;When {@code duration} is zero, this method hands off to</em>
<a class="jxr_linenumber" name="L381" href="#L381">381</a> <em class="jxr_javadoccomment">   * {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specificed maximum</em>
<a class="jxr_linenumber" name="L382" href="#L382">382</a> <em class="jxr_javadoccomment">   * size or weight. This can be useful in testing, or to disable caching temporarily without a code</em>
<a class="jxr_linenumber" name="L383" href="#L383">383</a> <em class="jxr_javadoccomment">   * change.</em>
<a class="jxr_linenumber" name="L384" href="#L384">384</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L385" href="#L385">385</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Expired entries may be counted in {@link Cache#size}, but will never be visible to read or</em>
<a class="jxr_linenumber" name="L386" href="#L386">386</a> <em class="jxr_javadoccomment">   * write operations. Expired entries are cleaned up as part of the routine maintenance described</em>
<a class="jxr_linenumber" name="L387" href="#L387">387</a> <em class="jxr_javadoccomment">   * in the class javadoc.</em>
<a class="jxr_linenumber" name="L388" href="#L388">388</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L389" href="#L389">389</a> <em class="jxr_javadoccomment">   * @param duration the length of time after an entry is created that it should be automatically</em>
<a class="jxr_linenumber" name="L390" href="#L390">390</a> <em class="jxr_javadoccomment">   *     removed</em>
<a class="jxr_linenumber" name="L391" href="#L391">391</a> <em class="jxr_javadoccomment">   * @param unit the unit that {@code duration} is expressed in</em>
<a class="jxr_linenumber" name="L392" href="#L392">392</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code duration} is negative</em>
<a class="jxr_linenumber" name="L393" href="#L393">393</a> <em class="jxr_javadoccomment">   * @throws IllegalStateException if the time to live or time to idle was already set</em>
<a class="jxr_linenumber" name="L394" href="#L394">394</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L395" href="#L395">395</a>   <strong class="jxr_keyword">public</strong> CacheBuilder&lt;K, V&gt; expireAfterWrite(<strong class="jxr_keyword">long</strong> duration, <a href="../../../../java/util/concurrent/TimeUnit.html">TimeUnit</a> unit) {
<a class="jxr_linenumber" name="L396" href="#L396">396</a>     checkState(expireAfterWriteNanos == UNSET_INT, <span class="jxr_string">"expireAfterWrite was already set to %s ns"</span>,
<a class="jxr_linenumber" name="L397" href="#L397">397</a>         expireAfterWriteNanos);
<a class="jxr_linenumber" name="L398" href="#L398">398</a>     checkArgument(duration &gt;= 0, <span class="jxr_string">"duration cannot be negative: %s %s"</span>, duration, unit);
<a class="jxr_linenumber" name="L399" href="#L399">399</a>     <strong class="jxr_keyword">this</strong>.expireAfterWriteNanos = unit.toNanos(duration);
<a class="jxr_linenumber" name="L400" href="#L400">400</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L401" href="#L401">401</a>   }
<a class="jxr_linenumber" name="L402" href="#L402">402</a> 
<a class="jxr_linenumber" name="L403" href="#L403">403</a>   <strong class="jxr_keyword">long</strong> getExpireAfterWriteNanos() {
<a class="jxr_linenumber" name="L404" href="#L404">404</a>     <strong class="jxr_keyword">return</strong> (expireAfterWriteNanos == UNSET_INT) ? DEFAULT_EXPIRATION_NANOS : expireAfterWriteNanos;
<a class="jxr_linenumber" name="L405" href="#L405">405</a>   }
<a class="jxr_linenumber" name="L406" href="#L406">406</a> 
<a class="jxr_linenumber" name="L407" href="#L407">407</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L408" href="#L408">408</a> <em class="jxr_javadoccomment">   * Specifies that each entry should be automatically removed from the cache once a fixed duration</em>
<a class="jxr_linenumber" name="L409" href="#L409">409</a> <em class="jxr_javadoccomment">   * has elapsed after the entry's creation, the most recent replacement of its value, or its last</em>
<a class="jxr_linenumber" name="L410" href="#L410">410</a> <em class="jxr_javadoccomment">   * access. Access time is reset by all cache read and write operations (including</em>
<a class="jxr_linenumber" name="L411" href="#L411">411</a> <em class="jxr_javadoccomment">   * {@code Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by operations</em>
<a class="jxr_linenumber" name="L412" href="#L412">412</a> <em class="jxr_javadoccomment">   * on the collection-views of {@link Cache#asMap}.</em>
<a class="jxr_linenumber" name="L413" href="#L413">413</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L414" href="#L414">414</a> <em class="jxr_javadoccomment">   * &lt;p&gt;When {@code duration} is zero, this method hands off to</em>
<a class="jxr_linenumber" name="L415" href="#L415">415</a> <em class="jxr_javadoccomment">   * {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specificed maximum</em>
<a class="jxr_linenumber" name="L416" href="#L416">416</a> <em class="jxr_javadoccomment">   * size or weight. This can be useful in testing, or to disable caching temporarily without a code</em>
<a class="jxr_linenumber" name="L417" href="#L417">417</a> <em class="jxr_javadoccomment">   * change.</em>
<a class="jxr_linenumber" name="L418" href="#L418">418</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L419" href="#L419">419</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Expired entries may be counted in {@link Cache#size}, but will never be visible to read or</em>
<a class="jxr_linenumber" name="L420" href="#L420">420</a> <em class="jxr_javadoccomment">   * write operations. Expired entries are cleaned up as part of the routine maintenance described</em>
<a class="jxr_linenumber" name="L421" href="#L421">421</a> <em class="jxr_javadoccomment">   * in the class javadoc.</em>
<a class="jxr_linenumber" name="L422" href="#L422">422</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L423" href="#L423">423</a> <em class="jxr_javadoccomment">   * @param duration the length of time after an entry is last accessed that it should be</em>
<a class="jxr_linenumber" name="L424" href="#L424">424</a> <em class="jxr_javadoccomment">   *     automatically removed</em>
<a class="jxr_linenumber" name="L425" href="#L425">425</a> <em class="jxr_javadoccomment">   * @param unit the unit that {@code duration} is expressed in</em>
<a class="jxr_linenumber" name="L426" href="#L426">426</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code duration} is negative</em>
<a class="jxr_linenumber" name="L427" href="#L427">427</a> <em class="jxr_javadoccomment">   * @throws IllegalStateException if the time to idle or time to live was already set</em>
<a class="jxr_linenumber" name="L428" href="#L428">428</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L429" href="#L429">429</a>   <strong class="jxr_keyword">public</strong> CacheBuilder&lt;K, V&gt; expireAfterAccess(<strong class="jxr_keyword">long</strong> duration, <a href="../../../../java/util/concurrent/TimeUnit.html">TimeUnit</a> unit) {
<a class="jxr_linenumber" name="L430" href="#L430">430</a>     checkState(expireAfterAccessNanos == UNSET_INT, <span class="jxr_string">"expireAfterAccess was already set to %s ns"</span>,
<a class="jxr_linenumber" name="L431" href="#L431">431</a>         expireAfterAccessNanos);
<a class="jxr_linenumber" name="L432" href="#L432">432</a>     checkArgument(duration &gt;= 0, <span class="jxr_string">"duration cannot be negative: %s %s"</span>, duration, unit);
<a class="jxr_linenumber" name="L433" href="#L433">433</a>     <strong class="jxr_keyword">this</strong>.expireAfterAccessNanos = unit.toNanos(duration);
<a class="jxr_linenumber" name="L434" href="#L434">434</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L435" href="#L435">435</a>   }
<a class="jxr_linenumber" name="L436" href="#L436">436</a> 
<a class="jxr_linenumber" name="L437" href="#L437">437</a>   <strong class="jxr_keyword">long</strong> getExpireAfterAccessNanos() {
<a class="jxr_linenumber" name="L438" href="#L438">438</a>     <strong class="jxr_keyword">return</strong> (expireAfterAccessNanos == UNSET_INT)
<a class="jxr_linenumber" name="L439" href="#L439">439</a>         ? DEFAULT_EXPIRATION_NANOS : expireAfterAccessNanos;
<a class="jxr_linenumber" name="L440" href="#L440">440</a>   }
<a class="jxr_linenumber" name="L441" href="#L441">441</a> 
<a class="jxr_linenumber" name="L442" href="#L442">442</a>   <strong class="jxr_keyword">long</strong> getRefreshNanos() {
<a class="jxr_linenumber" name="L443" href="#L443">443</a>     <strong class="jxr_keyword">return</strong> (refreshNanos == UNSET_INT) ? DEFAULT_REFRESH_NANOS : refreshNanos;
<a class="jxr_linenumber" name="L444" href="#L444">444</a>   }
<a class="jxr_linenumber" name="L445" href="#L445">445</a> 
<a class="jxr_linenumber" name="L446" href="#L446">446</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L447" href="#L447">447</a> <em class="jxr_javadoccomment">   * Specifies a nanosecond-precision time source for use in determining when entries should be</em>
<a class="jxr_linenumber" name="L448" href="#L448">448</a> <em class="jxr_javadoccomment">   * expired. By default, {@link System#nanoTime} is used.</em>
<a class="jxr_linenumber" name="L449" href="#L449">449</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L450" href="#L450">450</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The primary intent of this method is to facilitate testing of caches which have been</em>
<a class="jxr_linenumber" name="L451" href="#L451">451</a> <em class="jxr_javadoccomment">   * configured with {@link #expireAfterWrite} or {@link #expireAfterAccess}.</em>
<a class="jxr_linenumber" name="L452" href="#L452">452</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L453" href="#L453">453</a> <em class="jxr_javadoccomment">   * @throws IllegalStateException if a ticker was already set</em>
<a class="jxr_linenumber" name="L454" href="#L454">454</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L455" href="#L455">455</a>   <strong class="jxr_keyword">public</strong> CacheBuilder&lt;K, V&gt; ticker(<a href="../../../../com/google/common/base/Ticker.html">Ticker</a> ticker) {
<a class="jxr_linenumber" name="L456" href="#L456">456</a>     checkState(<strong class="jxr_keyword">this</strong>.ticker == <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L457" href="#L457">457</a>     <strong class="jxr_keyword">this</strong>.ticker = checkNotNull(ticker);
<a class="jxr_linenumber" name="L458" href="#L458">458</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L459" href="#L459">459</a>   }
<a class="jxr_linenumber" name="L460" href="#L460">460</a> 
<a class="jxr_linenumber" name="L461" href="#L461">461</a>   <a href="../../../../com/google/common/base/Ticker.html">Ticker</a> getTicker(<strong class="jxr_keyword">boolean</strong> recordsTime) {
<a class="jxr_linenumber" name="L462" href="#L462">462</a>     <strong class="jxr_keyword">if</strong> (ticker != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L463" href="#L463">463</a>       <strong class="jxr_keyword">return</strong> ticker;
<a class="jxr_linenumber" name="L464" href="#L464">464</a>     }
<a class="jxr_linenumber" name="L465" href="#L465">465</a>     <strong class="jxr_keyword">return</strong> recordsTime ? Ticker.systemTicker() : NULL_TICKER;
<a class="jxr_linenumber" name="L466" href="#L466">466</a>   }
<a class="jxr_linenumber" name="L467" href="#L467">467</a> 
<a class="jxr_linenumber" name="L468" href="#L468">468</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L469" href="#L469">469</a> <em class="jxr_javadoccomment">   * Specifies a listener instance that caches should notify each time an entry is removed for any</em>
<a class="jxr_linenumber" name="L470" href="#L470">470</a> <em class="jxr_javadoccomment">   * {@linkplain RemovalCause reason}. Each cache created by this builder will invoke this listener</em>
<a class="jxr_linenumber" name="L471" href="#L471">471</a> <em class="jxr_javadoccomment">   * as part of the routine maintenance described in the class documentation above.</em>
<a class="jxr_linenumber" name="L472" href="#L472">472</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L473" href="#L473">473</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; after invoking this method, do not continue to use &lt;i&gt;this&lt;/i&gt; cache</em>
<a class="jxr_linenumber" name="L474" href="#L474">474</a> <em class="jxr_javadoccomment">   * builder reference; instead use the reference this method &lt;i&gt;returns&lt;/i&gt;. At runtime, these</em>
<a class="jxr_linenumber" name="L475" href="#L475">475</a> <em class="jxr_javadoccomment">   * point to the same instance, but only the returned reference has the correct generic type</em>
<a class="jxr_linenumber" name="L476" href="#L476">476</a> <em class="jxr_javadoccomment">   * information so as to ensure type safety. For best results, use the standard method-chaining</em>
<a class="jxr_linenumber" name="L477" href="#L477">477</a> <em class="jxr_javadoccomment">   * idiom illustrated in the class documentation above, configuring a builder and building your</em>
<a class="jxr_linenumber" name="L478" href="#L478">478</a> <em class="jxr_javadoccomment">   * cache in a single statement. Failure to heed this advice can result in a {@link</em>
<a class="jxr_linenumber" name="L479" href="#L479">479</a> <em class="jxr_javadoccomment">   * ClassCastException} being thrown by a cache operation at some &lt;i&gt;undefined&lt;/i&gt; point in the</em>
<a class="jxr_linenumber" name="L480" href="#L480">480</a> <em class="jxr_javadoccomment">   * future.</em>
<a class="jxr_linenumber" name="L481" href="#L481">481</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L482" href="#L482">482</a> <em class="jxr_javadoccomment">   * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; any exception thrown by {@code listener} will &lt;i&gt;not&lt;/i&gt; be propagated to</em>
<a class="jxr_linenumber" name="L483" href="#L483">483</a> <em class="jxr_javadoccomment">   * the {@code Cache} user, only logged via a {@link Logger}.</em>
<a class="jxr_linenumber" name="L484" href="#L484">484</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L485" href="#L485">485</a> <em class="jxr_javadoccomment">   * @return the cache builder reference that should be used instead of {@code this} for any</em>
<a class="jxr_linenumber" name="L486" href="#L486">486</a> <em class="jxr_javadoccomment">   *     remaining configuration and cache building</em>
<a class="jxr_linenumber" name="L487" href="#L487">487</a> <em class="jxr_javadoccomment">   * @throws IllegalStateException if a removal listener was already set</em>
<a class="jxr_linenumber" name="L488" href="#L488">488</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L489" href="#L489">489</a>   @CheckReturnValue
<a class="jxr_linenumber" name="L490" href="#L490">490</a>   <strong class="jxr_keyword">public</strong> &lt;K1 <strong class="jxr_keyword">extends</strong> K, V1 <strong class="jxr_keyword">extends</strong> V&gt; CacheBuilder&lt;K1, V1&gt; removalListener(
<a class="jxr_linenumber" name="L491" href="#L491">491</a>       RemovalListener&lt;? <strong class="jxr_keyword">super</strong> K1, ? <strong class="jxr_keyword">super</strong> V1&gt; listener) {
<a class="jxr_linenumber" name="L492" href="#L492">492</a>     checkState(<strong class="jxr_keyword">this</strong>.removalListener == <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L493" href="#L493">493</a> 
<a class="jxr_linenumber" name="L494" href="#L494">494</a>     <em class="jxr_comment">// safely limiting the kinds of caches this can produce</em>
<a class="jxr_linenumber" name="L495" href="#L495">495</a>     @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L496" href="#L496">496</a>     CacheBuilder&lt;K1, V1&gt; me = (CacheBuilder&lt;K1, V1&gt;) <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L497" href="#L497">497</a>     me.removalListener = checkNotNull(listener);
<a class="jxr_linenumber" name="L498" href="#L498">498</a>     <strong class="jxr_keyword">return</strong> me;
<a class="jxr_linenumber" name="L499" href="#L499">499</a>   }
<a class="jxr_linenumber" name="L500" href="#L500">500</a> 
<a class="jxr_linenumber" name="L501" href="#L501">501</a>   <em class="jxr_comment">// Make a safe contravariant cast now so we don't have to do it over and over.</em>
<a class="jxr_linenumber" name="L502" href="#L502">502</a>   @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L503" href="#L503">503</a>   &lt;K1 <strong class="jxr_keyword">extends</strong> K, V1 <strong class="jxr_keyword">extends</strong> V&gt; RemovalListener&lt;K1, V1&gt; getRemovalListener() {
<a class="jxr_linenumber" name="L504" href="#L504">504</a>     <strong class="jxr_keyword">return</strong> (RemovalListener&lt;K1, V1&gt;)
<a class="jxr_linenumber" name="L505" href="#L505">505</a>         MoreObjects.firstNonNull(removalListener, NullListener.INSTANCE);
<a class="jxr_linenumber" name="L506" href="#L506">506</a>   }
<a class="jxr_linenumber" name="L507" href="#L507">507</a> 
<a class="jxr_linenumber" name="L508" href="#L508">508</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L509" href="#L509">509</a> <em class="jxr_javadoccomment">   * Enable the accumulation of {@link CacheStats} during the operation of the cache. Without this</em>
<a class="jxr_linenumber" name="L510" href="#L510">510</a> <em class="jxr_javadoccomment">   * {@link Cache#stats} will return zero for all statistics. Note that recording stats requires</em>
<a class="jxr_linenumber" name="L511" href="#L511">511</a> <em class="jxr_javadoccomment">   * bookkeeping to be performed with each operation, and thus imposes a performance penalty on</em>
<a class="jxr_linenumber" name="L512" href="#L512">512</a> <em class="jxr_javadoccomment">   * cache operation.</em>
<a class="jxr_linenumber" name="L513" href="#L513">513</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L514" href="#L514">514</a> <em class="jxr_javadoccomment">   * @since 12.0 (previously, stats collection was automatic)</em>
<a class="jxr_linenumber" name="L515" href="#L515">515</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L516" href="#L516">516</a>   <strong class="jxr_keyword">public</strong> CacheBuilder&lt;K, V&gt; recordStats() {
<a class="jxr_linenumber" name="L517" href="#L517">517</a>     statsCounterSupplier = CACHE_STATS_COUNTER;
<a class="jxr_linenumber" name="L518" href="#L518">518</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L519" href="#L519">519</a>   }
<a class="jxr_linenumber" name="L520" href="#L520">520</a>   
<a class="jxr_linenumber" name="L521" href="#L521">521</a>   <strong class="jxr_keyword">boolean</strong> isRecordingStats() {
<a class="jxr_linenumber" name="L522" href="#L522">522</a>     <strong class="jxr_keyword">return</strong> statsCounterSupplier == CACHE_STATS_COUNTER;
<a class="jxr_linenumber" name="L523" href="#L523">523</a>   }
<a class="jxr_linenumber" name="L524" href="#L524">524</a> 
<a class="jxr_linenumber" name="L525" href="#L525">525</a>   Supplier&lt;? <strong class="jxr_keyword">extends</strong> StatsCounter&gt; getStatsCounterSupplier() {
<a class="jxr_linenumber" name="L526" href="#L526">526</a>     <strong class="jxr_keyword">return</strong> statsCounterSupplier;
<a class="jxr_linenumber" name="L527" href="#L527">527</a>   }
<a class="jxr_linenumber" name="L528" href="#L528">528</a> 
<a class="jxr_linenumber" name="L529" href="#L529">529</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L530" href="#L530">530</a> <em class="jxr_javadoccomment">   * Builds a cache, which either returns an already-loaded value for a given key or atomically</em>
<a class="jxr_linenumber" name="L531" href="#L531">531</a> <em class="jxr_javadoccomment">   * computes or retrieves it using the supplied {@code CacheLoader}. If another thread is currently</em>
<a class="jxr_linenumber" name="L532" href="#L532">532</a> <em class="jxr_javadoccomment">   * loading the value for this key, simply waits for that thread to finish and returns its</em>
<a class="jxr_linenumber" name="L533" href="#L533">533</a> <em class="jxr_javadoccomment">   * loaded value. Note that multiple threads can concurrently load values for distinct keys.</em>
<a class="jxr_linenumber" name="L534" href="#L534">534</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L535" href="#L535">535</a> <em class="jxr_javadoccomment">   * &lt;p&gt;This method does not alter the state of this {@code CacheBuilder} instance, so it can be</em>
<a class="jxr_linenumber" name="L536" href="#L536">536</a> <em class="jxr_javadoccomment">   * invoked again to create multiple independent caches.</em>
<a class="jxr_linenumber" name="L537" href="#L537">537</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L538" href="#L538">538</a> <em class="jxr_javadoccomment">   * @param loader the cache loader used to obtain new values</em>
<a class="jxr_linenumber" name="L539" href="#L539">539</a> <em class="jxr_javadoccomment">   * @return a cache having the requested features</em>
<a class="jxr_linenumber" name="L540" href="#L540">540</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L541" href="#L541">541</a>   <strong class="jxr_keyword">public</strong> &lt;K1 <strong class="jxr_keyword">extends</strong> K, V1 <strong class="jxr_keyword">extends</strong> V&gt; LoadingCache&lt;K1, V1&gt; build(
<a class="jxr_linenumber" name="L542" href="#L542">542</a>       CacheLoader&lt;? <strong class="jxr_keyword">super</strong> K1, V1&gt; loader) {
<a class="jxr_linenumber" name="L543" href="#L543">543</a>     checkWeightWithWeigher();
<a class="jxr_linenumber" name="L544" href="#L544">544</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> LocalCache.LocalLoadingCache&lt;K1, V1&gt;(<strong class="jxr_keyword">this</strong>, loader);
<a class="jxr_linenumber" name="L545" href="#L545">545</a>   }
<a class="jxr_linenumber" name="L546" href="#L546">546</a> 
<a class="jxr_linenumber" name="L547" href="#L547">547</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L548" href="#L548">548</a> <em class="jxr_javadoccomment">   * Builds a cache which does not automatically load values when keys are requested.</em>
<a class="jxr_linenumber" name="L549" href="#L549">549</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L550" href="#L550">550</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Consider {@link #build(CacheLoader)} instead, if it is feasible to implement a</em>
<a class="jxr_linenumber" name="L551" href="#L551">551</a> <em class="jxr_javadoccomment">   * {@code CacheLoader}.</em>
<a class="jxr_linenumber" name="L552" href="#L552">552</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L553" href="#L553">553</a> <em class="jxr_javadoccomment">   * &lt;p&gt;This method does not alter the state of this {@code CacheBuilder} instance, so it can be</em>
<a class="jxr_linenumber" name="L554" href="#L554">554</a> <em class="jxr_javadoccomment">   * invoked again to create multiple independent caches.</em>
<a class="jxr_linenumber" name="L555" href="#L555">555</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L556" href="#L556">556</a> <em class="jxr_javadoccomment">   * @return a cache having the requested features</em>
<a class="jxr_linenumber" name="L557" href="#L557">557</a> <em class="jxr_javadoccomment">   * @since 11.0</em>
<a class="jxr_linenumber" name="L558" href="#L558">558</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L559" href="#L559">559</a>   <strong class="jxr_keyword">public</strong> &lt;K1 <strong class="jxr_keyword">extends</strong> K, V1 <strong class="jxr_keyword">extends</strong> V&gt; Cache&lt;K1, V1&gt; build() {
<a class="jxr_linenumber" name="L560" href="#L560">560</a>     checkWeightWithWeigher();
<a class="jxr_linenumber" name="L561" href="#L561">561</a>     checkNonLoadingCache();
<a class="jxr_linenumber" name="L562" href="#L562">562</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> LocalCache.LocalManualCache&lt;K1, V1&gt;(<strong class="jxr_keyword">this</strong>);
<a class="jxr_linenumber" name="L563" href="#L563">563</a>   }
<a class="jxr_linenumber" name="L564" href="#L564">564</a> 
<a class="jxr_linenumber" name="L565" href="#L565">565</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkNonLoadingCache() {
<a class="jxr_linenumber" name="L566" href="#L566">566</a>     checkState(refreshNanos == UNSET_INT, <span class="jxr_string">"refreshAfterWrite requires a LoadingCache"</span>);
<a class="jxr_linenumber" name="L567" href="#L567">567</a>   }
<a class="jxr_linenumber" name="L568" href="#L568">568</a> 
<a class="jxr_linenumber" name="L569" href="#L569">569</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkWeightWithWeigher() {
<a class="jxr_linenumber" name="L570" href="#L570">570</a>     <strong class="jxr_keyword">if</strong> (weigher == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L571" href="#L571">571</a>       checkState(maximumWeight == UNSET_INT, <span class="jxr_string">"maximumWeight requires weigher"</span>);
<a class="jxr_linenumber" name="L572" href="#L572">572</a>     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L573" href="#L573">573</a>       <strong class="jxr_keyword">if</strong> (strictParsing) {
<a class="jxr_linenumber" name="L574" href="#L574">574</a>         checkState(maximumWeight != UNSET_INT, <span class="jxr_string">"weigher requires maximumWeight"</span>);
<a class="jxr_linenumber" name="L575" href="#L575">575</a>       } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L576" href="#L576">576</a>         <strong class="jxr_keyword">if</strong> (maximumWeight == UNSET_INT) {
<a class="jxr_linenumber" name="L577" href="#L577">577</a>           logger.log(Level.WARNING, <span class="jxr_string">"ignoring weigher specified without maximumWeight"</span>);
<a class="jxr_linenumber" name="L578" href="#L578">578</a>         }
<a class="jxr_linenumber" name="L579" href="#L579">579</a>       }
<a class="jxr_linenumber" name="L580" href="#L580">580</a>     }
<a class="jxr_linenumber" name="L581" href="#L581">581</a>   }
<a class="jxr_linenumber" name="L582" href="#L582">582</a> 
<a class="jxr_linenumber" name="L583" href="#L583">583</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L584" href="#L584">584</a> <em class="jxr_javadoccomment">   * Returns a string representation for this CacheBuilder instance. The exact form of the returned</em>
<a class="jxr_linenumber" name="L585" href="#L585">585</a> <em class="jxr_javadoccomment">   * string is not specified.</em>
<a class="jxr_linenumber" name="L586" href="#L586">586</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L587" href="#L587">587</a>   @Override
<a class="jxr_linenumber" name="L588" href="#L588">588</a>   <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L589" href="#L589">589</a>     MoreObjects.ToStringHelper s = MoreObjects.toStringHelper(<strong class="jxr_keyword">this</strong>);
<a class="jxr_linenumber" name="L590" href="#L590">590</a>     <strong class="jxr_keyword">if</strong> (initialCapacity != UNSET_INT) {
<a class="jxr_linenumber" name="L591" href="#L591">591</a>       s.add(<span class="jxr_string">"initialCapacity"</span>, initialCapacity);
<a class="jxr_linenumber" name="L592" href="#L592">592</a>     }
<a class="jxr_linenumber" name="L593" href="#L593">593</a>     <strong class="jxr_keyword">if</strong> (concurrencyLevel != UNSET_INT) {
<a class="jxr_linenumber" name="L594" href="#L594">594</a>       s.add(<span class="jxr_string">"concurrencyLevel"</span>, concurrencyLevel);
<a class="jxr_linenumber" name="L595" href="#L595">595</a>     }
<a class="jxr_linenumber" name="L596" href="#L596">596</a>     <strong class="jxr_keyword">if</strong> (maximumSize != UNSET_INT) {
<a class="jxr_linenumber" name="L597" href="#L597">597</a>       s.add(<span class="jxr_string">"maximumSize"</span>, maximumSize);
<a class="jxr_linenumber" name="L598" href="#L598">598</a>     }
<a class="jxr_linenumber" name="L599" href="#L599">599</a>     <strong class="jxr_keyword">if</strong> (maximumWeight != UNSET_INT) {
<a class="jxr_linenumber" name="L600" href="#L600">600</a>       s.add(<span class="jxr_string">"maximumWeight"</span>, maximumWeight);
<a class="jxr_linenumber" name="L601" href="#L601">601</a>     }
<a class="jxr_linenumber" name="L602" href="#L602">602</a>     <strong class="jxr_keyword">if</strong> (expireAfterWriteNanos != UNSET_INT) {
<a class="jxr_linenumber" name="L603" href="#L603">603</a>       s.add(<span class="jxr_string">"expireAfterWrite"</span>, expireAfterWriteNanos + <span class="jxr_string">"ns"</span>);
<a class="jxr_linenumber" name="L604" href="#L604">604</a>     }
<a class="jxr_linenumber" name="L605" href="#L605">605</a>     <strong class="jxr_keyword">if</strong> (expireAfterAccessNanos != UNSET_INT) {
<a class="jxr_linenumber" name="L606" href="#L606">606</a>       s.add(<span class="jxr_string">"expireAfterAccess"</span>, expireAfterAccessNanos + <span class="jxr_string">"ns"</span>);
<a class="jxr_linenumber" name="L607" href="#L607">607</a>     }
<a class="jxr_linenumber" name="L608" href="#L608">608</a>     <strong class="jxr_keyword">if</strong> (keyStrength != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L609" href="#L609">609</a>       s.add(<span class="jxr_string">"keyStrength"</span>, Ascii.toLowerCase(keyStrength.toString()));
<a class="jxr_linenumber" name="L610" href="#L610">610</a>     }
<a class="jxr_linenumber" name="L611" href="#L611">611</a>     <strong class="jxr_keyword">if</strong> (valueStrength != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L612" href="#L612">612</a>       s.add(<span class="jxr_string">"valueStrength"</span>, Ascii.toLowerCase(valueStrength.toString()));
<a class="jxr_linenumber" name="L613" href="#L613">613</a>     }
<a class="jxr_linenumber" name="L614" href="#L614">614</a>     <strong class="jxr_keyword">if</strong> (keyEquivalence != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L615" href="#L615">615</a>       s.addValue(<span class="jxr_string">"keyEquivalence"</span>);
<a class="jxr_linenumber" name="L616" href="#L616">616</a>     }
<a class="jxr_linenumber" name="L617" href="#L617">617</a>     <strong class="jxr_keyword">if</strong> (valueEquivalence != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L618" href="#L618">618</a>       s.addValue(<span class="jxr_string">"valueEquivalence"</span>);
<a class="jxr_linenumber" name="L619" href="#L619">619</a>     }
<a class="jxr_linenumber" name="L620" href="#L620">620</a>     <strong class="jxr_keyword">if</strong> (removalListener != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L621" href="#L621">621</a>       s.addValue(<span class="jxr_string">"removalListener"</span>);
<a class="jxr_linenumber" name="L622" href="#L622">622</a>     }
<a class="jxr_linenumber" name="L623" href="#L623">623</a>     <strong class="jxr_keyword">return</strong> s.toString();
<a class="jxr_linenumber" name="L624" href="#L624">624</a>   }
<a class="jxr_linenumber" name="L625" href="#L625">625</a> }
<a class="jxr_linenumber" name="L626" href="#L626">626</a> 
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
