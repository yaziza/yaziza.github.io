<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>TreeMultimapExplicitTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../../../../../apidocs/com/google/common/collect/TreeMultimapExplicitTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2007 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.collect;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.truth.Truth.assertThat;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> java.util.Comparator;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> java.util.Iterator;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> java.util.Map;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> java.util.SortedSet;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * Unit tests for {@code TreeMultimap} with explicit comparators.</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * @author Jared Levy</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/collect/TreeMultimapExplicitTest.html">TreeMultimapExplicitTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  
<a class="jxr_linenumber" name="L40" href="#L40">40</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment">   * Compare strings lengths, and if the lengths are equal compare the strings.</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment">   * A {@code null} is less than any non-null value.</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>    <strong class="jxr_keyword">private</strong> enum <a href="../../../../com/google/common/collect/TreeMultimapExplicitTest.html">StringLength</a> <strong class="jxr_keyword">implements</strong> Comparator&lt;String&gt; {
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      COMPARATOR;
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      @Override
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> compare(String first, String second) {
<a class="jxr_linenumber" name="L49" href="#L49">49</a>        <strong class="jxr_keyword">if</strong> (first == second) {
<a class="jxr_linenumber" name="L50" href="#L50">50</a>          <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L51" href="#L51">51</a>        } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (first == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L52" href="#L52">52</a>          <strong class="jxr_keyword">return</strong> -1;
<a class="jxr_linenumber" name="L53" href="#L53">53</a>        } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (second == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          <strong class="jxr_keyword">return</strong> 1;
<a class="jxr_linenumber" name="L55" href="#L55">55</a>        } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (first.length() != second.length()) {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          <strong class="jxr_keyword">return</strong> first.length() - second.length();
<a class="jxr_linenumber" name="L57" href="#L57">57</a>        } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          <strong class="jxr_keyword">return</strong> first.compareTo(second);
<a class="jxr_linenumber" name="L59" href="#L59">59</a>        }
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      }
<a class="jxr_linenumber" name="L61" href="#L61">61</a>    }
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  
<a class="jxr_linenumber" name="L63" href="#L63">63</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">   * Decreasing integer values. A {@code null} comes before any non-null value.</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> Comparator&lt;Integer&gt; DECREASING_INT_COMPARATOR =
<a class="jxr_linenumber" name="L67" href="#L67">67</a>        Ordering.&lt;Integer&gt;natural().reverse().nullsFirst();
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  
<a class="jxr_linenumber" name="L69" href="#L69">69</a>    <strong class="jxr_keyword">private</strong> SetMultimap&lt;String, Integer&gt; create() {
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <strong class="jxr_keyword">return</strong> TreeMultimap.create(
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          StringLength.COMPARATOR, DECREASING_INT_COMPARATOR);
<a class="jxr_linenumber" name="L72" href="#L72">72</a>    }
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  
<a class="jxr_linenumber" name="L74" href="#L74">74</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment">   * Create and populate a {@code TreeMultimap} with explicit comparators.</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>    <strong class="jxr_keyword">private</strong> TreeMultimap&lt;String, Integer&gt; createPopulate() {
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      TreeMultimap&lt;String, Integer&gt; multimap = TreeMultimap.create(
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          StringLength.COMPARATOR, DECREASING_INT_COMPARATOR);
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      multimap.put(<span class="jxr_string">"google"</span>, 2);
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      multimap.put(<span class="jxr_string">"google"</span>, 6);
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      multimap.put(<strong class="jxr_keyword">null</strong>, 3);
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      multimap.put(<strong class="jxr_keyword">null</strong>, 1);
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      multimap.put(<strong class="jxr_keyword">null</strong>, 7);
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      multimap.put(<span class="jxr_string">"tree"</span>, 0);
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      multimap.put(<span class="jxr_string">"tree"</span>, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      <strong class="jxr_keyword">return</strong> multimap;
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    }
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  
<a class="jxr_linenumber" name="L90" href="#L90">90</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <em class="jxr_javadoccomment">   * Test that a TreeMultimap created from another uses the natural ordering.</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMultimapCreateFromTreeMultimap() {
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      TreeMultimap&lt;String, Integer&gt; tree = TreeMultimap.create(
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          StringLength.COMPARATOR, DECREASING_INT_COMPARATOR);
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      tree.put(<span class="jxr_string">"google"</span>, 2);
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      tree.put(<span class="jxr_string">"google"</span>, 6);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      tree.put(<span class="jxr_string">"tree"</span>, 0);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      tree.put(<span class="jxr_string">"tree"</span>, 3);
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     assertThat(tree.keySet()).has().exactly(<span class="jxr_string">"tree"</span>, <span class="jxr_string">"google"</span>).inOrder();
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     assertThat(tree.get(<span class="jxr_string">"google"</span>)).has().exactly(6, 2).inOrder();
<a class="jxr_linenumber" name="L102" href="#L102">102</a> 
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     TreeMultimap&lt;String, Integer&gt; copy = TreeMultimap.create(tree);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     assertEquals(tree, copy);
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     assertThat(copy.keySet()).has().exactly(<span class="jxr_string">"google"</span>, <span class="jxr_string">"tree"</span>).inOrder();
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     assertThat(copy.get(<span class="jxr_string">"google"</span>)).has().exactly(2, 6).inOrder();
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     assertEquals(Ordering.natural(), copy.keyComparator());
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     assertEquals(Ordering.natural(), copy.valueComparator());
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     assertEquals(Ordering.natural(), copy.get(<span class="jxr_string">"google"</span>).comparator());
<a class="jxr_linenumber" name="L110" href="#L110">110</a>   }
<a class="jxr_linenumber" name="L111" href="#L111">111</a> 
<a class="jxr_linenumber" name="L112" href="#L112">112</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testToString() {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     Multimap&lt;String, Integer&gt; multimap = create();
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     multimap.put(<span class="jxr_string">"foo"</span>, 3);
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     multimap.put(<span class="jxr_string">"bar"</span>, 1);
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     multimap.putAll(<span class="jxr_string">"foo"</span>, Arrays.asList(-1, 2, 4));
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     multimap.putAll(<span class="jxr_string">"bar"</span>, Arrays.asList(2, 3));
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     multimap.put(<span class="jxr_string">"foo"</span>, 1);
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     assertEquals(<span class="jxr_string">"{bar=[3, 2, 1], foo=[4, 3, 2, 1, -1]}"</span>,
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         multimap.toString());
<a class="jxr_linenumber" name="L121" href="#L121">121</a>   }
<a class="jxr_linenumber" name="L122" href="#L122">122</a> 
<a class="jxr_linenumber" name="L123" href="#L123">123</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGetComparator() {
<a class="jxr_linenumber" name="L124" href="#L124">124</a>     TreeMultimap&lt;String, Integer&gt; multimap = createPopulate();
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     assertEquals(StringLength.COMPARATOR, multimap.keyComparator());
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     assertEquals(DECREASING_INT_COMPARATOR, multimap.valueComparator());
<a class="jxr_linenumber" name="L127" href="#L127">127</a>   }
<a class="jxr_linenumber" name="L128" href="#L128">128</a> 
<a class="jxr_linenumber" name="L129" href="#L129">129</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOrderedGet() {
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     TreeMultimap&lt;String, Integer&gt; multimap = createPopulate();
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     assertThat(multimap.get(<strong class="jxr_keyword">null</strong>)).has().exactly(7, 3, 1).inOrder();
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     assertThat(multimap.get(<span class="jxr_string">"google"</span>)).has().exactly(6, 2).inOrder();
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     assertThat(multimap.get(<span class="jxr_string">"tree"</span>)).has().exactly(<strong class="jxr_keyword">null</strong>, 0).inOrder();
<a class="jxr_linenumber" name="L134" href="#L134">134</a>   }
<a class="jxr_linenumber" name="L135" href="#L135">135</a> 
<a class="jxr_linenumber" name="L136" href="#L136">136</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOrderedKeySet() {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     TreeMultimap&lt;String, Integer&gt; multimap = createPopulate();
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     assertThat(multimap.keySet()).has().exactly(<strong class="jxr_keyword">null</strong>, <span class="jxr_string">"tree"</span>, <span class="jxr_string">"google"</span>).inOrder();
<a class="jxr_linenumber" name="L139" href="#L139">139</a>   }
<a class="jxr_linenumber" name="L140" href="#L140">140</a> 
<a class="jxr_linenumber" name="L141" href="#L141">141</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOrderedAsMapEntries() {
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     TreeMultimap&lt;String, Integer&gt; multimap = createPopulate();
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     Iterator&lt;Map.Entry&lt;String, Collection&lt;Integer&gt;&gt;&gt; iterator =
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         multimap.asMap().entrySet().iterator();
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     Map.Entry&lt;String, Collection&lt;Integer&gt;&gt; entry = iterator.next();
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     assertEquals(<strong class="jxr_keyword">null</strong>, entry.getKey());
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     assertThat(entry.getValue()).has().exactly(7, 3, 1);
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     entry = iterator.next();
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     assertEquals(<span class="jxr_string">"tree"</span>, entry.getKey());
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     assertThat(entry.getValue()).has().exactly(<strong class="jxr_keyword">null</strong>, 0);
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     entry = iterator.next();
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     assertEquals(<span class="jxr_string">"google"</span>, entry.getKey());
<a class="jxr_linenumber" name="L153" href="#L153">153</a>     assertThat(entry.getValue()).has().exactly(6, 2);
<a class="jxr_linenumber" name="L154" href="#L154">154</a>   }
<a class="jxr_linenumber" name="L155" href="#L155">155</a> 
<a class="jxr_linenumber" name="L156" href="#L156">156</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOrderedEntries() {
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     TreeMultimap&lt;String, Integer&gt; multimap = createPopulate();
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     assertThat(multimap.entries()).has().exactly(
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         Maps.immutableEntry((String) <strong class="jxr_keyword">null</strong>, 7),
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         Maps.immutableEntry((String) <strong class="jxr_keyword">null</strong>, 3),
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         Maps.immutableEntry((String) <strong class="jxr_keyword">null</strong>, 1),
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         Maps.immutableEntry(<span class="jxr_string">"tree"</span>, (Integer) <strong class="jxr_keyword">null</strong>),
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         Maps.immutableEntry(<span class="jxr_string">"tree"</span>, 0),
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         Maps.immutableEntry(<span class="jxr_string">"google"</span>, 6), 
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         Maps.immutableEntry(<span class="jxr_string">"google"</span>, 2)).inOrder();
<a class="jxr_linenumber" name="L166" href="#L166">166</a>   }
<a class="jxr_linenumber" name="L167" href="#L167">167</a> 
<a class="jxr_linenumber" name="L168" href="#L168">168</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOrderedValues() {
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     TreeMultimap&lt;String, Integer&gt; multimap = createPopulate();
<a class="jxr_linenumber" name="L170" href="#L170">170</a>     assertThat(multimap.values()).has().exactly(7, 3, 1, <strong class="jxr_keyword">null</strong>, 0, 6, 2).inOrder();
<a class="jxr_linenumber" name="L171" href="#L171">171</a>   }
<a class="jxr_linenumber" name="L172" href="#L172">172</a> 
<a class="jxr_linenumber" name="L173" href="#L173">173</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testComparator() {
<a class="jxr_linenumber" name="L174" href="#L174">174</a>     TreeMultimap&lt;String, Integer&gt; multimap = createPopulate();
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     assertEquals(DECREASING_INT_COMPARATOR, multimap.get(<span class="jxr_string">"foo"</span>).comparator());
<a class="jxr_linenumber" name="L176" href="#L176">176</a>     assertEquals(DECREASING_INT_COMPARATOR,
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         multimap.get(<span class="jxr_string">"missing"</span>).comparator());
<a class="jxr_linenumber" name="L178" href="#L178">178</a>   }
<a class="jxr_linenumber" name="L179" href="#L179">179</a> 
<a class="jxr_linenumber" name="L180" href="#L180">180</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMultimapComparators() {
<a class="jxr_linenumber" name="L181" href="#L181">181</a>     Multimap&lt;String, Integer&gt; multimap = create();
<a class="jxr_linenumber" name="L182" href="#L182">182</a>     multimap.put(<span class="jxr_string">"foo"</span>, 3);
<a class="jxr_linenumber" name="L183" href="#L183">183</a>     multimap.put(<span class="jxr_string">"bar"</span>, 1);
<a class="jxr_linenumber" name="L184" href="#L184">184</a>     multimap.putAll(<span class="jxr_string">"foo"</span>, Arrays.asList(-1, 2, 4));
<a class="jxr_linenumber" name="L185" href="#L185">185</a>     multimap.putAll(<span class="jxr_string">"bar"</span>, Arrays.asList(2, 3));
<a class="jxr_linenumber" name="L186" href="#L186">186</a>     multimap.put(<span class="jxr_string">"foo"</span>, 1);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>     TreeMultimap&lt;String, Integer&gt; copy =
<a class="jxr_linenumber" name="L188" href="#L188">188</a>         TreeMultimap.create(StringLength.COMPARATOR, DECREASING_INT_COMPARATOR);
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     copy.putAll(multimap);
<a class="jxr_linenumber" name="L190" href="#L190">190</a>     assertEquals(multimap, copy);
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     assertEquals(StringLength.COMPARATOR, copy.keyComparator());
<a class="jxr_linenumber" name="L192" href="#L192">192</a>     assertEquals(DECREASING_INT_COMPARATOR, copy.valueComparator());
<a class="jxr_linenumber" name="L193" href="#L193">193</a>   }
<a class="jxr_linenumber" name="L194" href="#L194">194</a> 
<a class="jxr_linenumber" name="L195" href="#L195">195</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSortedKeySet() {
<a class="jxr_linenumber" name="L196" href="#L196">196</a>     TreeMultimap&lt;String, Integer&gt; multimap = createPopulate();
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     SortedSet&lt;String&gt; keySet = multimap.keySet();
<a class="jxr_linenumber" name="L198" href="#L198">198</a> 
<a class="jxr_linenumber" name="L199" href="#L199">199</a>     assertEquals(<strong class="jxr_keyword">null</strong>, keySet.first());
<a class="jxr_linenumber" name="L200" href="#L200">200</a>     assertEquals(<span class="jxr_string">"google"</span>, keySet.last());
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     assertEquals(StringLength.COMPARATOR, keySet.comparator());
<a class="jxr_linenumber" name="L202" href="#L202">202</a>     assertEquals(Sets.newHashSet(<strong class="jxr_keyword">null</strong>, <span class="jxr_string">"tree"</span>), keySet.headSet(<span class="jxr_string">"yahoo"</span>));
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     assertEquals(Sets.newHashSet(<span class="jxr_string">"google"</span>), keySet.tailSet(<span class="jxr_string">"yahoo"</span>));
<a class="jxr_linenumber" name="L204" href="#L204">204</a>     assertEquals(Sets.newHashSet(<span class="jxr_string">"tree"</span>), keySet.subSet(<span class="jxr_string">"ask"</span>, <span class="jxr_string">"yahoo"</span>));
<a class="jxr_linenumber" name="L205" href="#L205">205</a>   }
<a class="jxr_linenumber" name="L206" href="#L206">206</a> }
<a class="jxr_linenumber" name="L207" href="#L207">207</a> 
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
