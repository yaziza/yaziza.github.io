<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>FunctionsTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../../../../../apidocs/com/google/common/base/FunctionsTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2005 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.base;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableMap;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Maps;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.EqualsTester;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> java.io.Serializable;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> java.util.Map;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * Tests for {@link Functions}.</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * @author Mike Bostock</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * @author Vlad Patryshev</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/base/FunctionsTest.html">FunctionsTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  
<a class="jxr_linenumber" name="L38" href="#L38">38</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIdentity_same() {
<a class="jxr_linenumber" name="L39" href="#L39">39</a>      Function&lt;String, String&gt; identity = Functions.identity();
<a class="jxr_linenumber" name="L40" href="#L40">40</a>      assertNull(identity.apply(<strong class="jxr_keyword">null</strong>));
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      assertSame(<span class="jxr_string">"foo"</span>, identity.apply(<span class="jxr_string">"foo"</span>));
<a class="jxr_linenumber" name="L42" href="#L42">42</a>    }
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  
<a class="jxr_linenumber" name="L44" href="#L44">44</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIdentity_notSame() {
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      Function&lt;Long, Long&gt; identity = Functions.identity();
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      assertNotSame(<strong class="jxr_keyword">new</strong> Long(135135L), identity.apply(<strong class="jxr_keyword">new</strong> Long(135135L)));
<a class="jxr_linenumber" name="L47" href="#L47">47</a>    }
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  
<a class="jxr_linenumber" name="L49" href="#L49">49</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testToStringFunction_apply() {
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      assertEquals(<span class="jxr_string">"3"</span>, Functions.toStringFunction().apply(3));
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      assertEquals(<span class="jxr_string">"hiya"</span>, Functions.toStringFunction().apply(<span class="jxr_string">"hiya"</span>));
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      assertEquals(<span class="jxr_string">"I'm a string"</span>,
<a class="jxr_linenumber" name="L53" href="#L53">53</a>          Functions.toStringFunction().apply(
<a class="jxr_linenumber" name="L54" href="#L54">54</a>              <strong class="jxr_keyword">new</strong> Object() {
<a class="jxr_linenumber" name="L55" href="#L55">55</a>                @Override <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>                  <strong class="jxr_keyword">return</strong> <span class="jxr_string">"I'm a string"</span>;
<a class="jxr_linenumber" name="L57" href="#L57">57</a>                }
<a class="jxr_linenumber" name="L58" href="#L58">58</a>              }));
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L60" href="#L60">60</a>        Functions.toStringFunction().apply(<strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L61" href="#L61">61</a>        fail(<span class="jxr_string">"expected NullPointerException"</span>);
<a class="jxr_linenumber" name="L62" href="#L62">62</a>      } <strong class="jxr_keyword">catch</strong> (NullPointerException e) {
<a class="jxr_linenumber" name="L63" href="#L63">63</a>        <em class="jxr_comment">// expected</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      }
<a class="jxr_linenumber" name="L65" href="#L65">65</a>    }
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  
<a class="jxr_linenumber" name="L67" href="#L67">67</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForMapWithoutDefault() {
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      Map&lt;String, Integer&gt; map = Maps.newHashMap();
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      map.put(<span class="jxr_string">"One"</span>, 1);
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      map.put(<span class="jxr_string">"Three"</span>, 3);
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      map.put(<span class="jxr_string">"Null"</span>, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      Function&lt;String, Integer&gt; function = Functions.forMap(map);
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      assertEquals(1, function.apply(<span class="jxr_string">"One"</span>).intValue());
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      assertEquals(3, function.apply(<span class="jxr_string">"Three"</span>).intValue());
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      assertNull(function.apply(<span class="jxr_string">"Null"</span>));
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L79" href="#L79">79</a>        function.apply(<span class="jxr_string">"Two"</span>);
<a class="jxr_linenumber" name="L80" href="#L80">80</a>        fail();
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      }
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          .addEqualityGroup(function, Functions.forMap(map))
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          .addEqualityGroup(Functions.forMap(map, 42))
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          .testEquals();
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    }
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  
<a class="jxr_linenumber" name="L90" href="#L90">90</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForMapWithDefault() {
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      Map&lt;String, Integer&gt; map = Maps.newHashMap();
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      map.put(<span class="jxr_string">"One"</span>, 1);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>      map.put(<span class="jxr_string">"Three"</span>, 3);
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      map.put(<span class="jxr_string">"Null"</span>, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      Function&lt;String, Integer&gt; function = Functions.forMap(map, 42);
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      assertEquals(1, function.apply(<span class="jxr_string">"One"</span>).intValue());
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      assertEquals(42, function.apply(<span class="jxr_string">"Two"</span>).intValue());
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      assertEquals(3, function.apply(<span class="jxr_string">"Three"</span>).intValue());
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     assertNull(function.apply(<span class="jxr_string">"Null"</span>));
<a class="jxr_linenumber" name="L101" href="#L101">101</a> 
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         .addEqualityGroup(function, Functions.forMap(map, 42))
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         .addEqualityGroup(Functions.forMap(map))
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         .addEqualityGroup(Functions.forMap(map, <strong class="jxr_keyword">null</strong>))
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         .addEqualityGroup(Functions.forMap(map, 43))
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         .testEquals();
<a class="jxr_linenumber" name="L108" href="#L108">108</a>   }
<a class="jxr_linenumber" name="L109" href="#L109">109</a> 
<a class="jxr_linenumber" name="L110" href="#L110">110</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForMapWithDefault_<strong class="jxr_keyword">null</strong>() {
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     ImmutableMap&lt;String, Integer&gt; map = ImmutableMap.of(<span class="jxr_string">"One"</span>, 1);
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     Function&lt;String, Integer&gt; function = Functions.forMap(map, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L113" href="#L113">113</a> 
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     assertEquals((Integer) 1, function.apply(<span class="jxr_string">"One"</span>));
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     assertNull(function.apply(<span class="jxr_string">"Two"</span>));
<a class="jxr_linenumber" name="L116" href="#L116">116</a> 
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     <em class="jxr_comment">// check basic sanity of equals and hashCode</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         .addEqualityGroup(function)
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         .addEqualityGroup(Functions.forMap(map, 1))
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         .testEquals();
<a class="jxr_linenumber" name="L122" href="#L122">122</a>   }
<a class="jxr_linenumber" name="L123" href="#L123">123</a> 
<a class="jxr_linenumber" name="L124" href="#L124">124</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForMapWildCardWithDefault() {
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     Map&lt;String, Integer&gt; map = Maps.newHashMap();
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     map.put(<span class="jxr_string">"One"</span>, 1);
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     map.put(<span class="jxr_string">"Three"</span>, 3);
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     Number number = Double.valueOf(42);
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     Function&lt;String, Number&gt; function = Functions.forMap(map, number);
<a class="jxr_linenumber" name="L130" href="#L130">130</a> 
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     assertEquals(1, function.apply(<span class="jxr_string">"One"</span>).intValue());
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     assertEquals(number, function.apply(<span class="jxr_string">"Two"</span>));
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     assertEquals(3L, function.apply(<span class="jxr_string">"Three"</span>).longValue());
<a class="jxr_linenumber" name="L134" href="#L134">134</a>   }
<a class="jxr_linenumber" name="L135" href="#L135">135</a> 
<a class="jxr_linenumber" name="L136" href="#L136">136</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testComposition() {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     Map&lt;String, Integer&gt; mJapaneseToInteger = Maps.newHashMap();
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     mJapaneseToInteger.put(<span class="jxr_string">"Ichi"</span>, 1);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>     mJapaneseToInteger.put(<span class="jxr_string">"Ni"</span>, 2);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     mJapaneseToInteger.put(<span class="jxr_string">"San"</span>, 3);
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     Function&lt;String, Integer&gt; japaneseToInteger =
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         Functions.forMap(mJapaneseToInteger);
<a class="jxr_linenumber" name="L143" href="#L143">143</a> 
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     Map&lt;Integer, String&gt; mIntegerToSpanish = Maps.newHashMap();
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     mIntegerToSpanish.put(1, <span class="jxr_string">"Uno"</span>);
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     mIntegerToSpanish.put(3, <span class="jxr_string">"Tres"</span>);
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     mIntegerToSpanish.put(4, <span class="jxr_string">"Cuatro"</span>);
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     Function&lt;Integer, String&gt; integerToSpanish =
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         Functions.forMap(mIntegerToSpanish);
<a class="jxr_linenumber" name="L150" href="#L150">150</a> 
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     Function&lt;String, String&gt; japaneseToSpanish =
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         Functions.compose(integerToSpanish, japaneseToInteger);
<a class="jxr_linenumber" name="L153" href="#L153">153</a> 
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     assertEquals(<span class="jxr_string">"Uno"</span>, japaneseToSpanish.apply(<span class="jxr_string">"Ichi"</span>));
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L156" href="#L156">156</a>       japaneseToSpanish.apply(<span class="jxr_string">"Ni"</span>);
<a class="jxr_linenumber" name="L157" href="#L157">157</a>       fail();
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException e) {
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     }
<a class="jxr_linenumber" name="L160" href="#L160">160</a>     assertEquals(<span class="jxr_string">"Tres"</span>, japaneseToSpanish.apply(<span class="jxr_string">"San"</span>));
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>       japaneseToSpanish.apply(<span class="jxr_string">"Shi"</span>);
<a class="jxr_linenumber" name="L163" href="#L163">163</a>       fail();
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException e) {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     }
<a class="jxr_linenumber" name="L166" href="#L166">166</a> 
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         .addEqualityGroup(
<a class="jxr_linenumber" name="L169" href="#L169">169</a>             japaneseToSpanish,
<a class="jxr_linenumber" name="L170" href="#L170">170</a>             Functions.compose(integerToSpanish, japaneseToInteger))
<a class="jxr_linenumber" name="L171" href="#L171">171</a>         .addEqualityGroup(japaneseToInteger)
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         .addEqualityGroup(integerToSpanish)
<a class="jxr_linenumber" name="L173" href="#L173">173</a>         .addEqualityGroup(
<a class="jxr_linenumber" name="L174" href="#L174">174</a>             Functions.compose(japaneseToInteger, integerToSpanish))
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         .testEquals();
<a class="jxr_linenumber" name="L176" href="#L176">176</a>   }
<a class="jxr_linenumber" name="L177" href="#L177">177</a> 
<a class="jxr_linenumber" name="L178" href="#L178">178</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCompositionWildcard() {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>     Map&lt;String, Integer&gt; mapJapaneseToInteger = Maps.newHashMap();
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     Function&lt;String, Integer&gt; japaneseToInteger =
<a class="jxr_linenumber" name="L181" href="#L181">181</a>         Functions.forMap(mapJapaneseToInteger);
<a class="jxr_linenumber" name="L182" href="#L182">182</a> 
<a class="jxr_linenumber" name="L183" href="#L183">183</a>     Function&lt;Object, String&gt; numberToSpanish = Functions.constant(<span class="jxr_string">"Yo no se"</span>);
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>     Function&lt;String, String&gt; japaneseToSpanish =
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         Functions.compose(numberToSpanish, japaneseToInteger);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>   }
<a class="jxr_linenumber" name="L188" href="#L188">188</a> 
<a class="jxr_linenumber" name="L189" href="#L189">189</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/base/FunctionsTest.html">HashCodeFunction</a> <strong class="jxr_keyword">implements</strong> Function&lt;Object, Integer&gt; {
<a class="jxr_linenumber" name="L190" href="#L190">190</a>     @Override
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     <strong class="jxr_keyword">public</strong> Integer apply(Object o) {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>       <strong class="jxr_keyword">return</strong> (o == <strong class="jxr_keyword">null</strong>) ? 0 : o.hashCode();
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     }
<a class="jxr_linenumber" name="L194" href="#L194">194</a>   }
<a class="jxr_linenumber" name="L195" href="#L195">195</a> 
<a class="jxr_linenumber" name="L196" href="#L196">196</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testComposeOfFunctionsIsAssociative() {
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     Map&lt;Float, String&gt; m = ImmutableMap.of(
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         4.0f, <span class="jxr_string">"A"</span>, 3.0f, <span class="jxr_string">"B"</span>, 2.0f, <span class="jxr_string">"C"</span>, 1.0f, <span class="jxr_string">"D"</span>);
<a class="jxr_linenumber" name="L199" href="#L199">199</a>     Function&lt;? <strong class="jxr_keyword">super</strong> Integer, Boolean&gt; h = Functions.constant(Boolean.TRUE);
<a class="jxr_linenumber" name="L200" href="#L200">200</a>     Function&lt;? <strong class="jxr_keyword">super</strong> String, Integer&gt; g = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/base/FunctionsTest.html">HashCodeFunction</a>();
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     Function&lt;Float, String&gt; f = Functions.forMap(m, <span class="jxr_string">"F"</span>);
<a class="jxr_linenumber" name="L202" href="#L202">202</a> 
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     Function&lt;Float, Boolean&gt; c1 = Functions.compose(Functions.compose(h, g), f);
<a class="jxr_linenumber" name="L204" href="#L204">204</a>     Function&lt;Float, Boolean&gt; c2 = Functions.compose(h, Functions.compose(g, f));
<a class="jxr_linenumber" name="L205" href="#L205">205</a> 
<a class="jxr_linenumber" name="L206" href="#L206">206</a>     <em class="jxr_comment">// Might be nice (eventually) to have:</em>
<a class="jxr_linenumber" name="L207" href="#L207">207</a>     <em class="jxr_comment">//     assertEquals(c1, c2);</em>
<a class="jxr_linenumber" name="L208" href="#L208">208</a> 
<a class="jxr_linenumber" name="L209" href="#L209">209</a>     <em class="jxr_comment">// But for now, settle for this:</em>
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     assertEquals(c1.hashCode(), c2.hashCode());
<a class="jxr_linenumber" name="L211" href="#L211">211</a> 
<a class="jxr_linenumber" name="L212" href="#L212">212</a>     assertEquals(c1.apply(1.0f), c2.apply(1.0f));
<a class="jxr_linenumber" name="L213" href="#L213">213</a>     assertEquals(c1.apply(5.0f), c2.apply(5.0f));
<a class="jxr_linenumber" name="L214" href="#L214">214</a>   }
<a class="jxr_linenumber" name="L215" href="#L215">215</a> 
<a class="jxr_linenumber" name="L216" href="#L216">216</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testComposeOfPredicateAndFunctionIsAssociative() {
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     Map&lt;Float, String&gt; m = ImmutableMap.of(
<a class="jxr_linenumber" name="L218" href="#L218">218</a>         4.0f, <span class="jxr_string">"A"</span>, 3.0f, <span class="jxr_string">"B"</span>, 2.0f, <span class="jxr_string">"C"</span>, 1.0f, <span class="jxr_string">"D"</span>);
<a class="jxr_linenumber" name="L219" href="#L219">219</a>     Predicate&lt;? <strong class="jxr_keyword">super</strong> Integer&gt; h = Predicates.equalTo(42);
<a class="jxr_linenumber" name="L220" href="#L220">220</a>     Function&lt;? <strong class="jxr_keyword">super</strong> String, Integer&gt; g = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/base/FunctionsTest.html">HashCodeFunction</a>();
<a class="jxr_linenumber" name="L221" href="#L221">221</a>     Function&lt;Float, String&gt; f = Functions.forMap(m, <span class="jxr_string">"F"</span>);
<a class="jxr_linenumber" name="L222" href="#L222">222</a> 
<a class="jxr_linenumber" name="L223" href="#L223">223</a>     Predicate&lt;Float&gt; p1 = Predicates.compose(Predicates.compose(h, g), f);
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     Predicate&lt;Float&gt; p2 = Predicates.compose(h, Functions.compose(g, f));
<a class="jxr_linenumber" name="L225" href="#L225">225</a> 
<a class="jxr_linenumber" name="L226" href="#L226">226</a>     <em class="jxr_comment">// Might be nice (eventually) to have:</em>
<a class="jxr_linenumber" name="L227" href="#L227">227</a>     <em class="jxr_comment">//     assertEquals(p1, p2);</em>
<a class="jxr_linenumber" name="L228" href="#L228">228</a> 
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     <em class="jxr_comment">// But for now, settle for this:</em>
<a class="jxr_linenumber" name="L230" href="#L230">230</a>     assertEquals(p1.hashCode(), p2.hashCode());
<a class="jxr_linenumber" name="L231" href="#L231">231</a> 
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     assertEquals(p1.apply(1.0f), p2.apply(1.0f));
<a class="jxr_linenumber" name="L233" href="#L233">233</a>     assertEquals(p1.apply(5.0f), p2.apply(5.0f));
<a class="jxr_linenumber" name="L234" href="#L234">234</a>   }
<a class="jxr_linenumber" name="L235" href="#L235">235</a> 
<a class="jxr_linenumber" name="L236" href="#L236">236</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForPredicate() {
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     Function&lt;Object, Boolean&gt; alwaysTrue =
<a class="jxr_linenumber" name="L238" href="#L238">238</a>         Functions.forPredicate(Predicates.alwaysTrue());
<a class="jxr_linenumber" name="L239" href="#L239">239</a>     Function&lt;Object, Boolean&gt; alwaysFalse =
<a class="jxr_linenumber" name="L240" href="#L240">240</a>         Functions.forPredicate(Predicates.alwaysFalse());
<a class="jxr_linenumber" name="L241" href="#L241">241</a> 
<a class="jxr_linenumber" name="L242" href="#L242">242</a>     assertTrue(alwaysTrue.apply(0));
<a class="jxr_linenumber" name="L243" href="#L243">243</a>     assertFalse(alwaysFalse.apply(0));
<a class="jxr_linenumber" name="L244" href="#L244">244</a> 
<a class="jxr_linenumber" name="L245" href="#L245">245</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         .addEqualityGroup(
<a class="jxr_linenumber" name="L247" href="#L247">247</a>             alwaysTrue, Functions.forPredicate(Predicates.alwaysTrue()))
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         .addEqualityGroup(alwaysFalse)
<a class="jxr_linenumber" name="L249" href="#L249">249</a>         .addEqualityGroup(Functions.identity())
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         .testEquals();
<a class="jxr_linenumber" name="L251" href="#L251">251</a>   }
<a class="jxr_linenumber" name="L252" href="#L252">252</a> 
<a class="jxr_linenumber" name="L253" href="#L253">253</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConstant() {
<a class="jxr_linenumber" name="L254" href="#L254">254</a>     Function&lt;Object, Object&gt; f = Functions.&lt;Object&gt;constant(<span class="jxr_string">"correct"</span>);
<a class="jxr_linenumber" name="L255" href="#L255">255</a>     assertEquals(<span class="jxr_string">"correct"</span>, f.apply(<strong class="jxr_keyword">new</strong> Object()));
<a class="jxr_linenumber" name="L256" href="#L256">256</a>     assertEquals(<span class="jxr_string">"correct"</span>, f.apply(<strong class="jxr_keyword">null</strong>));
<a class="jxr_linenumber" name="L257" href="#L257">257</a> 
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     Function&lt;Object, String&gt; g = Functions.constant(<strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     assertEquals(<strong class="jxr_keyword">null</strong>, g.apply(2));
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     assertEquals(<strong class="jxr_keyword">null</strong>, g.apply(<strong class="jxr_keyword">null</strong>));
<a class="jxr_linenumber" name="L261" href="#L261">261</a> 
<a class="jxr_linenumber" name="L262" href="#L262">262</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L263" href="#L263">263</a>         .addEqualityGroup(f, Functions.constant(<span class="jxr_string">"correct"</span>))
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         .addEqualityGroup(Functions.constant(<span class="jxr_string">"incorrect"</span>))
<a class="jxr_linenumber" name="L265" href="#L265">265</a>         .addEqualityGroup(Functions.toStringFunction())
<a class="jxr_linenumber" name="L266" href="#L266">266</a>         .addEqualityGroup(g)
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         .testEquals();
<a class="jxr_linenumber" name="L268" href="#L268">268</a> 
<a class="jxr_linenumber" name="L269" href="#L269">269</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         .addEqualityGroup(g, Functions.constant(<strong class="jxr_keyword">null</strong>))
<a class="jxr_linenumber" name="L271" href="#L271">271</a>         .addEqualityGroup(Functions.constant(<span class="jxr_string">"incorrect"</span>))
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         .addEqualityGroup(Functions.toStringFunction())
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         .addEqualityGroup(f)
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         .testEquals();
<a class="jxr_linenumber" name="L275" href="#L275">275</a>   }
<a class="jxr_linenumber" name="L276" href="#L276">276</a> 
<a class="jxr_linenumber" name="L277" href="#L277">277</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/collect/MultimapsTest.html">CountingSupplier</a>
<a class="jxr_linenumber" name="L278" href="#L278">278</a>       <strong class="jxr_keyword">implements</strong> Supplier&lt;Integer&gt;, Serializable {
<a class="jxr_linenumber" name="L279" href="#L279">279</a> 
<a class="jxr_linenumber" name="L280" href="#L280">280</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 0;
<a class="jxr_linenumber" name="L281" href="#L281">281</a> 
<a class="jxr_linenumber" name="L282" href="#L282">282</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> value;
<a class="jxr_linenumber" name="L283" href="#L283">283</a> 
<a class="jxr_linenumber" name="L284" href="#L284">284</a>     @Override
<a class="jxr_linenumber" name="L285" href="#L285">285</a>     <strong class="jxr_keyword">public</strong> Integer get() {
<a class="jxr_linenumber" name="L286" href="#L286">286</a>       <strong class="jxr_keyword">return</strong> ++value;
<a class="jxr_linenumber" name="L287" href="#L287">287</a>     }
<a class="jxr_linenumber" name="L288" href="#L288">288</a> 
<a class="jxr_linenumber" name="L289" href="#L289">289</a>     @Override
<a class="jxr_linenumber" name="L290" href="#L290">290</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> equals(Object obj) {
<a class="jxr_linenumber" name="L291" href="#L291">291</a>       <strong class="jxr_keyword">if</strong> (obj instanceof CountingSupplier) {
<a class="jxr_linenumber" name="L292" href="#L292">292</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>.value == ((CountingSupplier) obj).value;
<a class="jxr_linenumber" name="L293" href="#L293">293</a>       }
<a class="jxr_linenumber" name="L294" href="#L294">294</a>       <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     }
<a class="jxr_linenumber" name="L296" href="#L296">296</a> 
<a class="jxr_linenumber" name="L297" href="#L297">297</a>     @Override
<a class="jxr_linenumber" name="L298" href="#L298">298</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> hashCode() {
<a class="jxr_linenumber" name="L299" href="#L299">299</a>       <strong class="jxr_keyword">return</strong> value;
<a class="jxr_linenumber" name="L300" href="#L300">300</a>     }
<a class="jxr_linenumber" name="L301" href="#L301">301</a>   }
<a class="jxr_linenumber" name="L302" href="#L302">302</a> 
<a class="jxr_linenumber" name="L303" href="#L303">303</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForSupplier() {
<a class="jxr_linenumber" name="L304" href="#L304">304</a>     Supplier&lt;Integer&gt; supplier = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/collect/MultimapsTest.html">CountingSupplier</a>();
<a class="jxr_linenumber" name="L305" href="#L305">305</a>     Function&lt;Object, Integer&gt; function = Functions.forSupplier(supplier);
<a class="jxr_linenumber" name="L306" href="#L306">306</a> 
<a class="jxr_linenumber" name="L307" href="#L307">307</a>     assertEquals(1, (<strong class="jxr_keyword">int</strong>) function.apply(<strong class="jxr_keyword">null</strong>));
<a class="jxr_linenumber" name="L308" href="#L308">308</a>     assertEquals(2, (<strong class="jxr_keyword">int</strong>) function.apply(<span class="jxr_string">"foo"</span>));
<a class="jxr_linenumber" name="L309" href="#L309">309</a> 
<a class="jxr_linenumber" name="L310" href="#L310">310</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L311" href="#L311">311</a>         .addEqualityGroup(function, Functions.forSupplier(supplier))
<a class="jxr_linenumber" name="L312" href="#L312">312</a>         .addEqualityGroup(Functions.forSupplier(<strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/collect/MultimapsTest.html">CountingSupplier</a>()))
<a class="jxr_linenumber" name="L313" href="#L313">313</a>         .addEqualityGroup(Functions.forSupplier(Suppliers.ofInstance(12)))
<a class="jxr_linenumber" name="L314" href="#L314">314</a>         .addEqualityGroup(Functions.toStringFunction())
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         .testEquals();
<a class="jxr_linenumber" name="L316" href="#L316">316</a>   }
<a class="jxr_linenumber" name="L317" href="#L317">317</a> 
<a class="jxr_linenumber" name="L318" href="#L318">318</a> }
<a class="jxr_linenumber" name="L319" href="#L319">319</a> 
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
