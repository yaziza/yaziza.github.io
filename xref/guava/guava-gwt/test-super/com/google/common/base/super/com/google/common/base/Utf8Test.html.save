<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Utf8Test xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../../../../../apidocs/com/google/common/base/Utf8Test.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2013 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.base;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <em class="jxr_javadoccomment"> * Unit tests for {@link Utf8}.</em>
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <em class="jxr_javadoccomment"> * @author Jon Perlow</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment"> * @author Martin Buchholz</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> * @author Clément Roux</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/base/Utf8Test.html">Utf8Test</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L32" href="#L32">32</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEncodedLength_validStrings() {
<a class="jxr_linenumber" name="L33" href="#L33">33</a>      assertEquals(0, Utf8.encodedLength(<span class="jxr_string">""</span>));
<a class="jxr_linenumber" name="L34" href="#L34">34</a>      assertEquals(11, Utf8.encodedLength(<span class="jxr_string">"Hello world"</span>));
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      assertEquals(8, Utf8.encodedLength(<span class="jxr_string">"Résumé"</span>));
<a class="jxr_linenumber" name="L36" href="#L36">36</a>      assertEquals(461, Utf8.encodedLength(<span class="jxr_string">"威廉·莎士比亞（William Shakespeare，"</span>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>          + <span class="jxr_string">"1564年4月26號—1616年4月23號[1]）係隻英國嗰演員、劇作家同詩人，"</span>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>          + <span class="jxr_string">"有時間佢簡稱莎翁；中國清末民初哈拕翻譯做舌克斯毕、沙斯皮耳、筛斯比耳、"</span>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>          + <span class="jxr_string">"莎基斯庇尔、索士比尔、夏克思芘尔、希哀苦皮阿、叶斯壁、沙克皮尔、"</span>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>          + <span class="jxr_string">"狹斯丕爾。[2]莎士比亞編寫過好多作品，佢嗰劇作響西洋文學好有影響，"</span>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>          + <span class="jxr_string">"哈都拕人翻譯做好多話。"</span>));
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <em class="jxr_comment">// A surrogate pair</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      assertEquals(4, Utf8.encodedLength(
<a class="jxr_linenumber" name="L44" href="#L44">44</a>          newString(Character.MIN_HIGH_SURROGATE, Character.MIN_LOW_SURROGATE)));
<a class="jxr_linenumber" name="L45" href="#L45">45</a>    }
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEncodedLength_invalidStrings() {
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      testEncodedLengthFails(newString(Character.MIN_HIGH_SURROGATE), 0);
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      testEncodedLengthFails(<span class="jxr_string">"foobar"</span> + newString(Character.MIN_HIGH_SURROGATE), 6);
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      testEncodedLengthFails(newString(Character.MIN_LOW_SURROGATE), 0);
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      testEncodedLengthFails(<span class="jxr_string">"foobar"</span> + newString(Character.MIN_LOW_SURROGATE), 6);
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      testEncodedLengthFails(
<a class="jxr_linenumber" name="L53" href="#L53">53</a>          newString(
<a class="jxr_linenumber" name="L54" href="#L54">54</a>              Character.MIN_HIGH_SURROGATE,
<a class="jxr_linenumber" name="L55" href="#L55">55</a>              Character.MIN_HIGH_SURROGATE), 0);
<a class="jxr_linenumber" name="L56" href="#L56">56</a>    }
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  
<a class="jxr_linenumber" name="L58" href="#L58">58</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> testEncodedLengthFails(String invalidString,
<a class="jxr_linenumber" name="L59" href="#L59">59</a>        <strong class="jxr_keyword">int</strong> invalidCodePointIndex) {
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L61" href="#L61">61</a>        Utf8.encodedLength(invalidString);
<a class="jxr_linenumber" name="L62" href="#L62">62</a>        fail();
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>        assertEquals(<span class="jxr_string">"Unpaired surrogate at index "</span> + invalidCodePointIndex,
<a class="jxr_linenumber" name="L65" href="#L65">65</a>            expected.getMessage());
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      }
<a class="jxr_linenumber" name="L67" href="#L67">67</a>    }
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  
<a class="jxr_linenumber" name="L69" href="#L69">69</a>    <em class="jxr_comment">// 128 - [chars 0x0000 to 0x007f]</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> ONE_BYTE_ROUNDTRIPPABLE_CHARACTERS =
<a class="jxr_linenumber" name="L71" href="#L71">71</a>        0x007f - 0x0000 + 1;
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  
<a class="jxr_linenumber" name="L73" href="#L73">73</a>    <em class="jxr_comment">// 128</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT =
<a class="jxr_linenumber" name="L75" href="#L75">75</a>        ONE_BYTE_ROUNDTRIPPABLE_CHARACTERS;
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  
<a class="jxr_linenumber" name="L77" href="#L77">77</a>    <em class="jxr_comment">// 1920 [chars 0x0080 to 0x07FF]</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> TWO_BYTE_ROUNDTRIPPABLE_CHARACTERS =
<a class="jxr_linenumber" name="L79" href="#L79">79</a>        0x07FF - 0x0080 + 1;
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>    <em class="jxr_comment">// 18,304</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> EXPECTED_TWO_BYTE_ROUNDTRIPPABLE_COUNT =
<a class="jxr_linenumber" name="L83" href="#L83">83</a>        <em class="jxr_comment">// Both bytes are one byte characters</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>        (<strong class="jxr_keyword">long</strong>) Math.pow(EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT, 2) +
<a class="jxr_linenumber" name="L85" href="#L85">85</a>        <em class="jxr_comment">// The possible number of two byte characters</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>        TWO_BYTE_ROUNDTRIPPABLE_CHARACTERS;
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    <em class="jxr_comment">// 2048</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> THREE_BYTE_SURROGATES = 2 * 1024;
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>    <em class="jxr_comment">// 61,440 [chars 0x0800 to 0xFFFF, minus surrogates]</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> THREE_BYTE_ROUNDTRIPPABLE_CHARACTERS =
<a class="jxr_linenumber" name="L93" href="#L93">93</a>        0xFFFF - 0x0800 + 1 - THREE_BYTE_SURROGATES;
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  
<a class="jxr_linenumber" name="L95" href="#L95">95</a>    <em class="jxr_comment">// 2,650,112</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> EXPECTED_THREE_BYTE_ROUNDTRIPPABLE_COUNT =
<a class="jxr_linenumber" name="L97" href="#L97">97</a>        <em class="jxr_comment">// All one byte characters</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>        (<strong class="jxr_keyword">long</strong>) Math.pow(EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT, 3) +
<a class="jxr_linenumber" name="L99" href="#L99">99</a>        <em class="jxr_comment">// One two byte character and a one byte character</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a>       2 * TWO_BYTE_ROUNDTRIPPABLE_CHARACTERS *
<a class="jxr_linenumber" name="L101" href="#L101">101</a>           ONE_BYTE_ROUNDTRIPPABLE_CHARACTERS +
<a class="jxr_linenumber" name="L102" href="#L102">102</a>        <em class="jxr_comment">// Three byte characters</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a>       THREE_BYTE_ROUNDTRIPPABLE_CHARACTERS;
<a class="jxr_linenumber" name="L104" href="#L104">104</a> 
<a class="jxr_linenumber" name="L105" href="#L105">105</a>   <em class="jxr_comment">// 1,048,576 [chars 0x10000L to 0x10FFFF]</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> FOUR_BYTE_ROUNDTRIPPABLE_CHARACTERS =
<a class="jxr_linenumber" name="L107" href="#L107">107</a>       0x10FFFF - 0x10000L + 1;
<a class="jxr_linenumber" name="L108" href="#L108">108</a> 
<a class="jxr_linenumber" name="L109" href="#L109">109</a>   <em class="jxr_comment">// 289,571,839</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> EXPECTED_FOUR_BYTE_ROUNDTRIPPABLE_COUNT =
<a class="jxr_linenumber" name="L111" href="#L111">111</a>       <em class="jxr_comment">// All one byte characters</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a>       (<strong class="jxr_keyword">long</strong>) Math.pow(EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT, 4) +
<a class="jxr_linenumber" name="L113" href="#L113">113</a>       <em class="jxr_comment">// One and three byte characters</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a>       2 * THREE_BYTE_ROUNDTRIPPABLE_CHARACTERS *
<a class="jxr_linenumber" name="L115" href="#L115">115</a>           ONE_BYTE_ROUNDTRIPPABLE_CHARACTERS +
<a class="jxr_linenumber" name="L116" href="#L116">116</a>       <em class="jxr_comment">// Two two byte characters</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a>       TWO_BYTE_ROUNDTRIPPABLE_CHARACTERS * TWO_BYTE_ROUNDTRIPPABLE_CHARACTERS +
<a class="jxr_linenumber" name="L118" href="#L118">118</a>       <em class="jxr_comment">// Permutations of one and two byte characters</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a>       3 * TWO_BYTE_ROUNDTRIPPABLE_CHARACTERS *
<a class="jxr_linenumber" name="L120" href="#L120">120</a>           ONE_BYTE_ROUNDTRIPPABLE_CHARACTERS *
<a class="jxr_linenumber" name="L121" href="#L121">121</a>           ONE_BYTE_ROUNDTRIPPABLE_CHARACTERS +
<a class="jxr_linenumber" name="L122" href="#L122">122</a>       <em class="jxr_comment">// Four byte characters</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a>       FOUR_BYTE_ROUNDTRIPPABLE_CHARACTERS;
<a class="jxr_linenumber" name="L124" href="#L124">124</a> 
<a class="jxr_linenumber" name="L125" href="#L125">125</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">   * Tests that round tripping of a sample of four byte permutations work.</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment">   * All permutations are prohibitively expensive to test for automated runs.</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment">   * This method tests specific four-byte cases.</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIsWellFormed_4BytesSamples() {
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     <em class="jxr_comment">// Valid 4 byte.</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     assertWellFormed(0xF0, 0xA4, 0xAD, 0xA2);
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     <em class="jxr_comment">// Bad trailing bytes</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a>     assertNotWellFormed(0xF0, 0xA4, 0xAD, 0x7F);
<a class="jxr_linenumber" name="L135" href="#L135">135</a>     assertNotWellFormed(0xF0, 0xA4, 0xAD, 0xC0);
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     <em class="jxr_comment">// Special cases for byte2</em>
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     assertNotWellFormed(0xF0, 0x8F, 0xAD, 0xA2);
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     assertNotWellFormed(0xF4, 0x90, 0xAD, 0xA2);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>   }
<a class="jxr_linenumber" name="L140" href="#L140">140</a> 
<a class="jxr_linenumber" name="L141" href="#L141">141</a>   <em class="jxr_javadoccomment">/** Tests some hard-coded test cases. */</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSomeSequences() {
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     <em class="jxr_comment">// Empty</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     assertWellFormed();
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     <em class="jxr_comment">// One-byte characters, including control characters</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     assertWellFormed(0x00, 0x61, 0x62, 0x63, 0x7F); <em class="jxr_comment">// "\u0000abc\u007f"</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     <em class="jxr_comment">// Two-byte characters</em>
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     assertWellFormed(0xC2, 0xA2, 0xC2, 0xA2); <em class="jxr_comment">// "\u00a2\u00a2"</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     <em class="jxr_comment">// Three-byte characters</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     assertWellFormed(0xc8, 0x8a, 0x63, 0xc8, 0x8a, 0x63); <em class="jxr_comment">// "\u020ac\u020ac"</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     <em class="jxr_comment">// Four-byte characters</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     <em class="jxr_comment">// "\u024B62\u024B62"</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a>     assertWellFormed(0xc9, 0x8b, 0x36, 0x32, 0xc9, 0x8b, 0x36, 0x32);
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     <em class="jxr_comment">// Mixed string</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     <em class="jxr_comment">// "a\u020ac\u00a2b&#92;&#92;u024B62u020acc\u00a2de\u024B62"</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     assertWellFormed(0x61, 0xc8, 0x8a, 0x63, 0xc2, 0xa2, 0x62, 0x5c, 0x75, 0x30,
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         0x32, 0x34, 0x42, 0x36, 0x32, 0x75, 0x30, 0x32, 0x30, 0x61, 0x63, 0x63,
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         0xc2, 0xa2, 0x64, 0x65, 0xc9, 0x8b, 0x36, 0x32);
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     <em class="jxr_comment">// Not a valid string</em>
<a class="jxr_linenumber" name="L160" href="#L160">160</a>     assertNotWellFormed(-1, 0, -1, 0);
<a class="jxr_linenumber" name="L161" href="#L161">161</a>   }
<a class="jxr_linenumber" name="L162" href="#L162">162</a> 
<a class="jxr_linenumber" name="L163" href="#L163">163</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testShardsHaveExpectedRoundTrippables() {
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     <em class="jxr_comment">// A sanity check.</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     <strong class="jxr_keyword">long</strong> actual = 0;
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">long</strong> expected : generateFourByteShardsExpectedRunnables()) {
<a class="jxr_linenumber" name="L167" href="#L167">167</a>       actual += expected;
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     }
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     assertEquals(EXPECTED_FOUR_BYTE_ROUNDTRIPPABLE_COUNT, actual);
<a class="jxr_linenumber" name="L170" href="#L170">170</a>   }
<a class="jxr_linenumber" name="L171" href="#L171">171</a> 
<a class="jxr_linenumber" name="L172" href="#L172">172</a>   <strong class="jxr_keyword">private</strong> String newString(<strong class="jxr_keyword">char</strong>... chars) {
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> String(chars);
<a class="jxr_linenumber" name="L174" href="#L174">174</a>   }
<a class="jxr_linenumber" name="L175" href="#L175">175</a> 
<a class="jxr_linenumber" name="L176" href="#L176">176</a>   <strong class="jxr_keyword">private</strong> byte[] toByteArray(<strong class="jxr_keyword">int</strong>... bytes) {
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     byte[] realBytes = <strong class="jxr_keyword">new</strong> byte[bytes.length];
<a class="jxr_linenumber" name="L178" href="#L178">178</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; bytes.length; i++) {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>       realBytes[i] = (byte) bytes[i];
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     }
<a class="jxr_linenumber" name="L181" href="#L181">181</a>     <strong class="jxr_keyword">return</strong> realBytes;
<a class="jxr_linenumber" name="L182" href="#L182">182</a>   }
<a class="jxr_linenumber" name="L183" href="#L183">183</a> 
<a class="jxr_linenumber" name="L184" href="#L184">184</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> assertWellFormed(<strong class="jxr_keyword">int</strong>... bytes) {
<a class="jxr_linenumber" name="L185" href="#L185">185</a>     assertTrue(Utf8.isWellFormed(toByteArray(bytes)));
<a class="jxr_linenumber" name="L186" href="#L186">186</a>   }
<a class="jxr_linenumber" name="L187" href="#L187">187</a> 
<a class="jxr_linenumber" name="L188" href="#L188">188</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> assertNotWellFormed(<strong class="jxr_keyword">int</strong>... bytes) {
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     assertFalse(Utf8.isWellFormed(toByteArray(bytes)));
<a class="jxr_linenumber" name="L190" href="#L190">190</a>   }
<a class="jxr_linenumber" name="L191" href="#L191">191</a> 
<a class="jxr_linenumber" name="L192" href="#L192">192</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">long</strong>[] generateFourByteShardsExpectedRunnables() {
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     <strong class="jxr_keyword">long</strong>[] expected = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[128];
<a class="jxr_linenumber" name="L194" href="#L194">194</a>     <em class="jxr_comment">// 0-63 are all 5300224</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt;= 63; i++) {
<a class="jxr_linenumber" name="L196" href="#L196">196</a>       expected[i] = 5300224;
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     }
<a class="jxr_linenumber" name="L198" href="#L198">198</a>     <em class="jxr_comment">// 97-111 are all 2342912</em>
<a class="jxr_linenumber" name="L199" href="#L199">199</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 97; i &lt;= 111; i++) {
<a class="jxr_linenumber" name="L200" href="#L200">200</a>      expected[i] = 2342912;
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     }
<a class="jxr_linenumber" name="L202" href="#L202">202</a>     <em class="jxr_comment">// 113-117 are all 1048576</em>
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 113; i &lt;= 117; i++) {
<a class="jxr_linenumber" name="L204" href="#L204">204</a>       expected[i] = 1048576;
<a class="jxr_linenumber" name="L205" href="#L205">205</a>     }
<a class="jxr_linenumber" name="L206" href="#L206">206</a>     <em class="jxr_comment">// One offs</em>
<a class="jxr_linenumber" name="L207" href="#L207">207</a>     expected[112] = 786432;
<a class="jxr_linenumber" name="L208" href="#L208">208</a>     expected[118] = 786432;
<a class="jxr_linenumber" name="L209" href="#L209">209</a>     expected[119] = 1048576;
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     expected[120] = 458752;
<a class="jxr_linenumber" name="L211" href="#L211">211</a>     expected[121] = 524288;
<a class="jxr_linenumber" name="L212" href="#L212">212</a>     expected[122] = 65536;
<a class="jxr_linenumber" name="L213" href="#L213">213</a>     <em class="jxr_comment">// Anything not assigned was the default 0.</em>
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     <strong class="jxr_keyword">return</strong> expected;
<a class="jxr_linenumber" name="L215" href="#L215">215</a>   }
<a class="jxr_linenumber" name="L216" href="#L216">216</a> }
<a class="jxr_linenumber" name="L217" href="#L217">217</a> 
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
