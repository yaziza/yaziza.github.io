<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>MonitorBasedArrayBlockingQueue xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../apidocs/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2010 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.util.concurrent;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ObjectArrays;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.AbstractQueue;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> java.util.ConcurrentModificationException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> java.util.Iterator;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> java.util.NoSuchElementException;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.BlockingQueue;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.TimeUnit;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> javax.annotation.Nullable;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * A bounded {@linkplain BlockingQueue blocking queue} backed by an</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * array.  This queue orders elements FIFO (first-in-first-out).  The</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * &lt;em&gt;head&lt;/em&gt; of the queue is that element that has been on the</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * queue the longest time.  The &lt;em&gt;tail&lt;/em&gt; of the queue is that</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * element that has been on the queue the shortest time. New elements</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * are inserted at the tail of the queue, and the queue retrieval</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * operations obtain elements at the head of the queue.</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;This is a classic &amp;quot;bounded buffer&amp;quot;, in which a</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * fixed-sized array holds elements inserted by producers and</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * extracted by consumers.  Once created, the capacity cannot be</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * increased.  Attempts to &lt;tt&gt;put&lt;/tt&gt; an element into a full queue</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * will result in the operation blocking; attempts to &lt;tt&gt;take&lt;/tt&gt; an</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * element from an empty queue will similarly block.</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> * &lt;p&gt; This class supports an optional fairness policy for ordering</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> * waiting producer and consumer threads.  By default, this ordering</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> * is not guaranteed. However, a queue constructed with fairness set</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> * to &lt;tt&gt;true&lt;/tt&gt; grants threads access in FIFO order. Fairness</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> * generally decreases throughput but reduces variability and avoids</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> * starvation.</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;This class and its iterator implement all of the</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment"> * &lt;em&gt;optional&lt;/em&gt; methods of the {@link Collection} and {@link</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment"> * Iterator} interfaces.</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment"> * @author Doug Lea</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment"> * @author Justin T. Sampson</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment"> * @param &lt;E&gt; the type of elements held in this collection</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> MonitorBasedArrayBlockingQueue&lt;E&gt; <strong class="jxr_keyword">extends</strong> AbstractQueue&lt;E&gt;
<a class="jxr_linenumber" name="L63" href="#L63">63</a>          <strong class="jxr_keyword">implements</strong> BlockingQueue&lt;E&gt; {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      <em class="jxr_comment">// Based on revision 1.58 of ArrayBlockingQueue by Doug Lea, from</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      <em class="jxr_comment">// http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      <em class="jxr_javadoccomment">/** The queued items  */</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      <strong class="jxr_keyword">final</strong> E[] items;
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <em class="jxr_javadoccomment">/** items index for next take, poll or remove */</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <strong class="jxr_keyword">int</strong> takeIndex;
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      <em class="jxr_javadoccomment">/** items index for next put, offer, or add. */</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      <strong class="jxr_keyword">int</strong> putIndex;
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      <em class="jxr_javadoccomment">/** Number of items in the queue */</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> count;
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_comment">     * Concurrency control uses the classic two-condition algorithm</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_comment">     * found in any textbook.</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      <em class="jxr_javadoccomment">/** Monitor guarding all access */</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor;
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      <em class="jxr_javadoccomment">/** Guard for waiting takes */</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> Monitor.Guard notEmpty;
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      <em class="jxr_javadoccomment">/** Guard for waiting puts */</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> Monitor.Guard notFull;
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      <em class="jxr_comment">// Internal helper methods</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  
<a class="jxr_linenumber" name="L93" href="#L93">93</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">     * Circularly increment i.</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> inc(<strong class="jxr_keyword">int</strong> i) {
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          <strong class="jxr_keyword">return</strong> (++i == items.length) ? 0 : i;
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      }
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <em class="jxr_javadoccomment">     * Inserts element at current put position, advances, and signals.</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment">     * Call only when occupying monitor.</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> insert(E x) {
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         items[putIndex] = x;
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         putIndex = inc(putIndex);
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         ++count;
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     }
<a class="jxr_linenumber" name="L109" href="#L109">109</a> 
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <em class="jxr_javadoccomment">     * Extracts element at current take position, advances, and signals.</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">     * Call only when occupying monitor.</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     <strong class="jxr_keyword">private</strong> E extract() {
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         <strong class="jxr_keyword">final</strong> E[] items = <strong class="jxr_keyword">this</strong>.items;
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         E x = items[takeIndex];
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         items[takeIndex] = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         takeIndex = inc(takeIndex);
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         --count;
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         <strong class="jxr_keyword">return</strong> x;
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     }
<a class="jxr_linenumber" name="L122" href="#L122">122</a> 
<a class="jxr_linenumber" name="L123" href="#L123">123</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     * Utility for remove and iterator.remove: Delete item at position i.</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">     * Call only when occupying monitor.</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     <strong class="jxr_keyword">void</strong> removeAt(<strong class="jxr_keyword">int</strong> i) {
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <strong class="jxr_keyword">final</strong> E[] items = <strong class="jxr_keyword">this</strong>.items;
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <em class="jxr_comment">// if removing front item, just advance</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         <strong class="jxr_keyword">if</strong> (i == takeIndex) {
<a class="jxr_linenumber" name="L131" href="#L131">131</a>             items[takeIndex] = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L132" href="#L132">132</a>             takeIndex = inc(takeIndex);
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>             <em class="jxr_comment">// slide over all others up through putIndex.</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a>             <strong class="jxr_keyword">for</strong> (;;) {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>                 <strong class="jxr_keyword">int</strong> nexti = inc(i);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                 <strong class="jxr_keyword">if</strong> (nexti != putIndex) {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                     items[i] = items[nexti];
<a class="jxr_linenumber" name="L139" href="#L139">139</a>                     i = nexti;
<a class="jxr_linenumber" name="L140" href="#L140">140</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>                     items[i] = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L142" href="#L142">142</a>                     putIndex = i;
<a class="jxr_linenumber" name="L143" href="#L143">143</a>                     <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                 }
<a class="jxr_linenumber" name="L145" href="#L145">145</a>             }
<a class="jxr_linenumber" name="L146" href="#L146">146</a>         }
<a class="jxr_linenumber" name="L147" href="#L147">147</a>         --count;
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     }
<a class="jxr_linenumber" name="L149" href="#L149">149</a> 
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a> <em class="jxr_javadoccomment">     * Creates an &lt;tt&gt;MonitorBasedArrayBlockingQueue&lt;/tt&gt; with the given (fixed)</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment">     * capacity and default access policy.</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">     * @param capacity the capacity of this queue</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">     * @throws IllegalArgumentException if &lt;tt&gt;capacity&lt;/tt&gt; is less than 1</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.html">MonitorBasedArrayBlockingQueue</a>(<strong class="jxr_keyword">int</strong> capacity) {
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         <strong class="jxr_keyword">this</strong>(capacity, false);
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     }
<a class="jxr_linenumber" name="L160" href="#L160">160</a> 
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L162" href="#L162">162</a> <em class="jxr_javadoccomment">     * Creates an &lt;tt&gt;MonitorBasedArrayBlockingQueue&lt;/tt&gt; with the given (fixed)</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a> <em class="jxr_javadoccomment">     * capacity and the specified access policy.</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a> <em class="jxr_javadoccomment">     * @param capacity the capacity of this queue</em>
<a class="jxr_linenumber" name="L166" href="#L166">166</a> <em class="jxr_javadoccomment">     * @param fair if &lt;tt&gt;true&lt;/tt&gt; then queue accesses for threads blocked</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a> <em class="jxr_javadoccomment">     *        on insertion or removal, are processed in FIFO order;</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a> <em class="jxr_javadoccomment">     *        if &lt;tt&gt;false&lt;/tt&gt; the access order is unspecified.</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a> <em class="jxr_javadoccomment">     * @throws IllegalArgumentException if &lt;tt&gt;capacity&lt;/tt&gt; is less than 1</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.html">MonitorBasedArrayBlockingQueue</a>(<strong class="jxr_keyword">int</strong> capacity, <strong class="jxr_keyword">boolean</strong> fair) {
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         <strong class="jxr_keyword">if</strong> (capacity &lt;= 0)
<a class="jxr_linenumber" name="L173" href="#L173">173</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalArgumentException();
<a class="jxr_linenumber" name="L174" href="#L174">174</a>         <strong class="jxr_keyword">this</strong>.items = newEArray(capacity);
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         monitor = <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a>(fair);
<a class="jxr_linenumber" name="L176" href="#L176">176</a>         notEmpty = <strong class="jxr_keyword">new</strong> Monitor.Guard(monitor) {
<a class="jxr_linenumber" name="L177" href="#L177">177</a>             @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> isSatisfied() {
<a class="jxr_linenumber" name="L178" href="#L178">178</a>                 <strong class="jxr_keyword">return</strong> count &gt; 0;
<a class="jxr_linenumber" name="L179" href="#L179">179</a>             }
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         };
<a class="jxr_linenumber" name="L181" href="#L181">181</a>         notFull = <strong class="jxr_keyword">new</strong> Monitor.Guard(monitor) {
<a class="jxr_linenumber" name="L182" href="#L182">182</a>             @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> isSatisfied() {
<a class="jxr_linenumber" name="L183" href="#L183">183</a>                 <strong class="jxr_keyword">return</strong> count &lt; items.length;
<a class="jxr_linenumber" name="L184" href="#L184">184</a>             }
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         };
<a class="jxr_linenumber" name="L186" href="#L186">186</a>     }
<a class="jxr_linenumber" name="L187" href="#L187">187</a> 
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     @SuppressWarnings(<span class="jxr_string">"unchecked"</span>) <em class="jxr_comment">// please don't try this home, kids</em>
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> &lt;E&gt; E[] newEArray(<strong class="jxr_keyword">int</strong> capacity) {
<a class="jxr_linenumber" name="L190" href="#L190">190</a>         <strong class="jxr_keyword">return</strong> (E[]) <strong class="jxr_keyword">new</strong> Object[capacity];
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     }
<a class="jxr_linenumber" name="L192" href="#L192">192</a> 
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a> <em class="jxr_javadoccomment">     * Creates an &lt;tt&gt;MonitorBasedArrayBlockingQueue&lt;/tt&gt; with the given (fixed)</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a> <em class="jxr_javadoccomment">     * capacity, the specified access policy and initially containing the</em>
<a class="jxr_linenumber" name="L196" href="#L196">196</a> <em class="jxr_javadoccomment">     * elements of the given collection,</em>
<a class="jxr_linenumber" name="L197" href="#L197">197</a> <em class="jxr_javadoccomment">     * added in traversal order of the collection's iterator.</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L199" href="#L199">199</a> <em class="jxr_javadoccomment">     * @param capacity the capacity of this queue</em>
<a class="jxr_linenumber" name="L200" href="#L200">200</a> <em class="jxr_javadoccomment">     * @param fair if &lt;tt&gt;true&lt;/tt&gt; then queue accesses for threads blocked</em>
<a class="jxr_linenumber" name="L201" href="#L201">201</a> <em class="jxr_javadoccomment">     *        on insertion or removal, are processed in FIFO order;</em>
<a class="jxr_linenumber" name="L202" href="#L202">202</a> <em class="jxr_javadoccomment">     *        if &lt;tt&gt;false&lt;/tt&gt; the access order is unspecified.</em>
<a class="jxr_linenumber" name="L203" href="#L203">203</a> <em class="jxr_javadoccomment">     * @param c the collection of elements to initially contain</em>
<a class="jxr_linenumber" name="L204" href="#L204">204</a> <em class="jxr_javadoccomment">     * @throws IllegalArgumentException if &lt;tt&gt;capacity&lt;/tt&gt; is less than</em>
<a class="jxr_linenumber" name="L205" href="#L205">205</a> <em class="jxr_javadoccomment">     *         &lt;tt&gt;c.size()&lt;/tt&gt;, or less than 1.</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a> <em class="jxr_javadoccomment">     * @throws NullPointerException if the specified collection or any</em>
<a class="jxr_linenumber" name="L207" href="#L207">207</a> <em class="jxr_javadoccomment">     *         of its elements are null</em>
<a class="jxr_linenumber" name="L208" href="#L208">208</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.html">MonitorBasedArrayBlockingQueue</a>(<strong class="jxr_keyword">int</strong> capacity, <strong class="jxr_keyword">boolean</strong> fair,
<a class="jxr_linenumber" name="L210" href="#L210">210</a>                               Collection&lt;? <strong class="jxr_keyword">extends</strong> E&gt; c) {
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         <strong class="jxr_keyword">this</strong>(capacity, fair);
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         <strong class="jxr_keyword">if</strong> (capacity &lt; c.size())
<a class="jxr_linenumber" name="L213" href="#L213">213</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalArgumentException();
<a class="jxr_linenumber" name="L214" href="#L214">214</a> 
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         <strong class="jxr_keyword">for</strong> (E e : c)
<a class="jxr_linenumber" name="L216" href="#L216">216</a>             add(e);
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     }
<a class="jxr_linenumber" name="L218" href="#L218">218</a> 
<a class="jxr_linenumber" name="L219" href="#L219">219</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L220" href="#L220">220</a> <em class="jxr_javadoccomment">     * Inserts the specified element at the tail of this queue if it is</em>
<a class="jxr_linenumber" name="L221" href="#L221">221</a> <em class="jxr_javadoccomment">     * possible to do so immediately without exceeding the queue's capacity,</em>
<a class="jxr_linenumber" name="L222" href="#L222">222</a> <em class="jxr_javadoccomment">     * returning &lt;tt&gt;true&lt;/tt&gt; upon success and throwing an</em>
<a class="jxr_linenumber" name="L223" href="#L223">223</a> <em class="jxr_javadoccomment">     * &lt;tt&gt;IllegalStateException&lt;/tt&gt; if this queue is full.</em>
<a class="jxr_linenumber" name="L224" href="#L224">224</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L225" href="#L225">225</a> <em class="jxr_javadoccomment">     * @param e the element to add</em>
<a class="jxr_linenumber" name="L226" href="#L226">226</a> <em class="jxr_javadoccomment">     * @return &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})</em>
<a class="jxr_linenumber" name="L227" href="#L227">227</a> <em class="jxr_javadoccomment">     * @throws IllegalStateException if this queue is full</em>
<a class="jxr_linenumber" name="L228" href="#L228">228</a> <em class="jxr_javadoccomment">     * @throws NullPointerException if the specified element is null</em>
<a class="jxr_linenumber" name="L229" href="#L229">229</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L230" href="#L230">230</a>     @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> add(E e) {
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">super</strong>.add(e);
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     }
<a class="jxr_linenumber" name="L233" href="#L233">233</a> 
<a class="jxr_linenumber" name="L234" href="#L234">234</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a> <em class="jxr_javadoccomment">     * Inserts the specified element at the tail of this queue if it is</em>
<a class="jxr_linenumber" name="L236" href="#L236">236</a> <em class="jxr_javadoccomment">     * possible to do so immediately without exceeding the queue's capacity,</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a> <em class="jxr_javadoccomment">     * returning &lt;tt&gt;true&lt;/tt&gt; upon success and &lt;tt&gt;false&lt;/tt&gt; if this queue</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a> <em class="jxr_javadoccomment">     * is full.  This method is generally preferable to method {@link #add},</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a> <em class="jxr_javadoccomment">     * which can fail to insert an element only by throwing an exception.</em>
<a class="jxr_linenumber" name="L240" href="#L240">240</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a> <em class="jxr_javadoccomment">     * @throws NullPointerException if the specified element is null</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a>     @Override
<a class="jxr_linenumber" name="L244" href="#L244">244</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> offer(E e) {
<a class="jxr_linenumber" name="L245" href="#L245">245</a>         <strong class="jxr_keyword">if</strong> (e == <strong class="jxr_keyword">null</strong>) <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NullPointerException();
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         <strong class="jxr_keyword">if</strong> (monitor.enterIf(notFull)) {
<a class="jxr_linenumber" name="L248" href="#L248">248</a>             <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L249" href="#L249">249</a>                 insert(e);
<a class="jxr_linenumber" name="L250" href="#L250">250</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L251" href="#L251">251</a>             } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L252" href="#L252">252</a>                 monitor.leave();
<a class="jxr_linenumber" name="L253" href="#L253">253</a>             }
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L255" href="#L255">255</a>           <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L256" href="#L256">256</a>         }
<a class="jxr_linenumber" name="L257" href="#L257">257</a>     }
<a class="jxr_linenumber" name="L258" href="#L258">258</a> 
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L260" href="#L260">260</a> <em class="jxr_javadoccomment">     * Inserts the specified element at the tail of this queue, waiting</em>
<a class="jxr_linenumber" name="L261" href="#L261">261</a> <em class="jxr_javadoccomment">     * for space to become available if the queue is full.</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L263" href="#L263">263</a> <em class="jxr_javadoccomment">     * @throws InterruptedException {@inheritDoc}</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a> <em class="jxr_javadoccomment">     * @throws NullPointerException {@inheritDoc}</em>
<a class="jxr_linenumber" name="L265" href="#L265">265</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L266" href="#L266">266</a>     @Override
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> put(E e) <strong class="jxr_keyword">throws</strong> InterruptedException {
<a class="jxr_linenumber" name="L268" href="#L268">268</a>         <strong class="jxr_keyword">if</strong> (e == <strong class="jxr_keyword">null</strong>) <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NullPointerException();
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         monitor.enterWhen(notFull);
<a class="jxr_linenumber" name="L271" href="#L271">271</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L272" href="#L272">272</a>             insert(e);
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L274" href="#L274">274</a>             monitor.leave();
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         }
<a class="jxr_linenumber" name="L276" href="#L276">276</a>     }
<a class="jxr_linenumber" name="L277" href="#L277">277</a> 
<a class="jxr_linenumber" name="L278" href="#L278">278</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L279" href="#L279">279</a> <em class="jxr_javadoccomment">     * Inserts the specified element at the tail of this queue, waiting</em>
<a class="jxr_linenumber" name="L280" href="#L280">280</a> <em class="jxr_javadoccomment">     * up to the specified wait time for space to become available if</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a> <em class="jxr_javadoccomment">     * the queue is full.</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L283" href="#L283">283</a> <em class="jxr_javadoccomment">     * @throws InterruptedException {@inheritDoc}</em>
<a class="jxr_linenumber" name="L284" href="#L284">284</a> <em class="jxr_javadoccomment">     * @throws NullPointerException {@inheritDoc}</em>
<a class="jxr_linenumber" name="L285" href="#L285">285</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L286" href="#L286">286</a>     @Override
<a class="jxr_linenumber" name="L287" href="#L287">287</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> offer(E e, <strong class="jxr_keyword">long</strong> timeout, <a href="../../../../../java/util/concurrent/TimeUnit.html">TimeUnit</a> unit)
<a class="jxr_linenumber" name="L288" href="#L288">288</a>         <strong class="jxr_keyword">throws</strong> InterruptedException {
<a class="jxr_linenumber" name="L289" href="#L289">289</a> 
<a class="jxr_linenumber" name="L290" href="#L290">290</a>         <strong class="jxr_keyword">if</strong> (e == <strong class="jxr_keyword">null</strong>) <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NullPointerException();
<a class="jxr_linenumber" name="L291" href="#L291">291</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L292" href="#L292">292</a>         <strong class="jxr_keyword">if</strong> (monitor.enterWhen(notFull, timeout, unit)) {
<a class="jxr_linenumber" name="L293" href="#L293">293</a>             <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L294" href="#L294">294</a>                 insert(e);
<a class="jxr_linenumber" name="L295" href="#L295">295</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L296" href="#L296">296</a>             } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L297" href="#L297">297</a>                 monitor.leave();
<a class="jxr_linenumber" name="L298" href="#L298">298</a>             }
<a class="jxr_linenumber" name="L299" href="#L299">299</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L300" href="#L300">300</a>           <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L301" href="#L301">301</a>         }
<a class="jxr_linenumber" name="L302" href="#L302">302</a>     }
<a class="jxr_linenumber" name="L303" href="#L303">303</a> 
<a class="jxr_linenumber" name="L304" href="#L304">304</a>     @Override
<a class="jxr_linenumber" name="L305" href="#L305">305</a>     <strong class="jxr_keyword">public</strong> E poll() {
<a class="jxr_linenumber" name="L306" href="#L306">306</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         <strong class="jxr_keyword">if</strong> (monitor.enterIf(notEmpty)) {
<a class="jxr_linenumber" name="L308" href="#L308">308</a>             <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L309" href="#L309">309</a>                 <strong class="jxr_keyword">return</strong> extract();
<a class="jxr_linenumber" name="L310" href="#L310">310</a>             } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L311" href="#L311">311</a>                 monitor.leave();
<a class="jxr_linenumber" name="L312" href="#L312">312</a>             }
<a class="jxr_linenumber" name="L313" href="#L313">313</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L314" href="#L314">314</a>           <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         }
<a class="jxr_linenumber" name="L316" href="#L316">316</a>     }
<a class="jxr_linenumber" name="L317" href="#L317">317</a> 
<a class="jxr_linenumber" name="L318" href="#L318">318</a>     @Override
<a class="jxr_linenumber" name="L319" href="#L319">319</a>     <strong class="jxr_keyword">public</strong> E take() <strong class="jxr_keyword">throws</strong> InterruptedException {
<a class="jxr_linenumber" name="L320" href="#L320">320</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         monitor.enterWhen(notEmpty);
<a class="jxr_linenumber" name="L322" href="#L322">322</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L323" href="#L323">323</a>             <strong class="jxr_keyword">return</strong> extract();
<a class="jxr_linenumber" name="L324" href="#L324">324</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L325" href="#L325">325</a>             monitor.leave();
<a class="jxr_linenumber" name="L326" href="#L326">326</a>         }
<a class="jxr_linenumber" name="L327" href="#L327">327</a>     }
<a class="jxr_linenumber" name="L328" href="#L328">328</a> 
<a class="jxr_linenumber" name="L329" href="#L329">329</a>     @Override
<a class="jxr_linenumber" name="L330" href="#L330">330</a>     <strong class="jxr_keyword">public</strong> E poll(<strong class="jxr_keyword">long</strong> timeout, <a href="../../../../../java/util/concurrent/TimeUnit.html">TimeUnit</a> unit) <strong class="jxr_keyword">throws</strong> InterruptedException {
<a class="jxr_linenumber" name="L331" href="#L331">331</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L332" href="#L332">332</a>         <strong class="jxr_keyword">if</strong> (monitor.enterWhen(notEmpty, timeout, unit)) {
<a class="jxr_linenumber" name="L333" href="#L333">333</a>             <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L334" href="#L334">334</a>                 <strong class="jxr_keyword">return</strong> extract();
<a class="jxr_linenumber" name="L335" href="#L335">335</a>             } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L336" href="#L336">336</a>                 monitor.leave();
<a class="jxr_linenumber" name="L337" href="#L337">337</a>             }
<a class="jxr_linenumber" name="L338" href="#L338">338</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L339" href="#L339">339</a>           <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L340" href="#L340">340</a>         }
<a class="jxr_linenumber" name="L341" href="#L341">341</a>     }
<a class="jxr_linenumber" name="L342" href="#L342">342</a> 
<a class="jxr_linenumber" name="L343" href="#L343">343</a>     @Override
<a class="jxr_linenumber" name="L344" href="#L344">344</a>     <strong class="jxr_keyword">public</strong> E peek() {
<a class="jxr_linenumber" name="L345" href="#L345">345</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L346" href="#L346">346</a>         <strong class="jxr_keyword">if</strong> (monitor.enterIf(notEmpty)) {
<a class="jxr_linenumber" name="L347" href="#L347">347</a>             <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L348" href="#L348">348</a>                 <strong class="jxr_keyword">return</strong> items[takeIndex];
<a class="jxr_linenumber" name="L349" href="#L349">349</a>             } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L350" href="#L350">350</a>                 monitor.leave();
<a class="jxr_linenumber" name="L351" href="#L351">351</a>             }
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L353" href="#L353">353</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L354" href="#L354">354</a>         }
<a class="jxr_linenumber" name="L355" href="#L355">355</a>     }
<a class="jxr_linenumber" name="L356" href="#L356">356</a> 
<a class="jxr_linenumber" name="L357" href="#L357">357</a>     <em class="jxr_comment">// this doc comment is overridden to remove the reference to collections</em>
<a class="jxr_linenumber" name="L358" href="#L358">358</a>     <em class="jxr_comment">// greater in size than Integer.MAX_VALUE</em>
<a class="jxr_linenumber" name="L359" href="#L359">359</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L360" href="#L360">360</a> <em class="jxr_javadoccomment">     * Returns the number of elements in this queue.</em>
<a class="jxr_linenumber" name="L361" href="#L361">361</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L362" href="#L362">362</a> <em class="jxr_javadoccomment">     * @return the number of elements in this queue</em>
<a class="jxr_linenumber" name="L363" href="#L363">363</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L364" href="#L364">364</a>     @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> size() {
<a class="jxr_linenumber" name="L365" href="#L365">365</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L366" href="#L366">366</a>         monitor.enter();
<a class="jxr_linenumber" name="L367" href="#L367">367</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L368" href="#L368">368</a>             <strong class="jxr_keyword">return</strong> count;
<a class="jxr_linenumber" name="L369" href="#L369">369</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L370" href="#L370">370</a>             monitor.leave();
<a class="jxr_linenumber" name="L371" href="#L371">371</a>         }
<a class="jxr_linenumber" name="L372" href="#L372">372</a>     }
<a class="jxr_linenumber" name="L373" href="#L373">373</a> 
<a class="jxr_linenumber" name="L374" href="#L374">374</a>     <em class="jxr_comment">// this doc comment is a modified copy of the inherited doc comment,</em>
<a class="jxr_linenumber" name="L375" href="#L375">375</a>     <em class="jxr_comment">// without the reference to unlimited queues.</em>
<a class="jxr_linenumber" name="L376" href="#L376">376</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L377" href="#L377">377</a> <em class="jxr_javadoccomment">     * Returns the number of additional elements that this queue can ideally</em>
<a class="jxr_linenumber" name="L378" href="#L378">378</a> <em class="jxr_javadoccomment">     * (in the absence of memory or resource constraints) accept without</em>
<a class="jxr_linenumber" name="L379" href="#L379">379</a> <em class="jxr_javadoccomment">     * blocking. This is always equal to the initial capacity of this queue</em>
<a class="jxr_linenumber" name="L380" href="#L380">380</a> <em class="jxr_javadoccomment">     * less the current &lt;tt&gt;size&lt;/tt&gt; of this queue.</em>
<a class="jxr_linenumber" name="L381" href="#L381">381</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L382" href="#L382">382</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Note that you &lt;em&gt;cannot&lt;/em&gt; always tell if an attempt to insert</em>
<a class="jxr_linenumber" name="L383" href="#L383">383</a> <em class="jxr_javadoccomment">     * an element will succeed by inspecting &lt;tt&gt;remainingCapacity&lt;/tt&gt;</em>
<a class="jxr_linenumber" name="L384" href="#L384">384</a> <em class="jxr_javadoccomment">     * because it may be the case that another thread is about to</em>
<a class="jxr_linenumber" name="L385" href="#L385">385</a> <em class="jxr_javadoccomment">     * insert or remove an element.</em>
<a class="jxr_linenumber" name="L386" href="#L386">386</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L387" href="#L387">387</a>     @Override
<a class="jxr_linenumber" name="L388" href="#L388">388</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> remainingCapacity() {
<a class="jxr_linenumber" name="L389" href="#L389">389</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L390" href="#L390">390</a>         monitor.enter();
<a class="jxr_linenumber" name="L391" href="#L391">391</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L392" href="#L392">392</a>             <strong class="jxr_keyword">return</strong> items.length - count;
<a class="jxr_linenumber" name="L393" href="#L393">393</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L394" href="#L394">394</a>             monitor.leave();
<a class="jxr_linenumber" name="L395" href="#L395">395</a>         }
<a class="jxr_linenumber" name="L396" href="#L396">396</a>     }
<a class="jxr_linenumber" name="L397" href="#L397">397</a> 
<a class="jxr_linenumber" name="L398" href="#L398">398</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L399" href="#L399">399</a> <em class="jxr_javadoccomment">     * Removes a single instance of the specified element from this queue,</em>
<a class="jxr_linenumber" name="L400" href="#L400">400</a> <em class="jxr_javadoccomment">     * if it is present.  More formally, removes an element &lt;tt&gt;e&lt;/tt&gt; such</em>
<a class="jxr_linenumber" name="L401" href="#L401">401</a> <em class="jxr_javadoccomment">     * that &lt;tt&gt;o.equals(e)&lt;/tt&gt;, if this queue contains one or more such</em>
<a class="jxr_linenumber" name="L402" href="#L402">402</a> <em class="jxr_javadoccomment">     * elements.</em>
<a class="jxr_linenumber" name="L403" href="#L403">403</a> <em class="jxr_javadoccomment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this queue contained the specified element</em>
<a class="jxr_linenumber" name="L404" href="#L404">404</a> <em class="jxr_javadoccomment">     * (or equivalently, if this queue changed as a result of the call).</em>
<a class="jxr_linenumber" name="L405" href="#L405">405</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L406" href="#L406">406</a> <em class="jxr_javadoccomment">     * @param o element to be removed from this queue, if present</em>
<a class="jxr_linenumber" name="L407" href="#L407">407</a> <em class="jxr_javadoccomment">     * @return &lt;tt&gt;true&lt;/tt&gt; if this queue changed as a result of the call</em>
<a class="jxr_linenumber" name="L408" href="#L408">408</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L409" href="#L409">409</a>     @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> remove(@Nullable Object o) {
<a class="jxr_linenumber" name="L410" href="#L410">410</a>         <strong class="jxr_keyword">if</strong> (o == <strong class="jxr_keyword">null</strong>) <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L411" href="#L411">411</a>         <strong class="jxr_keyword">final</strong> E[] items = <strong class="jxr_keyword">this</strong>.items;
<a class="jxr_linenumber" name="L412" href="#L412">412</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L413" href="#L413">413</a>         monitor.enter();
<a class="jxr_linenumber" name="L414" href="#L414">414</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L415" href="#L415">415</a>             <strong class="jxr_keyword">int</strong> i = takeIndex;
<a class="jxr_linenumber" name="L416" href="#L416">416</a>             <strong class="jxr_keyword">int</strong> k = 0;
<a class="jxr_linenumber" name="L417" href="#L417">417</a>             <strong class="jxr_keyword">for</strong> (;;) {
<a class="jxr_linenumber" name="L418" href="#L418">418</a>                 <strong class="jxr_keyword">if</strong> (k++ &gt;= count)
<a class="jxr_linenumber" name="L419" href="#L419">419</a>                     <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L420" href="#L420">420</a>                 <strong class="jxr_keyword">if</strong> (o.equals(items[i])) {
<a class="jxr_linenumber" name="L421" href="#L421">421</a>                     removeAt(i);
<a class="jxr_linenumber" name="L422" href="#L422">422</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L423" href="#L423">423</a>                 }
<a class="jxr_linenumber" name="L424" href="#L424">424</a>                 i = inc(i);
<a class="jxr_linenumber" name="L425" href="#L425">425</a>             }
<a class="jxr_linenumber" name="L426" href="#L426">426</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L427" href="#L427">427</a>             monitor.leave();
<a class="jxr_linenumber" name="L428" href="#L428">428</a>         }
<a class="jxr_linenumber" name="L429" href="#L429">429</a>     }
<a class="jxr_linenumber" name="L430" href="#L430">430</a> 
<a class="jxr_linenumber" name="L431" href="#L431">431</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L432" href="#L432">432</a> <em class="jxr_javadoccomment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this queue contains the specified element.</em>
<a class="jxr_linenumber" name="L433" href="#L433">433</a> <em class="jxr_javadoccomment">     * More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this queue contains</em>
<a class="jxr_linenumber" name="L434" href="#L434">434</a> <em class="jxr_javadoccomment">     * at least one element &lt;tt&gt;e&lt;/tt&gt; such that &lt;tt&gt;o.equals(e)&lt;/tt&gt;.</em>
<a class="jxr_linenumber" name="L435" href="#L435">435</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L436" href="#L436">436</a> <em class="jxr_javadoccomment">     * @param o object to be checked for containment in this queue</em>
<a class="jxr_linenumber" name="L437" href="#L437">437</a> <em class="jxr_javadoccomment">     * @return &lt;tt&gt;true&lt;/tt&gt; if this queue contains the specified element</em>
<a class="jxr_linenumber" name="L438" href="#L438">438</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L439" href="#L439">439</a>     @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> contains(@Nullable Object o) {
<a class="jxr_linenumber" name="L440" href="#L440">440</a>         <strong class="jxr_keyword">if</strong> (o == <strong class="jxr_keyword">null</strong>) <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L441" href="#L441">441</a>         <strong class="jxr_keyword">final</strong> E[] items = <strong class="jxr_keyword">this</strong>.items;
<a class="jxr_linenumber" name="L442" href="#L442">442</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L443" href="#L443">443</a>         monitor.enter();
<a class="jxr_linenumber" name="L444" href="#L444">444</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L445" href="#L445">445</a>             <strong class="jxr_keyword">int</strong> i = takeIndex;
<a class="jxr_linenumber" name="L446" href="#L446">446</a>             <strong class="jxr_keyword">int</strong> k = 0;
<a class="jxr_linenumber" name="L447" href="#L447">447</a>             <strong class="jxr_keyword">while</strong> (k++ &lt; count) {
<a class="jxr_linenumber" name="L448" href="#L448">448</a>                 <strong class="jxr_keyword">if</strong> (o.equals(items[i]))
<a class="jxr_linenumber" name="L449" href="#L449">449</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L450" href="#L450">450</a>                 i = inc(i);
<a class="jxr_linenumber" name="L451" href="#L451">451</a>             }
<a class="jxr_linenumber" name="L452" href="#L452">452</a>             <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L453" href="#L453">453</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L454" href="#L454">454</a>             monitor.leave();
<a class="jxr_linenumber" name="L455" href="#L455">455</a>         }
<a class="jxr_linenumber" name="L456" href="#L456">456</a>     }
<a class="jxr_linenumber" name="L457" href="#L457">457</a> 
<a class="jxr_linenumber" name="L458" href="#L458">458</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L459" href="#L459">459</a> <em class="jxr_javadoccomment">     * Returns an array containing all of the elements in this queue, in</em>
<a class="jxr_linenumber" name="L460" href="#L460">460</a> <em class="jxr_javadoccomment">     * proper sequence.</em>
<a class="jxr_linenumber" name="L461" href="#L461">461</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L462" href="#L462">462</a> <em class="jxr_javadoccomment">     * &lt;p&gt;The returned array will be "safe" in that no references to it are</em>
<a class="jxr_linenumber" name="L463" href="#L463">463</a> <em class="jxr_javadoccomment">     * maintained by this queue.  (In other words, this method must allocate</em>
<a class="jxr_linenumber" name="L464" href="#L464">464</a> <em class="jxr_javadoccomment">     * a new array).  The caller is thus free to modify the returned array.</em>
<a class="jxr_linenumber" name="L465" href="#L465">465</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L466" href="#L466">466</a> <em class="jxr_javadoccomment">     * &lt;p&gt;This method acts as bridge between array-based and collection-based</em>
<a class="jxr_linenumber" name="L467" href="#L467">467</a> <em class="jxr_javadoccomment">     * APIs.</em>
<a class="jxr_linenumber" name="L468" href="#L468">468</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L469" href="#L469">469</a> <em class="jxr_javadoccomment">     * @return an array containing all of the elements in this queue</em>
<a class="jxr_linenumber" name="L470" href="#L470">470</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L471" href="#L471">471</a>     @Override <strong class="jxr_keyword">public</strong> Object[] toArray() {
<a class="jxr_linenumber" name="L472" href="#L472">472</a>         <strong class="jxr_keyword">final</strong> E[] items = <strong class="jxr_keyword">this</strong>.items;
<a class="jxr_linenumber" name="L473" href="#L473">473</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L474" href="#L474">474</a>         monitor.enter();
<a class="jxr_linenumber" name="L475" href="#L475">475</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L476" href="#L476">476</a>             Object[] a = <strong class="jxr_keyword">new</strong> Object[count];
<a class="jxr_linenumber" name="L477" href="#L477">477</a>             <strong class="jxr_keyword">int</strong> k = 0;
<a class="jxr_linenumber" name="L478" href="#L478">478</a>             <strong class="jxr_keyword">int</strong> i = takeIndex;
<a class="jxr_linenumber" name="L479" href="#L479">479</a>             <strong class="jxr_keyword">while</strong> (k &lt; count) {
<a class="jxr_linenumber" name="L480" href="#L480">480</a>                 a[k++] = items[i];
<a class="jxr_linenumber" name="L481" href="#L481">481</a>                 i = inc(i);
<a class="jxr_linenumber" name="L482" href="#L482">482</a>             }
<a class="jxr_linenumber" name="L483" href="#L483">483</a>             <strong class="jxr_keyword">return</strong> a;
<a class="jxr_linenumber" name="L484" href="#L484">484</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L485" href="#L485">485</a>             monitor.leave();
<a class="jxr_linenumber" name="L486" href="#L486">486</a>         }
<a class="jxr_linenumber" name="L487" href="#L487">487</a>     }
<a class="jxr_linenumber" name="L488" href="#L488">488</a> 
<a class="jxr_linenumber" name="L489" href="#L489">489</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L490" href="#L490">490</a> <em class="jxr_javadoccomment">     * Returns an array containing all of the elements in this queue, in</em>
<a class="jxr_linenumber" name="L491" href="#L491">491</a> <em class="jxr_javadoccomment">     * proper sequence; the runtime type of the returned array is that of</em>
<a class="jxr_linenumber" name="L492" href="#L492">492</a> <em class="jxr_javadoccomment">     * the specified array.  If the queue fits in the specified array, it</em>
<a class="jxr_linenumber" name="L493" href="#L493">493</a> <em class="jxr_javadoccomment">     * is returned therein.  Otherwise, a new array is allocated with the</em>
<a class="jxr_linenumber" name="L494" href="#L494">494</a> <em class="jxr_javadoccomment">     * runtime type of the specified array and the size of this queue.</em>
<a class="jxr_linenumber" name="L495" href="#L495">495</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L496" href="#L496">496</a> <em class="jxr_javadoccomment">     * &lt;p&gt;If this queue fits in the specified array with room to spare</em>
<a class="jxr_linenumber" name="L497" href="#L497">497</a> <em class="jxr_javadoccomment">     * (i.e., the array has more elements than this queue), the element in</em>
<a class="jxr_linenumber" name="L498" href="#L498">498</a> <em class="jxr_javadoccomment">     * the array immediately following the end of the queue is set to</em>
<a class="jxr_linenumber" name="L499" href="#L499">499</a> <em class="jxr_javadoccomment">     * &lt;tt&gt;null&lt;/tt&gt;.</em>
<a class="jxr_linenumber" name="L500" href="#L500">500</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L501" href="#L501">501</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between</em>
<a class="jxr_linenumber" name="L502" href="#L502">502</a> <em class="jxr_javadoccomment">     * array-based and collection-based APIs.  Further, this method allows</em>
<a class="jxr_linenumber" name="L503" href="#L503">503</a> <em class="jxr_javadoccomment">     * precise control over the runtime type of the output array, and may,</em>
<a class="jxr_linenumber" name="L504" href="#L504">504</a> <em class="jxr_javadoccomment">     * under certain circumstances, be used to save allocation costs.</em>
<a class="jxr_linenumber" name="L505" href="#L505">505</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L506" href="#L506">506</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Suppose &lt;tt&gt;x&lt;/tt&gt; is a queue known to contain only strings.</em>
<a class="jxr_linenumber" name="L507" href="#L507">507</a> <em class="jxr_javadoccomment">     * The following code can be used to dump the queue into a newly</em>
<a class="jxr_linenumber" name="L508" href="#L508">508</a> <em class="jxr_javadoccomment">     * allocated array of &lt;tt&gt;String&lt;/tt&gt;:</em>
<a class="jxr_linenumber" name="L509" href="#L509">509</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L510" href="#L510">510</a> <em class="jxr_javadoccomment">     * &lt;pre&gt;</em>
<a class="jxr_linenumber" name="L511" href="#L511">511</a> <em class="jxr_javadoccomment">     *     String[] y = x.toArray(new String[0]);&lt;/pre&gt;</em>
<a class="jxr_linenumber" name="L512" href="#L512">512</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L513" href="#L513">513</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to</em>
<a class="jxr_linenumber" name="L514" href="#L514">514</a> <em class="jxr_javadoccomment">     * &lt;tt&gt;toArray()&lt;/tt&gt;.</em>
<a class="jxr_linenumber" name="L515" href="#L515">515</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L516" href="#L516">516</a> <em class="jxr_javadoccomment">     * @param a the array into which the elements of the queue are to</em>
<a class="jxr_linenumber" name="L517" href="#L517">517</a> <em class="jxr_javadoccomment">     *          be stored, if it is big enough; otherwise, a new array of the</em>
<a class="jxr_linenumber" name="L518" href="#L518">518</a> <em class="jxr_javadoccomment">     *          same runtime type is allocated for this purpose</em>
<a class="jxr_linenumber" name="L519" href="#L519">519</a> <em class="jxr_javadoccomment">     * @return an array containing all of the elements in this queue</em>
<a class="jxr_linenumber" name="L520" href="#L520">520</a> <em class="jxr_javadoccomment">     * @throws ArrayStoreException if the runtime type of the specified array</em>
<a class="jxr_linenumber" name="L521" href="#L521">521</a> <em class="jxr_javadoccomment">     *         is not a supertype of the runtime type of every element in</em>
<a class="jxr_linenumber" name="L522" href="#L522">522</a> <em class="jxr_javadoccomment">     *         this queue</em>
<a class="jxr_linenumber" name="L523" href="#L523">523</a> <em class="jxr_javadoccomment">     * @throws NullPointerException if the specified array is null</em>
<a class="jxr_linenumber" name="L524" href="#L524">524</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L525" href="#L525">525</a>     @Override <strong class="jxr_keyword">public</strong> &lt;T&gt; T[] toArray(T[] a) {
<a class="jxr_linenumber" name="L526" href="#L526">526</a>         <strong class="jxr_keyword">final</strong> E[] items = <strong class="jxr_keyword">this</strong>.items;
<a class="jxr_linenumber" name="L527" href="#L527">527</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L528" href="#L528">528</a>         monitor.enter();
<a class="jxr_linenumber" name="L529" href="#L529">529</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L530" href="#L530">530</a>             <strong class="jxr_keyword">if</strong> (a.length &lt; count)
<a class="jxr_linenumber" name="L531" href="#L531">531</a>                 a = ObjectArrays.newArray(a, count);
<a class="jxr_linenumber" name="L532" href="#L532">532</a> 
<a class="jxr_linenumber" name="L533" href="#L533">533</a>             <strong class="jxr_keyword">int</strong> k = 0;
<a class="jxr_linenumber" name="L534" href="#L534">534</a>             <strong class="jxr_keyword">int</strong> i = takeIndex;
<a class="jxr_linenumber" name="L535" href="#L535">535</a>             <strong class="jxr_keyword">while</strong> (k &lt; count) {
<a class="jxr_linenumber" name="L536" href="#L536">536</a>                 <em class="jxr_comment">// This cast is not itself safe, but the following statement</em>
<a class="jxr_linenumber" name="L537" href="#L537">537</a>                 <em class="jxr_comment">// will fail if the runtime type of items[i] is not assignable</em>
<a class="jxr_linenumber" name="L538" href="#L538">538</a>                 <em class="jxr_comment">// to the runtime type of a[k++], which is all that the method</em>
<a class="jxr_linenumber" name="L539" href="#L539">539</a>                 <em class="jxr_comment">// contract requires (see @throws ArrayStoreException above).</em>
<a class="jxr_linenumber" name="L540" href="#L540">540</a>                 @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L541" href="#L541">541</a>                 T t = (T) items[i];
<a class="jxr_linenumber" name="L542" href="#L542">542</a>                 a[k++] = t;
<a class="jxr_linenumber" name="L543" href="#L543">543</a>                 i = inc(i);
<a class="jxr_linenumber" name="L544" href="#L544">544</a>             }
<a class="jxr_linenumber" name="L545" href="#L545">545</a>             <strong class="jxr_keyword">if</strong> (a.length &gt; count)
<a class="jxr_linenumber" name="L546" href="#L546">546</a>                 a[count] = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L547" href="#L547">547</a>             <strong class="jxr_keyword">return</strong> a;
<a class="jxr_linenumber" name="L548" href="#L548">548</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L549" href="#L549">549</a>             monitor.leave();
<a class="jxr_linenumber" name="L550" href="#L550">550</a>         }
<a class="jxr_linenumber" name="L551" href="#L551">551</a>     }
<a class="jxr_linenumber" name="L552" href="#L552">552</a> 
<a class="jxr_linenumber" name="L553" href="#L553">553</a>     @Override <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L554" href="#L554">554</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L555" href="#L555">555</a>         monitor.enter();
<a class="jxr_linenumber" name="L556" href="#L556">556</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L557" href="#L557">557</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">super</strong>.toString();
<a class="jxr_linenumber" name="L558" href="#L558">558</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L559" href="#L559">559</a>             monitor.leave();
<a class="jxr_linenumber" name="L560" href="#L560">560</a>         }
<a class="jxr_linenumber" name="L561" href="#L561">561</a>     }
<a class="jxr_linenumber" name="L562" href="#L562">562</a> 
<a class="jxr_linenumber" name="L563" href="#L563">563</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L564" href="#L564">564</a> <em class="jxr_javadoccomment">     * Atomically removes all of the elements from this queue.</em>
<a class="jxr_linenumber" name="L565" href="#L565">565</a> <em class="jxr_javadoccomment">     * The queue will be empty after this call returns.</em>
<a class="jxr_linenumber" name="L566" href="#L566">566</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L567" href="#L567">567</a>     @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> clear() {
<a class="jxr_linenumber" name="L568" href="#L568">568</a>         <strong class="jxr_keyword">final</strong> E[] items = <strong class="jxr_keyword">this</strong>.items;
<a class="jxr_linenumber" name="L569" href="#L569">569</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L570" href="#L570">570</a>         monitor.enter();
<a class="jxr_linenumber" name="L571" href="#L571">571</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L572" href="#L572">572</a>             <strong class="jxr_keyword">int</strong> i = takeIndex;
<a class="jxr_linenumber" name="L573" href="#L573">573</a>             <strong class="jxr_keyword">int</strong> k = count;
<a class="jxr_linenumber" name="L574" href="#L574">574</a>             <strong class="jxr_keyword">while</strong> (k-- &gt; 0) {
<a class="jxr_linenumber" name="L575" href="#L575">575</a>                 items[i] = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L576" href="#L576">576</a>                 i = inc(i);
<a class="jxr_linenumber" name="L577" href="#L577">577</a>             }
<a class="jxr_linenumber" name="L578" href="#L578">578</a>             count = 0;
<a class="jxr_linenumber" name="L579" href="#L579">579</a>             putIndex = 0;
<a class="jxr_linenumber" name="L580" href="#L580">580</a>             takeIndex = 0;
<a class="jxr_linenumber" name="L581" href="#L581">581</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L582" href="#L582">582</a>             monitor.leave();
<a class="jxr_linenumber" name="L583" href="#L583">583</a>         }
<a class="jxr_linenumber" name="L584" href="#L584">584</a>     }
<a class="jxr_linenumber" name="L585" href="#L585">585</a> 
<a class="jxr_linenumber" name="L586" href="#L586">586</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L587" href="#L587">587</a> <em class="jxr_javadoccomment">     * @throws UnsupportedOperationException {@inheritDoc}</em>
<a class="jxr_linenumber" name="L588" href="#L588">588</a> <em class="jxr_javadoccomment">     * @throws ClassCastException            {@inheritDoc}</em>
<a class="jxr_linenumber" name="L589" href="#L589">589</a> <em class="jxr_javadoccomment">     * @throws NullPointerException          {@inheritDoc}</em>
<a class="jxr_linenumber" name="L590" href="#L590">590</a> <em class="jxr_javadoccomment">     * @throws IllegalArgumentException      {@inheritDoc}</em>
<a class="jxr_linenumber" name="L591" href="#L591">591</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L592" href="#L592">592</a>     @Override
<a class="jxr_linenumber" name="L593" href="#L593">593</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> drainTo(Collection&lt;? <strong class="jxr_keyword">super</strong> E&gt; c) {
<a class="jxr_linenumber" name="L594" href="#L594">594</a>         <strong class="jxr_keyword">if</strong> (c == <strong class="jxr_keyword">null</strong>)
<a class="jxr_linenumber" name="L595" href="#L595">595</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NullPointerException();
<a class="jxr_linenumber" name="L596" href="#L596">596</a>         <strong class="jxr_keyword">if</strong> (c == <strong class="jxr_keyword">this</strong>)
<a class="jxr_linenumber" name="L597" href="#L597">597</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalArgumentException();
<a class="jxr_linenumber" name="L598" href="#L598">598</a>         <strong class="jxr_keyword">final</strong> E[] items = <strong class="jxr_keyword">this</strong>.items;
<a class="jxr_linenumber" name="L599" href="#L599">599</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L600" href="#L600">600</a>         monitor.enter();
<a class="jxr_linenumber" name="L601" href="#L601">601</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L602" href="#L602">602</a>             <strong class="jxr_keyword">int</strong> i = takeIndex;
<a class="jxr_linenumber" name="L603" href="#L603">603</a>             <strong class="jxr_keyword">int</strong> n = 0;
<a class="jxr_linenumber" name="L604" href="#L604">604</a>             <strong class="jxr_keyword">int</strong> max = count;
<a class="jxr_linenumber" name="L605" href="#L605">605</a>             <strong class="jxr_keyword">while</strong> (n &lt; max) {
<a class="jxr_linenumber" name="L606" href="#L606">606</a>                 c.add(items[i]);
<a class="jxr_linenumber" name="L607" href="#L607">607</a>                 items[i] = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L608" href="#L608">608</a>                 i = inc(i);
<a class="jxr_linenumber" name="L609" href="#L609">609</a>                 ++n;
<a class="jxr_linenumber" name="L610" href="#L610">610</a>             }
<a class="jxr_linenumber" name="L611" href="#L611">611</a>             <strong class="jxr_keyword">if</strong> (n &gt; 0) {
<a class="jxr_linenumber" name="L612" href="#L612">612</a>                 count = 0;
<a class="jxr_linenumber" name="L613" href="#L613">613</a>                 putIndex = 0;
<a class="jxr_linenumber" name="L614" href="#L614">614</a>                 takeIndex = 0;
<a class="jxr_linenumber" name="L615" href="#L615">615</a>             }
<a class="jxr_linenumber" name="L616" href="#L616">616</a>             <strong class="jxr_keyword">return</strong> n;
<a class="jxr_linenumber" name="L617" href="#L617">617</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L618" href="#L618">618</a>             monitor.leave();
<a class="jxr_linenumber" name="L619" href="#L619">619</a>         }
<a class="jxr_linenumber" name="L620" href="#L620">620</a>     }
<a class="jxr_linenumber" name="L621" href="#L621">621</a> 
<a class="jxr_linenumber" name="L622" href="#L622">622</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L623" href="#L623">623</a> <em class="jxr_javadoccomment">     * @throws UnsupportedOperationException {@inheritDoc}</em>
<a class="jxr_linenumber" name="L624" href="#L624">624</a> <em class="jxr_javadoccomment">     * @throws ClassCastException            {@inheritDoc}</em>
<a class="jxr_linenumber" name="L625" href="#L625">625</a> <em class="jxr_javadoccomment">     * @throws NullPointerException          {@inheritDoc}</em>
<a class="jxr_linenumber" name="L626" href="#L626">626</a> <em class="jxr_javadoccomment">     * @throws IllegalArgumentException      {@inheritDoc}</em>
<a class="jxr_linenumber" name="L627" href="#L627">627</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L628" href="#L628">628</a>     @Override
<a class="jxr_linenumber" name="L629" href="#L629">629</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> drainTo(Collection&lt;? <strong class="jxr_keyword">super</strong> E&gt; c, <strong class="jxr_keyword">int</strong> maxElements) {
<a class="jxr_linenumber" name="L630" href="#L630">630</a>         <strong class="jxr_keyword">if</strong> (c == <strong class="jxr_keyword">null</strong>)
<a class="jxr_linenumber" name="L631" href="#L631">631</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NullPointerException();
<a class="jxr_linenumber" name="L632" href="#L632">632</a>         <strong class="jxr_keyword">if</strong> (c == <strong class="jxr_keyword">this</strong>)
<a class="jxr_linenumber" name="L633" href="#L633">633</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalArgumentException();
<a class="jxr_linenumber" name="L634" href="#L634">634</a>         <strong class="jxr_keyword">if</strong> (maxElements &lt;= 0)
<a class="jxr_linenumber" name="L635" href="#L635">635</a>             <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L636" href="#L636">636</a>         <strong class="jxr_keyword">final</strong> E[] items = <strong class="jxr_keyword">this</strong>.items;
<a class="jxr_linenumber" name="L637" href="#L637">637</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L638" href="#L638">638</a>         monitor.enter();
<a class="jxr_linenumber" name="L639" href="#L639">639</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L640" href="#L640">640</a>             <strong class="jxr_keyword">int</strong> i = takeIndex;
<a class="jxr_linenumber" name="L641" href="#L641">641</a>             <strong class="jxr_keyword">int</strong> n = 0;
<a class="jxr_linenumber" name="L642" href="#L642">642</a>             <strong class="jxr_keyword">int</strong> max = (maxElements &lt; count) ? maxElements : count;
<a class="jxr_linenumber" name="L643" href="#L643">643</a>             <strong class="jxr_keyword">while</strong> (n &lt; max) {
<a class="jxr_linenumber" name="L644" href="#L644">644</a>                 c.add(items[i]);
<a class="jxr_linenumber" name="L645" href="#L645">645</a>                 items[i] = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L646" href="#L646">646</a>                 i = inc(i);
<a class="jxr_linenumber" name="L647" href="#L647">647</a>                 ++n;
<a class="jxr_linenumber" name="L648" href="#L648">648</a>             }
<a class="jxr_linenumber" name="L649" href="#L649">649</a>             <strong class="jxr_keyword">if</strong> (n &gt; 0) {
<a class="jxr_linenumber" name="L650" href="#L650">650</a>                 count -= n;
<a class="jxr_linenumber" name="L651" href="#L651">651</a>                 takeIndex = i;
<a class="jxr_linenumber" name="L652" href="#L652">652</a>             }
<a class="jxr_linenumber" name="L653" href="#L653">653</a>             <strong class="jxr_keyword">return</strong> n;
<a class="jxr_linenumber" name="L654" href="#L654">654</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L655" href="#L655">655</a>             monitor.leave();
<a class="jxr_linenumber" name="L656" href="#L656">656</a>         }
<a class="jxr_linenumber" name="L657" href="#L657">657</a>     }
<a class="jxr_linenumber" name="L658" href="#L658">658</a> 
<a class="jxr_linenumber" name="L659" href="#L659">659</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L660" href="#L660">660</a> <em class="jxr_javadoccomment">     * Returns an iterator over the elements in this queue in proper sequence.</em>
<a class="jxr_linenumber" name="L661" href="#L661">661</a> <em class="jxr_javadoccomment">     * The returned &lt;tt&gt;Iterator&lt;/tt&gt; is a "weakly consistent" iterator that</em>
<a class="jxr_linenumber" name="L662" href="#L662">662</a> <em class="jxr_javadoccomment">     * will never throw {@link ConcurrentModificationException},</em>
<a class="jxr_linenumber" name="L663" href="#L663">663</a> <em class="jxr_javadoccomment">     * and guarantees to traverse elements as they existed upon</em>
<a class="jxr_linenumber" name="L664" href="#L664">664</a> <em class="jxr_javadoccomment">     * construction of the iterator, and may (but is not guaranteed to)</em>
<a class="jxr_linenumber" name="L665" href="#L665">665</a> <em class="jxr_javadoccomment">     * reflect any modifications subsequent to construction.</em>
<a class="jxr_linenumber" name="L666" href="#L666">666</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L667" href="#L667">667</a> <em class="jxr_javadoccomment">     * @return an iterator over the elements in this queue in proper sequence</em>
<a class="jxr_linenumber" name="L668" href="#L668">668</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L669" href="#L669">669</a>     @Override <strong class="jxr_keyword">public</strong> Iterator&lt;E&gt; iterator() {
<a class="jxr_linenumber" name="L670" href="#L670">670</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = <strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L671" href="#L671">671</a>         monitor.enter();
<a class="jxr_linenumber" name="L672" href="#L672">672</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L673" href="#L673">673</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/collect/ImmutableMultimap.html">Itr</a>();
<a class="jxr_linenumber" name="L674" href="#L674">674</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L675" href="#L675">675</a>             monitor.leave();
<a class="jxr_linenumber" name="L676" href="#L676">676</a>         }
<a class="jxr_linenumber" name="L677" href="#L677">677</a>     }
<a class="jxr_linenumber" name="L678" href="#L678">678</a> 
<a class="jxr_linenumber" name="L679" href="#L679">679</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L680" href="#L680">680</a> <em class="jxr_javadoccomment">     * Iterator for MonitorBasedArrayBlockingQueue</em>
<a class="jxr_linenumber" name="L681" href="#L681">681</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L682" href="#L682">682</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../com/google/common/collect/ImmutableMultimap.html">Itr</a> <strong class="jxr_keyword">implements</strong> Iterator&lt;E&gt; {
<a class="jxr_linenumber" name="L683" href="#L683">683</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L684" href="#L684">684</a> <em class="jxr_javadoccomment">         * Index of element to be returned by next,</em>
<a class="jxr_linenumber" name="L685" href="#L685">685</a> <em class="jxr_javadoccomment">         * or a negative number if no such.</em>
<a class="jxr_linenumber" name="L686" href="#L686">686</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L687" href="#L687">687</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> nextIndex;
<a class="jxr_linenumber" name="L688" href="#L688">688</a> 
<a class="jxr_linenumber" name="L689" href="#L689">689</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L690" href="#L690">690</a> <em class="jxr_javadoccomment">         * nextItem holds on to item fields because once we claim</em>
<a class="jxr_linenumber" name="L691" href="#L691">691</a> <em class="jxr_javadoccomment">         * that an element exists in hasNext(), we must return it in</em>
<a class="jxr_linenumber" name="L692" href="#L692">692</a> <em class="jxr_javadoccomment">         * the following next() call even if it was in the process of</em>
<a class="jxr_linenumber" name="L693" href="#L693">693</a> <em class="jxr_javadoccomment">         * being removed when hasNext() was called.</em>
<a class="jxr_linenumber" name="L694" href="#L694">694</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L695" href="#L695">695</a>         <strong class="jxr_keyword">private</strong> E nextItem;
<a class="jxr_linenumber" name="L696" href="#L696">696</a> 
<a class="jxr_linenumber" name="L697" href="#L697">697</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L698" href="#L698">698</a> <em class="jxr_javadoccomment">         * Index of element returned by most recent call to next.</em>
<a class="jxr_linenumber" name="L699" href="#L699">699</a> <em class="jxr_javadoccomment">         * Reset to -1 if this element is deleted by a call to remove.</em>
<a class="jxr_linenumber" name="L700" href="#L700">700</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L701" href="#L701">701</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> lastRet;
<a class="jxr_linenumber" name="L702" href="#L702">702</a> 
<a class="jxr_linenumber" name="L703" href="#L703">703</a>         <a href="../../../../../com/google/common/collect/ImmutableMultimap.html">Itr</a>() {
<a class="jxr_linenumber" name="L704" href="#L704">704</a>             lastRet = -1;
<a class="jxr_linenumber" name="L705" href="#L705">705</a>             <strong class="jxr_keyword">if</strong> (count == 0)
<a class="jxr_linenumber" name="L706" href="#L706">706</a>                 nextIndex = -1;
<a class="jxr_linenumber" name="L707" href="#L707">707</a>             <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L708" href="#L708">708</a>                 nextIndex = takeIndex;
<a class="jxr_linenumber" name="L709" href="#L709">709</a>                 nextItem = items[takeIndex];
<a class="jxr_linenumber" name="L710" href="#L710">710</a>             }
<a class="jxr_linenumber" name="L711" href="#L711">711</a>         }
<a class="jxr_linenumber" name="L712" href="#L712">712</a> 
<a class="jxr_linenumber" name="L713" href="#L713">713</a>         @Override
<a class="jxr_linenumber" name="L714" href="#L714">714</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L715" href="#L715">715</a>             <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L716" href="#L716">716</a> <em class="jxr_comment">             * No sync. We can return true by mistake here</em>
<a class="jxr_linenumber" name="L717" href="#L717">717</a> <em class="jxr_comment">             * only if this iterator passed across threads,</em>
<a class="jxr_linenumber" name="L718" href="#L718">718</a> <em class="jxr_comment">             * which we don't support anyway.</em>
<a class="jxr_linenumber" name="L719" href="#L719">719</a> <em class="jxr_comment">             */</em>
<a class="jxr_linenumber" name="L720" href="#L720">720</a>             <strong class="jxr_keyword">return</strong> nextIndex &gt;= 0;
<a class="jxr_linenumber" name="L721" href="#L721">721</a>         }
<a class="jxr_linenumber" name="L722" href="#L722">722</a> 
<a class="jxr_linenumber" name="L723" href="#L723">723</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L724" href="#L724">724</a> <em class="jxr_javadoccomment">         * Checks whether nextIndex is valid; if so setting nextItem.</em>
<a class="jxr_linenumber" name="L725" href="#L725">725</a> <em class="jxr_javadoccomment">         * Stops iterator when either hits putIndex or sees null item.</em>
<a class="jxr_linenumber" name="L726" href="#L726">726</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L727" href="#L727">727</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkNext() {
<a class="jxr_linenumber" name="L728" href="#L728">728</a>             <strong class="jxr_keyword">if</strong> (nextIndex == putIndex) {
<a class="jxr_linenumber" name="L729" href="#L729">729</a>                 nextIndex = -1;
<a class="jxr_linenumber" name="L730" href="#L730">730</a>                 nextItem = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L731" href="#L731">731</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L732" href="#L732">732</a>                 nextItem = items[nextIndex];
<a class="jxr_linenumber" name="L733" href="#L733">733</a>                 <strong class="jxr_keyword">if</strong> (nextItem == <strong class="jxr_keyword">null</strong>)
<a class="jxr_linenumber" name="L734" href="#L734">734</a>                     nextIndex = -1;
<a class="jxr_linenumber" name="L735" href="#L735">735</a>             }
<a class="jxr_linenumber" name="L736" href="#L736">736</a>         }
<a class="jxr_linenumber" name="L737" href="#L737">737</a> 
<a class="jxr_linenumber" name="L738" href="#L738">738</a>         @Override
<a class="jxr_linenumber" name="L739" href="#L739">739</a>         <strong class="jxr_keyword">public</strong> E next() {
<a class="jxr_linenumber" name="L740" href="#L740">740</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = MonitorBasedArrayBlockingQueue.<strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L741" href="#L741">741</a>             monitor.enter();
<a class="jxr_linenumber" name="L742" href="#L742">742</a>             <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L743" href="#L743">743</a>                 <strong class="jxr_keyword">if</strong> (nextIndex &lt; 0)
<a class="jxr_linenumber" name="L744" href="#L744">744</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L745" href="#L745">745</a>                 lastRet = nextIndex;
<a class="jxr_linenumber" name="L746" href="#L746">746</a>                 E x = nextItem;
<a class="jxr_linenumber" name="L747" href="#L747">747</a>                 nextIndex = inc(nextIndex);
<a class="jxr_linenumber" name="L748" href="#L748">748</a>                 checkNext();
<a class="jxr_linenumber" name="L749" href="#L749">749</a>                 <strong class="jxr_keyword">return</strong> x;
<a class="jxr_linenumber" name="L750" href="#L750">750</a>             } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L751" href="#L751">751</a>                 monitor.leave();
<a class="jxr_linenumber" name="L752" href="#L752">752</a>             }
<a class="jxr_linenumber" name="L753" href="#L753">753</a>         }
<a class="jxr_linenumber" name="L754" href="#L754">754</a> 
<a class="jxr_linenumber" name="L755" href="#L755">755</a>         @Override
<a class="jxr_linenumber" name="L756" href="#L756">756</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> remove() {
<a class="jxr_linenumber" name="L757" href="#L757">757</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../com/google/common/util/concurrent/Monitor.html">Monitor</a> monitor = MonitorBasedArrayBlockingQueue.<strong class="jxr_keyword">this</strong>.monitor;
<a class="jxr_linenumber" name="L758" href="#L758">758</a>             monitor.enter();
<a class="jxr_linenumber" name="L759" href="#L759">759</a>             <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L760" href="#L760">760</a>                 <strong class="jxr_keyword">int</strong> i = lastRet;
<a class="jxr_linenumber" name="L761" href="#L761">761</a>                 <strong class="jxr_keyword">if</strong> (i == -1)
<a class="jxr_linenumber" name="L762" href="#L762">762</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalStateException();
<a class="jxr_linenumber" name="L763" href="#L763">763</a>                 lastRet = -1;
<a class="jxr_linenumber" name="L764" href="#L764">764</a> 
<a class="jxr_linenumber" name="L765" href="#L765">765</a>                 <strong class="jxr_keyword">int</strong> ti = takeIndex;
<a class="jxr_linenumber" name="L766" href="#L766">766</a>                 removeAt(i);
<a class="jxr_linenumber" name="L767" href="#L767">767</a>                 <em class="jxr_comment">// back up cursor (reset to front if was first element)</em>
<a class="jxr_linenumber" name="L768" href="#L768">768</a>                 nextIndex = (i == ti) ? takeIndex : i;
<a class="jxr_linenumber" name="L769" href="#L769">769</a>                 checkNext();
<a class="jxr_linenumber" name="L770" href="#L770">770</a>             } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L771" href="#L771">771</a>                 monitor.leave();
<a class="jxr_linenumber" name="L772" href="#L772">772</a>             }
<a class="jxr_linenumber" name="L773" href="#L773">773</a>         }
<a class="jxr_linenumber" name="L774" href="#L774">774</a>     }
<a class="jxr_linenumber" name="L775" href="#L775">775</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
