<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Utf8Benchmark xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/base/Utf8Benchmark.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2011 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.base;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> com.google.caliper.BeforeExperiment;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> com.google.caliper.Benchmark;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.caliper.Param;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> java.util.Random;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <em class="jxr_javadoccomment"> * Benchmark for the {@link Utf8} class.</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * @author Martin Buchholz</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/base/Utf8Benchmark.html">Utf8Benchmark</a> {
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  
<a class="jxr_linenumber" name="L33" href="#L33">33</a>    <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/base/Utf8Benchmark.html">MaxCodePoint</a> {
<a class="jxr_linenumber" name="L34" href="#L34">34</a>      <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> value;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  
<a class="jxr_linenumber" name="L36" href="#L36">36</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment">     * Convert the input string to a code point.  Accepts regular</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment">     * decimal numerals, hex strings, and some symbolic names</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment">     * meaningful to humans.</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">int</strong> decode(String userFriendly) {
<a class="jxr_linenumber" name="L42" href="#L42">42</a>        <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L43" href="#L43">43</a>          <strong class="jxr_keyword">return</strong> Integer.decode(userFriendly);
<a class="jxr_linenumber" name="L44" href="#L44">44</a>        } <strong class="jxr_keyword">catch</strong> (NumberFormatException ignored) {
<a class="jxr_linenumber" name="L45" href="#L45">45</a>          <strong class="jxr_keyword">if</strong> (userFriendly.matches(<span class="jxr_string">"(?i)(?:American|English|ASCII)"</span>)) {
<a class="jxr_linenumber" name="L46" href="#L46">46</a>            <em class="jxr_comment">// 1-byte UTF-8 sequences - "American" ASCII text</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>            <strong class="jxr_keyword">return</strong> 0x80;
<a class="jxr_linenumber" name="L48" href="#L48">48</a>          } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (userFriendly.matches(<span class="jxr_string">"(?i)(?:French|Latin|Western.*European)"</span>)) {
<a class="jxr_linenumber" name="L49" href="#L49">49</a>            <em class="jxr_comment">// Mostly 1-byte UTF-8 sequences, mixed with occasional 2-byte</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>            <em class="jxr_comment">// sequences - "Western European" text</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>            <strong class="jxr_keyword">return</strong> 0x90;
<a class="jxr_linenumber" name="L52" href="#L52">52</a>          } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (userFriendly.matches(<span class="jxr_string">"(?i)(?:Branch.*Prediction.*Hostile)"</span>)) {
<a class="jxr_linenumber" name="L53" href="#L53">53</a>            <em class="jxr_comment">// Defeat branch predictor for: c &lt; 0x80 ; branch taken 50% of the time.</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>            <strong class="jxr_keyword">return</strong> 0x100;
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (userFriendly.matches(<span class="jxr_string">"(?i)(?:Greek|Cyrillic|European|ISO.?8859)"</span>)) {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>            <em class="jxr_comment">// Mostly 2-byte UTF-8 sequences - "European" text</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>            <strong class="jxr_keyword">return</strong> 0x800;
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (userFriendly.matches(<span class="jxr_string">"(?i)(?:Chinese|Han|Asian|BMP)"</span>)) {
<a class="jxr_linenumber" name="L59" href="#L59">59</a>            <em class="jxr_comment">// Mostly 3-byte UTF-8 sequences - "Asian" text</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>            <strong class="jxr_keyword">return</strong> Character.MIN_SUPPLEMENTARY_CODE_POINT;
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (userFriendly.matches(<span class="jxr_string">"(?i)(?:Cuneiform|rare|exotic|supplementary.*)"</span>)) {
<a class="jxr_linenumber" name="L62" href="#L62">62</a>            <em class="jxr_comment">// Mostly 4-byte UTF-8 sequences - "rare exotic" text</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>            <strong class="jxr_keyword">return</strong> Character.MAX_CODE_POINT;
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L65" href="#L65">65</a>            <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalArgumentException(<span class="jxr_string">"Can't decode codepoint "</span> + userFriendly);
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          }
<a class="jxr_linenumber" name="L67" href="#L67">67</a>        }
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      }
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../com/google/common/base/Utf8Benchmark.html">MaxCodePoint</a> valueOf(String userFriendly) {
<a class="jxr_linenumber" name="L71" href="#L71">71</a>        <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/base/Utf8Benchmark.html">MaxCodePoint</a>(userFriendly);
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      }
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/base/Utf8Benchmark.html">MaxCodePoint</a>(String userFriendly) {
<a class="jxr_linenumber" name="L75" href="#L75">75</a>        value = decode(userFriendly);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      }
<a class="jxr_linenumber" name="L77" href="#L77">77</a>    }
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  
<a class="jxr_linenumber" name="L79" href="#L79">79</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">   * The default values of maxCodePoint below provide pretty good</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment">   * performance models of different kinds of common human text.</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">   * @see MaxCodePoint#decode</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>    @Param({<span class="jxr_string">"0x80"</span>, <span class="jxr_string">"0x90"</span>, <span class="jxr_string">"0x100"</span>, <span class="jxr_string">"0x800"</span>, <span class="jxr_string">"0x10000"</span>, <span class="jxr_string">"0x10ffff"</span>}) <a href="../../../../com/google/common/base/Utf8Benchmark.html">MaxCodePoint</a> maxCodePoint;
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  
<a class="jxr_linenumber" name="L86" href="#L86">86</a>    @Param({<span class="jxr_string">"100"</span>}) <strong class="jxr_keyword">int</strong> stringCount;
<a class="jxr_linenumber" name="L87" href="#L87">87</a>    @Param({<span class="jxr_string">"16384"</span>}) <strong class="jxr_keyword">int</strong> charCount;
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    <strong class="jxr_keyword">private</strong> CharSequence[] seqs;  <em class="jxr_comment">// actually, all StringBuilders</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>    <strong class="jxr_keyword">private</strong> String[] strings;
<a class="jxr_linenumber" name="L90" href="#L90">90</a>    <strong class="jxr_keyword">private</strong> byte[][] byteArrays;
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  
<a class="jxr_linenumber" name="L92" href="#L92">92</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment">   * Compute arrays of valid unicode text, and store it in 3 forms:</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">   * byte arrays, Strings, and StringBuilders (in a CharSequence[] to</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment">   * make it a little harder for the JVM).</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>    @BeforeExperiment <strong class="jxr_keyword">void</strong> setUp() {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> seed = 99;
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      <strong class="jxr_keyword">final</strong> Random rnd = <strong class="jxr_keyword">new</strong> Random(seed);
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     seqs = <strong class="jxr_keyword">new</strong> CharSequence[stringCount];
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     strings = <strong class="jxr_keyword">new</strong> String[stringCount];
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     byteArrays = <strong class="jxr_keyword">new</strong> byte[stringCount][];
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; stringCount; i++) {
<a class="jxr_linenumber" name="L104" href="#L104">104</a>       StringBuilder sb = <strong class="jxr_keyword">new</strong> StringBuilder();
<a class="jxr_linenumber" name="L105" href="#L105">105</a>       <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; charCount; j++) {
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         <strong class="jxr_keyword">int</strong> codePoint;
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         <em class="jxr_comment">// discard illegal surrogate "codepoints"</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         <strong class="jxr_keyword">do</strong> {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>           codePoint = rnd.nextInt(maxCodePoint.value);
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         } <strong class="jxr_keyword">while</strong> (isSurrogate(codePoint));
<a class="jxr_linenumber" name="L111" href="#L111">111</a>         sb.appendCodePoint(codePoint);
<a class="jxr_linenumber" name="L112" href="#L112">112</a>       }
<a class="jxr_linenumber" name="L113" href="#L113">113</a>       seqs[i] = sb;
<a class="jxr_linenumber" name="L114" href="#L114">114</a>       strings[i] = sb.toString();
<a class="jxr_linenumber" name="L115" href="#L115">115</a>       byteArrays[i] = strings[i].getBytes(Charsets.UTF_8);
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     }
<a class="jxr_linenumber" name="L117" href="#L117">117</a>   }
<a class="jxr_linenumber" name="L118" href="#L118">118</a> 
<a class="jxr_linenumber" name="L119" href="#L119">119</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment">   * Benchmarks {@link Utf8#isWellFormed} on valid byte arrays</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment">   * containing pseudo-randomly-generated codePoints less than {@code</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">   * maxCodePoint}.  A constant seed is used, so separate runs perform</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">   * identical computations.</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a>   @Benchmark <strong class="jxr_keyword">void</strong> isWellFormed(<strong class="jxr_keyword">int</strong> reps) {
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; reps; i++) {
<a class="jxr_linenumber" name="L127" href="#L127">127</a>       <strong class="jxr_keyword">for</strong> (byte[] byteArray : byteArrays) {
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <strong class="jxr_keyword">if</strong> (!Utf8.isWellFormed(byteArray)) {
<a class="jxr_linenumber" name="L129" href="#L129">129</a>           <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> Error(<span class="jxr_string">"unexpected invalid UTF-8"</span>);
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         }
<a class="jxr_linenumber" name="L131" href="#L131">131</a>       }
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     }
<a class="jxr_linenumber" name="L133" href="#L133">133</a>   }
<a class="jxr_linenumber" name="L134" href="#L134">134</a> 
<a class="jxr_linenumber" name="L135" href="#L135">135</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a> <em class="jxr_javadoccomment">   * Benchmarks {@link Utf8#length} on valid strings containing</em>
<a class="jxr_linenumber" name="L137" href="#L137">137</a> <em class="jxr_javadoccomment">   * pseudo-randomly-generated codePoints less than {@code</em>
<a class="jxr_linenumber" name="L138" href="#L138">138</a> <em class="jxr_javadoccomment">   * maxCodePoint}.  A constant seed is used, so separate runs perform</em>
<a class="jxr_linenumber" name="L139" href="#L139">139</a> <em class="jxr_javadoccomment">   * identical computations.</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a>   @Benchmark <strong class="jxr_keyword">void</strong> lengthOfString(<strong class="jxr_keyword">int</strong> reps) {
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; reps; i++) {
<a class="jxr_linenumber" name="L143" href="#L143">143</a>       <strong class="jxr_keyword">for</strong> (String string : strings) {
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         <strong class="jxr_keyword">if</strong> (Utf8.encodedLength(string) == 1237482374) {
<a class="jxr_linenumber" name="L145" href="#L145">145</a>           <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> Error(<span class="jxr_string">"Unlikely! We're just defeating the optimizer!"</span>);
<a class="jxr_linenumber" name="L146" href="#L146">146</a>         }
<a class="jxr_linenumber" name="L147" href="#L147">147</a>       }
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     }
<a class="jxr_linenumber" name="L149" href="#L149">149</a>   }
<a class="jxr_linenumber" name="L150" href="#L150">150</a> 
<a class="jxr_linenumber" name="L151" href="#L151">151</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment">   * Benchmarks {@link Utf8#length} on valid StringBuilders containing</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">   * pseudo-randomly-generated codePoints less than {@code</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">   * maxCodePoint}.  A constant seed is used, so separate runs perform</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">   * identical computations.</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a>   @Benchmark <strong class="jxr_keyword">void</strong> lengthOfStringBuilder(<strong class="jxr_keyword">int</strong> reps) {
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; reps; i++) {
<a class="jxr_linenumber" name="L159" href="#L159">159</a>       <strong class="jxr_keyword">for</strong> (CharSequence seq : seqs) {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         <strong class="jxr_keyword">if</strong> (Utf8.encodedLength(seq) == 1237482374) {
<a class="jxr_linenumber" name="L161" href="#L161">161</a>           <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> Error(<span class="jxr_string">"Unlikely! We're just defeating the optimizer!"</span>);
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         }
<a class="jxr_linenumber" name="L163" href="#L163">163</a>       }
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     }
<a class="jxr_linenumber" name="L165" href="#L165">165</a>   }
<a class="jxr_linenumber" name="L166" href="#L166">166</a> 
<a class="jxr_linenumber" name="L167" href="#L167">167</a>   <em class="jxr_javadoccomment">/** Character.isSurrogate was added in Java SE 7. */</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> isSurrogate(<strong class="jxr_keyword">int</strong> c) {
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     <strong class="jxr_keyword">return</strong> (Character.MIN_HIGH_SURROGATE &lt;= c &amp;&amp;
<a class="jxr_linenumber" name="L170" href="#L170">170</a>             c &lt;= Character.MAX_LOW_SURROGATE);
<a class="jxr_linenumber" name="L171" href="#L171">171</a>   }
<a class="jxr_linenumber" name="L172" href="#L172">172</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
