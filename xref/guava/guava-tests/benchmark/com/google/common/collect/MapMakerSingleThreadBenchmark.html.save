<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>MapMakerSingleThreadBenchmark xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/collect/MapMakerSingleThreadBenchmark.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2010 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.collect;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> com.google.caliper.AfterExperiment;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> com.google.caliper.BeforeExperiment;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.caliper.Benchmark;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.caliper.Param;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Function;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.MapMaker;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> com.google.common.primitives.Ints;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> java.util.Map;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> java.util.Random;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.atomic.AtomicLong;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * Simple single-threaded benchmark for a computing map with maximum size.</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * @author Charles Fry</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/collect/MapMakerSingleThreadBenchmark.html">MapMakerSingleThreadBenchmark</a> {
<a class="jxr_linenumber" name="L37" href="#L37">37</a>    @Param({<span class="jxr_string">"1000"</span>, <span class="jxr_string">"2000"</span>}) <strong class="jxr_keyword">int</strong> maximumSize;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>    @Param(<span class="jxr_string">"5000"</span>) <strong class="jxr_keyword">int</strong> distinctKeys;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>    @Param(<span class="jxr_string">"4"</span>) <strong class="jxr_keyword">int</strong> segments;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  
<a class="jxr_linenumber" name="L41" href="#L41">41</a>    <em class="jxr_comment">// 1 means uniform likelihood of keys; higher means some keys are more popular</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>    <em class="jxr_comment">// tweak this to control hit rate</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>    @Param(<span class="jxr_string">"2.5"</span>) <strong class="jxr_keyword">double</strong> concentration;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  
<a class="jxr_linenumber" name="L45" href="#L45">45</a>    Random random = <strong class="jxr_keyword">new</strong> Random();
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>    Map&lt;Integer, Integer&gt; cache;
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  
<a class="jxr_linenumber" name="L49" href="#L49">49</a>    <strong class="jxr_keyword">int</strong> max;
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  
<a class="jxr_linenumber" name="L51" href="#L51">51</a>    <strong class="jxr_keyword">static</strong> <a href="../../../../java/util/concurrent/atomic/AtomicLong.html">AtomicLong</a> requests = <strong class="jxr_keyword">new</strong> <a href="../../../../java/util/concurrent/atomic/AtomicLong.html">AtomicLong</a>(0);
<a class="jxr_linenumber" name="L52" href="#L52">52</a>    <strong class="jxr_keyword">static</strong> <a href="../../../../java/util/concurrent/atomic/AtomicLong.html">AtomicLong</a> misses = <strong class="jxr_keyword">new</strong> <a href="../../../../java/util/concurrent/atomic/AtomicLong.html">AtomicLong</a>(0);
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  
<a class="jxr_linenumber" name="L54" href="#L54">54</a>    @BeforeExperiment <strong class="jxr_keyword">void</strong> setUp() {
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      <em class="jxr_comment">// random integers will be generated in this range, then raised to the</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      <em class="jxr_comment">// power of (1/concentration) and floor()ed</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      max = Ints.checkedCast((<strong class="jxr_keyword">long</strong>) Math.pow(distinctKeys, concentration));
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      cache = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/collect/MapMaker.html">MapMaker</a>()
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          .concurrencyLevel(segments)
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          .maximumSize(maximumSize)
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          .makeComputingMap(
<a class="jxr_linenumber" name="L63" href="#L63">63</a>              <strong class="jxr_keyword">new</strong> Function&lt;Integer, Integer&gt;() {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>                @Override <strong class="jxr_keyword">public</strong> Integer apply(Integer from) {
<a class="jxr_linenumber" name="L65" href="#L65">65</a>                  <strong class="jxr_keyword">return</strong> (<strong class="jxr_keyword">int</strong>) misses.incrementAndGet();
<a class="jxr_linenumber" name="L66" href="#L66">66</a>                }
<a class="jxr_linenumber" name="L67" href="#L67">67</a>              });
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      <em class="jxr_comment">// To start, fill up the cache.</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <em class="jxr_comment">// Each miss both increments the counter and causes the map to grow by one,</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <em class="jxr_comment">// so until evictions begin, the size of the map is the greatest return</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      <em class="jxr_comment">// value seen so far</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      <strong class="jxr_keyword">while</strong> (cache.get(nextRandomKey()) &lt; maximumSize) {}
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      requests.set(0);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      misses.set(0);
<a class="jxr_linenumber" name="L77" href="#L77">77</a>    }
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  
<a class="jxr_linenumber" name="L79" href="#L79">79</a>    @Benchmark <strong class="jxr_keyword">int</strong> time(<strong class="jxr_keyword">int</strong> reps) {
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      <strong class="jxr_keyword">int</strong> dummy = 0;
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; reps; i++) {
<a class="jxr_linenumber" name="L82" href="#L82">82</a>        dummy += cache.get(nextRandomKey());
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      }
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      requests.addAndGet(reps);
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      <strong class="jxr_keyword">return</strong> dummy;
<a class="jxr_linenumber" name="L86" href="#L86">86</a>    }
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> nextRandomKey() {
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      <strong class="jxr_keyword">int</strong> a = random.nextInt(max);
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_comment">     * For example, if concentration=2.0, the following takes the square root of</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_comment">     * the uniformly-distributed random integer, then truncates any fractional</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_comment">     * part, so higher integers would appear (in this case linearly) more often</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_comment">     * than lower ones.</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      <strong class="jxr_keyword">return</strong> (<strong class="jxr_keyword">int</strong>) Math.pow(a, 1.0 / concentration);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>    }
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  
<a class="jxr_linenumber" name="L100" href="#L100">100</a>   @AfterExperiment <strong class="jxr_keyword">void</strong> tearDown() {
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     <strong class="jxr_keyword">double</strong> req = requests.get();
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     <strong class="jxr_keyword">double</strong> hit = req - misses.get();
<a class="jxr_linenumber" name="L103" href="#L103">103</a> 
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     <em class="jxr_comment">// Currently, this is going into /dev/null, but I'll fix that</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     System.out.println(<span class="jxr_string">"hit rate: "</span> + hit / req);
<a class="jxr_linenumber" name="L106" href="#L106">106</a>   }
<a class="jxr_linenumber" name="L107" href="#L107">107</a> 
<a class="jxr_linenumber" name="L108" href="#L108">108</a>   <em class="jxr_comment">// for proper distributions later:</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a>   <em class="jxr_comment">// import JSci.maths.statistics.ProbabilityDistribution;</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a>   <em class="jxr_comment">// int key = (int) dist.inverse(random.nextDouble());</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
