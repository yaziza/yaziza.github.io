<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>BooleansTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/primitives/BooleansTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2008 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.primitives;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtIncompatible;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.testing.Helpers;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.NullPointerTester;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.SerializableTester;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> java.util.Collections;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> java.util.Comparator;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * Unit test for {@link Booleans}.</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * @author Kevin Bourrillion</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/primitives/BooleansTest.html">BooleansTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L40" href="#L40">40</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong>[] EMPTY = {};
<a class="jxr_linenumber" name="L41" href="#L41">41</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong>[] ARRAY_FALSE = {false};
<a class="jxr_linenumber" name="L42" href="#L42">42</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong>[] ARRAY_TRUE = {<strong class="jxr_keyword">true</strong>};
<a class="jxr_linenumber" name="L43" href="#L43">43</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong>[] ARRAY_FALSE_FALSE = {false, false};
<a class="jxr_linenumber" name="L44" href="#L44">44</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong>[] ARRAY_FALSE_TRUE = {false, <strong class="jxr_keyword">true</strong>};
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  
<a class="jxr_linenumber" name="L46" href="#L46">46</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong>[] VALUES = {false, <strong class="jxr_keyword">true</strong>};
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  
<a class="jxr_linenumber" name="L48" href="#L48">48</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testHashCode() {
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      assertEquals(Boolean.TRUE.hashCode(), Booleans.hashCode(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      assertEquals(Boolean.FALSE.hashCode(), Booleans.hashCode(false));
<a class="jxr_linenumber" name="L51" href="#L51">51</a>    }
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  
<a class="jxr_linenumber" name="L53" href="#L53">53</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCompare() {
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">boolean</strong> x : VALUES) {
<a class="jxr_linenumber" name="L55" href="#L55">55</a>        <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">boolean</strong> y : VALUES) {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          <em class="jxr_comment">// note: spec requires only that the sign is the same</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>          assertEquals(x + <span class="jxr_string">", "</span> + y,
<a class="jxr_linenumber" name="L58" href="#L58">58</a>                       Boolean.valueOf(x).compareTo(y),
<a class="jxr_linenumber" name="L59" href="#L59">59</a>                       Booleans.compare(x, y));
<a class="jxr_linenumber" name="L60" href="#L60">60</a>        }
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      }
<a class="jxr_linenumber" name="L62" href="#L62">62</a>    }
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  
<a class="jxr_linenumber" name="L64" href="#L64">64</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testContains() {
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      assertFalse(Booleans.contains(EMPTY, false));
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      assertFalse(Booleans.contains(ARRAY_FALSE, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      assertTrue(Booleans.contains(ARRAY_FALSE, false));
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      assertTrue(Booleans.contains(ARRAY_FALSE_TRUE, false));
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      assertTrue(Booleans.contains(ARRAY_FALSE_TRUE, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L70" href="#L70">70</a>    }
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  
<a class="jxr_linenumber" name="L72" href="#L72">72</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIndexOf() {
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      assertEquals(-1, Booleans.indexOf(EMPTY, ARRAY_FALSE));
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      assertEquals(-1, Booleans.indexOf(ARRAY_FALSE, ARRAY_FALSE_TRUE));
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      assertEquals(0, Booleans.indexOf(ARRAY_FALSE_FALSE, ARRAY_FALSE));
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      assertEquals(0, Booleans.indexOf(ARRAY_FALSE, ARRAY_FALSE));
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      assertEquals(0, Booleans.indexOf(ARRAY_FALSE_TRUE, ARRAY_FALSE));
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      assertEquals(1, Booleans.indexOf(ARRAY_FALSE_TRUE, ARRAY_TRUE));
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      assertEquals(0, Booleans.indexOf(ARRAY_TRUE, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[0]));
<a class="jxr_linenumber" name="L80" href="#L80">80</a>    }
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  
<a class="jxr_linenumber" name="L82" href="#L82">82</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIndexOf_arrays() {
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      assertEquals(-1, Booleans.indexOf(EMPTY, false));
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      assertEquals(-1, Booleans.indexOf(ARRAY_FALSE, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      assertEquals(-1, Booleans.indexOf(ARRAY_FALSE_FALSE, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      assertEquals(0, Booleans.indexOf(ARRAY_FALSE, false));
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      assertEquals(0, Booleans.indexOf(ARRAY_FALSE_TRUE, false));
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      assertEquals(1, Booleans.indexOf(ARRAY_FALSE_TRUE, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      assertEquals(2, Booleans.indexOf(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {false, false, <strong class="jxr_keyword">true</strong>}, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L90" href="#L90">90</a>    }
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  
<a class="jxr_linenumber" name="L92" href="#L92">92</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testLastIndexOf() {
<a class="jxr_linenumber" name="L93" href="#L93">93</a>      assertEquals(-1, Booleans.lastIndexOf(EMPTY, false));
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      assertEquals(-1, Booleans.lastIndexOf(ARRAY_FALSE, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      assertEquals(-1, Booleans.lastIndexOf(ARRAY_FALSE_FALSE, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      assertEquals(0, Booleans.lastIndexOf(ARRAY_FALSE, false));
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      assertEquals(0, Booleans.lastIndexOf(ARRAY_FALSE_TRUE, false));
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      assertEquals(1, Booleans.lastIndexOf(ARRAY_FALSE_TRUE, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      assertEquals(2, Booleans.lastIndexOf(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {false, <strong class="jxr_keyword">true</strong>, <strong class="jxr_keyword">true</strong>}, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L100" href="#L100">100</a>   }
<a class="jxr_linenumber" name="L101" href="#L101">101</a> 
<a class="jxr_linenumber" name="L102" href="#L102">102</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConcat() {
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     assertTrue(Arrays.equals(EMPTY, Booleans.concat()));
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     assertTrue(Arrays.equals(EMPTY, Booleans.concat(EMPTY)));
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     assertTrue(Arrays.equals(EMPTY, Booleans.concat(EMPTY, EMPTY, EMPTY)));
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     assertTrue(Arrays.equals(ARRAY_FALSE, Booleans.concat(ARRAY_FALSE)));
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     assertNotSame(ARRAY_FALSE, Booleans.concat(ARRAY_FALSE));
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     assertTrue(Arrays.equals(ARRAY_FALSE, Booleans.concat(EMPTY, ARRAY_FALSE, EMPTY)));
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     assertTrue(Arrays.equals(
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {false, false, false},
<a class="jxr_linenumber" name="L111" href="#L111">111</a>         Booleans.concat(ARRAY_FALSE, ARRAY_FALSE, ARRAY_FALSE)));
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     assertTrue(Arrays.equals(
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {false, false, <strong class="jxr_keyword">true</strong>},
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         Booleans.concat(ARRAY_FALSE, ARRAY_FALSE_TRUE)));
<a class="jxr_linenumber" name="L115" href="#L115">115</a>   }
<a class="jxr_linenumber" name="L116" href="#L116">116</a> 
<a class="jxr_linenumber" name="L117" href="#L117">117</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEnsureCapacity() {
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     assertSame(EMPTY, Booleans.ensureCapacity(EMPTY, 0, 1));
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     assertSame(ARRAY_FALSE, Booleans.ensureCapacity(ARRAY_FALSE, 0, 1));
<a class="jxr_linenumber" name="L120" href="#L120">120</a>     assertSame(ARRAY_FALSE, Booleans.ensureCapacity(ARRAY_FALSE, 1, 1));
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     assertTrue(Arrays.equals(
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {<strong class="jxr_keyword">true</strong>, false, false},
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         Booleans.ensureCapacity(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {<strong class="jxr_keyword">true</strong>}, 2, 1)));
<a class="jxr_linenumber" name="L124" href="#L124">124</a>   }
<a class="jxr_linenumber" name="L125" href="#L125">125</a> 
<a class="jxr_linenumber" name="L126" href="#L126">126</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEnsureCapacity_fail() {
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L128" href="#L128">128</a>       Booleans.ensureCapacity(ARRAY_FALSE, -1, 1);
<a class="jxr_linenumber" name="L129" href="#L129">129</a>       fail();
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     }
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L133" href="#L133">133</a>       <em class="jxr_comment">// notice that this should even fail when no growth was needed</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a>       Booleans.ensureCapacity(ARRAY_FALSE, 1, -1);
<a class="jxr_linenumber" name="L135" href="#L135">135</a>       fail();
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     }
<a class="jxr_linenumber" name="L138" href="#L138">138</a>   }
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testJoin() {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     assertEquals(<span class="jxr_string">""</span>, Booleans.join(<span class="jxr_string">","</span>, EMPTY));
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     assertEquals(<span class="jxr_string">"false"</span>, Booleans.join(<span class="jxr_string">","</span>, ARRAY_FALSE));
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     assertEquals(<span class="jxr_string">"false,true"</span>, Booleans.join(<span class="jxr_string">","</span>, false, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     assertEquals(<span class="jxr_string">"falsetruefalse"</span>,
<a class="jxr_linenumber" name="L145" href="#L145">145</a>         Booleans.join(<span class="jxr_string">""</span>, false, <strong class="jxr_keyword">true</strong>, false));
<a class="jxr_linenumber" name="L146" href="#L146">146</a>   }
<a class="jxr_linenumber" name="L147" href="#L147">147</a> 
<a class="jxr_linenumber" name="L148" href="#L148">148</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testLexicographicalComparator() {
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     List&lt;<strong class="jxr_keyword">boolean</strong>[]&gt; ordered = Arrays.asList(
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {},
<a class="jxr_linenumber" name="L151" href="#L151">151</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {false},
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {false, false},
<a class="jxr_linenumber" name="L153" href="#L153">153</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {false, <strong class="jxr_keyword">true</strong>},
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {<strong class="jxr_keyword">true</strong>},
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {<strong class="jxr_keyword">true</strong>, false},
<a class="jxr_linenumber" name="L156" href="#L156">156</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {<strong class="jxr_keyword">true</strong>, <strong class="jxr_keyword">true</strong>},
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[] {<strong class="jxr_keyword">true</strong>, <strong class="jxr_keyword">true</strong>, <strong class="jxr_keyword">true</strong>});
<a class="jxr_linenumber" name="L158" href="#L158">158</a> 
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     Comparator&lt;<strong class="jxr_keyword">boolean</strong>[]&gt; comparator = Booleans.lexicographicalComparator();
<a class="jxr_linenumber" name="L160" href="#L160">160</a>     Helpers.testComparator(comparator, ordered);
<a class="jxr_linenumber" name="L161" href="#L161">161</a>   }
<a class="jxr_linenumber" name="L162" href="#L162">162</a> 
<a class="jxr_linenumber" name="L163" href="#L163">163</a>   @GwtIncompatible(<span class="jxr_string">"SerializableTester"</span>)
<a class="jxr_linenumber" name="L164" href="#L164">164</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testLexicographicalComparatorSerializable() {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     Comparator&lt;<strong class="jxr_keyword">boolean</strong>[]&gt; comparator = Booleans.lexicographicalComparator();
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     assertSame(comparator, SerializableTester.reserialize(comparator));
<a class="jxr_linenumber" name="L167" href="#L167">167</a>   }
<a class="jxr_linenumber" name="L168" href="#L168">168</a> 
<a class="jxr_linenumber" name="L169" href="#L169">169</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testToArray() {
<a class="jxr_linenumber" name="L170" href="#L170">170</a>     <em class="jxr_comment">// need explicit type parameter to avoid javac warning!?</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     List&lt;Boolean&gt; none = Arrays.&lt;Boolean&gt;asList();
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     assertTrue(Arrays.equals(EMPTY, Booleans.toArray(none)));
<a class="jxr_linenumber" name="L173" href="#L173">173</a> 
<a class="jxr_linenumber" name="L174" href="#L174">174</a>     List&lt;Boolean&gt; one = Arrays.asList(false);
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     assertTrue(Arrays.equals(ARRAY_FALSE, Booleans.toArray(one)));
<a class="jxr_linenumber" name="L176" href="#L176">176</a> 
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     <strong class="jxr_keyword">boolean</strong>[] array = {false, false, <strong class="jxr_keyword">true</strong>};
<a class="jxr_linenumber" name="L178" href="#L178">178</a> 
<a class="jxr_linenumber" name="L179" href="#L179">179</a>     List&lt;Boolean&gt; three = Arrays.asList(false, false, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     assertTrue(Arrays.equals(array, Booleans.toArray(three)));
<a class="jxr_linenumber" name="L181" href="#L181">181</a> 
<a class="jxr_linenumber" name="L182" href="#L182">182</a>     assertTrue(Arrays.equals(array, Booleans.toArray(Booleans.asList(array))));
<a class="jxr_linenumber" name="L183" href="#L183">183</a>   }
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testToArray_threadSafe() {
<a class="jxr_linenumber" name="L186" href="#L186">186</a>     <em class="jxr_comment">// Only for booleans, we lengthen VALUES</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a>     <strong class="jxr_keyword">boolean</strong>[] VALUES = BooleansTest.VALUES;
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     VALUES = Booleans.concat(VALUES, VALUES);
<a class="jxr_linenumber" name="L189" href="#L189">189</a> 
<a class="jxr_linenumber" name="L190" href="#L190">190</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> delta : <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { +1, 0, -1 }) {
<a class="jxr_linenumber" name="L191" href="#L191">191</a>       <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; VALUES.length; i++) {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         List&lt;Boolean&gt; list = Booleans.asList(VALUES).subList(0, i);
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         Collection&lt;Boolean&gt; misleadingSize =
<a class="jxr_linenumber" name="L194" href="#L194">194</a>             Helpers.misleadingSizeCollection(delta);
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         misleadingSize.addAll(list);
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         <strong class="jxr_keyword">boolean</strong>[] arr = Booleans.toArray(misleadingSize);
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         assertEquals(i, arr.length);
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; i; j++) {
<a class="jxr_linenumber" name="L199" href="#L199">199</a>           assertEquals(VALUES[j], arr[j]);
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         }
<a class="jxr_linenumber" name="L201" href="#L201">201</a>       }
<a class="jxr_linenumber" name="L202" href="#L202">202</a>     }
<a class="jxr_linenumber" name="L203" href="#L203">203</a>   }
<a class="jxr_linenumber" name="L204" href="#L204">204</a> 
<a class="jxr_linenumber" name="L205" href="#L205">205</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testToArray_withNull() {
<a class="jxr_linenumber" name="L206" href="#L206">206</a>     List&lt;Boolean&gt; list = Arrays.asList(false, <strong class="jxr_keyword">true</strong>, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L207" href="#L207">207</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L208" href="#L208">208</a>       Booleans.toArray(list);
<a class="jxr_linenumber" name="L209" href="#L209">209</a>       fail();
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException expected) {
<a class="jxr_linenumber" name="L211" href="#L211">211</a>     }
<a class="jxr_linenumber" name="L212" href="#L212">212</a>   }
<a class="jxr_linenumber" name="L213" href="#L213">213</a> 
<a class="jxr_linenumber" name="L214" href="#L214">214</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsListIsEmpty() {
<a class="jxr_linenumber" name="L215" href="#L215">215</a>     assertTrue(Booleans.asList(EMPTY).isEmpty());
<a class="jxr_linenumber" name="L216" href="#L216">216</a>     assertFalse(Booleans.asList(ARRAY_FALSE).isEmpty());
<a class="jxr_linenumber" name="L217" href="#L217">217</a>   }
<a class="jxr_linenumber" name="L218" href="#L218">218</a> 
<a class="jxr_linenumber" name="L219" href="#L219">219</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsListSize() {
<a class="jxr_linenumber" name="L220" href="#L220">220</a>     assertEquals(0, Booleans.asList(EMPTY).size());
<a class="jxr_linenumber" name="L221" href="#L221">221</a>     assertEquals(1, Booleans.asList(ARRAY_FALSE).size());
<a class="jxr_linenumber" name="L222" href="#L222">222</a>     assertEquals(2, Booleans.asList(ARRAY_FALSE_TRUE).size());
<a class="jxr_linenumber" name="L223" href="#L223">223</a>   }
<a class="jxr_linenumber" name="L224" href="#L224">224</a> 
<a class="jxr_linenumber" name="L225" href="#L225">225</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsListIndexOf() {
<a class="jxr_linenumber" name="L226" href="#L226">226</a>     assertEquals(-1, Booleans.asList(EMPTY).indexOf(<span class="jxr_string">"wrong type"</span>));
<a class="jxr_linenumber" name="L227" href="#L227">227</a>     assertEquals(-1, Booleans.asList(EMPTY).indexOf(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L228" href="#L228">228</a>     assertEquals(-1, Booleans.asList(ARRAY_FALSE).indexOf(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     assertEquals(0, Booleans.asList(ARRAY_FALSE).indexOf(false));
<a class="jxr_linenumber" name="L230" href="#L230">230</a>     assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).indexOf(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L231" href="#L231">231</a>   }
<a class="jxr_linenumber" name="L232" href="#L232">232</a> 
<a class="jxr_linenumber" name="L233" href="#L233">233</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsListLastIndexOf() {
<a class="jxr_linenumber" name="L234" href="#L234">234</a>     assertEquals(-1, Booleans.asList(EMPTY).indexOf(<span class="jxr_string">"wrong type"</span>));
<a class="jxr_linenumber" name="L235" href="#L235">235</a>     assertEquals(-1, Booleans.asList(EMPTY).indexOf(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L236" href="#L236">236</a>     assertEquals(-1, Booleans.asList(ARRAY_FALSE).lastIndexOf(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).lastIndexOf(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L238" href="#L238">238</a>     assertEquals(1, Booleans.asList(ARRAY_FALSE_FALSE).lastIndexOf(false));
<a class="jxr_linenumber" name="L239" href="#L239">239</a>   }
<a class="jxr_linenumber" name="L240" href="#L240">240</a> 
<a class="jxr_linenumber" name="L241" href="#L241">241</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsListContains() {
<a class="jxr_linenumber" name="L242" href="#L242">242</a>     assertFalse(Booleans.asList(EMPTY).contains(<span class="jxr_string">"wrong type"</span>));
<a class="jxr_linenumber" name="L243" href="#L243">243</a>     assertFalse(Booleans.asList(EMPTY).contains(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L244" href="#L244">244</a>     assertFalse(Booleans.asList(ARRAY_FALSE).contains(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L245" href="#L245">245</a>     assertTrue(Booleans.asList(ARRAY_TRUE).contains(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L246" href="#L246">246</a>     assertTrue(Booleans.asList(ARRAY_FALSE_TRUE).contains(false));
<a class="jxr_linenumber" name="L247" href="#L247">247</a>     assertTrue(Booleans.asList(ARRAY_FALSE_TRUE).contains(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L248" href="#L248">248</a>   }
<a class="jxr_linenumber" name="L249" href="#L249">249</a> 
<a class="jxr_linenumber" name="L250" href="#L250">250</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsListEquals() {
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     assertEquals(Booleans.asList(EMPTY), Collections.emptyList());
<a class="jxr_linenumber" name="L252" href="#L252">252</a>     assertEquals(Booleans.asList(ARRAY_FALSE), Booleans.asList(ARRAY_FALSE));
<a class="jxr_linenumber" name="L253" href="#L253">253</a>     assertFalse(Booleans.asList(ARRAY_FALSE).equals(ARRAY_FALSE));
<a class="jxr_linenumber" name="L254" href="#L254">254</a>     assertFalse(Booleans.asList(ARRAY_FALSE).equals(<strong class="jxr_keyword">null</strong>));
<a class="jxr_linenumber" name="L255" href="#L255">255</a>     assertFalse(Booleans.asList(ARRAY_FALSE).equals(Booleans.asList(ARRAY_FALSE_TRUE)));
<a class="jxr_linenumber" name="L256" href="#L256">256</a>     assertFalse(Booleans.asList(ARRAY_FALSE_FALSE).equals(Booleans.asList(ARRAY_FALSE_TRUE)));
<a class="jxr_linenumber" name="L257" href="#L257">257</a>     assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).lastIndexOf(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     List&lt;Boolean&gt; reference = Booleans.asList(ARRAY_FALSE);
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     assertEquals(Booleans.asList(ARRAY_FALSE), reference);
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     assertEquals(reference, reference);
<a class="jxr_linenumber" name="L261" href="#L261">261</a>   }
<a class="jxr_linenumber" name="L262" href="#L262">262</a> 
<a class="jxr_linenumber" name="L263" href="#L263">263</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsListHashcode() {
<a class="jxr_linenumber" name="L264" href="#L264">264</a>     assertEquals(1, Booleans.asList(EMPTY).hashCode());
<a class="jxr_linenumber" name="L265" href="#L265">265</a>     assertEquals(Booleans.asList(ARRAY_FALSE).hashCode(), Booleans.asList(ARRAY_FALSE).hashCode());
<a class="jxr_linenumber" name="L266" href="#L266">266</a>     List&lt;Boolean&gt; reference = Booleans.asList(ARRAY_FALSE);
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     assertEquals(Booleans.asList(ARRAY_FALSE).hashCode(), reference.hashCode());
<a class="jxr_linenumber" name="L268" href="#L268">268</a>   }
<a class="jxr_linenumber" name="L269" href="#L269">269</a> 
<a class="jxr_linenumber" name="L270" href="#L270">270</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsListToString() {
<a class="jxr_linenumber" name="L271" href="#L271">271</a>     assertEquals(<span class="jxr_string">"[false]"</span>, Booleans.asList(ARRAY_FALSE).toString());
<a class="jxr_linenumber" name="L272" href="#L272">272</a>     assertEquals(<span class="jxr_string">"[false, true]"</span>, Booleans.asList(ARRAY_FALSE_TRUE).toString());
<a class="jxr_linenumber" name="L273" href="#L273">273</a>   }
<a class="jxr_linenumber" name="L274" href="#L274">274</a> 
<a class="jxr_linenumber" name="L275" href="#L275">275</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsListSet() {
<a class="jxr_linenumber" name="L276" href="#L276">276</a>     List&lt;Boolean&gt; list = Booleans.asList(ARRAY_FALSE);
<a class="jxr_linenumber" name="L277" href="#L277">277</a>     assertFalse(list.set(0, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L278" href="#L278">278</a>     assertTrue(list.set(0, false));
<a class="jxr_linenumber" name="L279" href="#L279">279</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L280" href="#L280">280</a>       list.set(0, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L281" href="#L281">281</a>       fail();
<a class="jxr_linenumber" name="L282" href="#L282">282</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException expected) {
<a class="jxr_linenumber" name="L283" href="#L283">283</a>     }
<a class="jxr_linenumber" name="L284" href="#L284">284</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L285" href="#L285">285</a>       list.set(1, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L286" href="#L286">286</a>       fail();
<a class="jxr_linenumber" name="L287" href="#L287">287</a>     } <strong class="jxr_keyword">catch</strong> (IndexOutOfBoundsException expected) {
<a class="jxr_linenumber" name="L288" href="#L288">288</a>     }
<a class="jxr_linenumber" name="L289" href="#L289">289</a>   }
<a class="jxr_linenumber" name="L290" href="#L290">290</a> 
<a class="jxr_linenumber" name="L291" href="#L291">291</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCountTrue() {
<a class="jxr_linenumber" name="L292" href="#L292">292</a>     assertEquals(0, Booleans.countTrue());
<a class="jxr_linenumber" name="L293" href="#L293">293</a>     assertEquals(0, Booleans.countTrue(false));
<a class="jxr_linenumber" name="L294" href="#L294">294</a>     assertEquals(1, Booleans.countTrue(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     assertEquals(3, Booleans.countTrue(false, <strong class="jxr_keyword">true</strong>, false, <strong class="jxr_keyword">true</strong>, false, <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L296" href="#L296">296</a>     assertEquals(1, Booleans.countTrue(false, false, <strong class="jxr_keyword">true</strong>, false, false));
<a class="jxr_linenumber" name="L297" href="#L297">297</a>   }
<a class="jxr_linenumber" name="L298" href="#L298">298</a> 
<a class="jxr_linenumber" name="L299" href="#L299">299</a>   @GwtIncompatible(<span class="jxr_string">"NullPointerTester"</span>)
<a class="jxr_linenumber" name="L300" href="#L300">300</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNulls() {
<a class="jxr_linenumber" name="L301" href="#L301">301</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/NullPointerTester.html">NullPointerTester</a>().testAllPublicStaticMethods(Booleans.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L302" href="#L302">302</a>   }
<a class="jxr_linenumber" name="L303" href="#L303">303</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
