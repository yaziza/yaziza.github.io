<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>UnsignedLongsTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/primitives/UnsignedLongsTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2011 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * in compliance with the License. You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software distributed under the</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * express or implied. See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <strong class="jxr_keyword">package</strong> com.google.common.primitives;
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> java.math.BigInteger.ONE;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtIncompatible;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.testing.Helpers;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.NullPointerTester;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> java.math.BigInteger;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> java.util.Comparator;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> java.util.Random;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * Tests for UnsignedLongs</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * @author Brian Milch</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * @author Louis Wasserman</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/primitives/UnsignedLongsTest.html">UnsignedLongsTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L40" href="#L40">40</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> LEAST = 0L;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> GREATEST = 0xffffffffffffffffL;
<a class="jxr_linenumber" name="L42" href="#L42">42</a>    
<a class="jxr_linenumber" name="L43" href="#L43">43</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCompare() {
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <em class="jxr_comment">// max value</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      assertTrue(UnsignedLongs.compare(0, 0xffffffffffffffffL) &lt; 0);
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      assertTrue(UnsignedLongs.compare(0xffffffffffffffffL, 0) &gt; 0);
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <em class="jxr_comment">// both with high bit set</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      assertTrue(UnsignedLongs.compare(0xff1a618b7f65ea12L, 0xffffffffffffffffL) &lt; 0);
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      assertTrue(UnsignedLongs.compare(0xffffffffffffffffL, 0xff1a618b7f65ea12L) &gt; 0);
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      <em class="jxr_comment">// one with high bit set</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      assertTrue(UnsignedLongs.compare(0x5a4316b8c153ac4dL, 0xff1a618b7f65ea12L) &lt; 0);
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      assertTrue(UnsignedLongs.compare(0xff1a618b7f65ea12L, 0x5a4316b8c153ac4dL) &gt; 0);
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      <em class="jxr_comment">// neither with high bit set</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      assertTrue(UnsignedLongs.compare(0x5a4316b8c153ac4dL, 0x6cf78a4b139a4e2aL) &lt; 0);
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      assertTrue(UnsignedLongs.compare(0x6cf78a4b139a4e2aL, 0x5a4316b8c153ac4dL) &gt; 0);
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <em class="jxr_comment">// same value</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      assertTrue(UnsignedLongs.compare(0xff1a618b7f65ea12L, 0xff1a618b7f65ea12L) == 0);
<a class="jxr_linenumber" name="L62" href="#L62">62</a>    }
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  
<a class="jxr_linenumber" name="L64" href="#L64">64</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMax_noArgs() {
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L66" href="#L66">66</a>        UnsignedLongs.max();
<a class="jxr_linenumber" name="L67" href="#L67">67</a>        fail();
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      }
<a class="jxr_linenumber" name="L70" href="#L70">70</a>    }
<a class="jxr_linenumber" name="L71" href="#L71">71</a>    
<a class="jxr_linenumber" name="L72" href="#L72">72</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMax() {
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      assertEquals(LEAST, UnsignedLongs.max(LEAST));
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      assertEquals(GREATEST, UnsignedLongs.max(GREATEST));
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      assertEquals(0xff1a618b7f65ea12L, UnsignedLongs.max(
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          0x5a4316b8c153ac4dL, 8L, 100L,
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          0L, 0x6cf78a4b139a4e2aL, 0xff1a618b7f65ea12L));
<a class="jxr_linenumber" name="L78" href="#L78">78</a>    }
<a class="jxr_linenumber" name="L79" href="#L79">79</a>    
<a class="jxr_linenumber" name="L80" href="#L80">80</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMin_noArgs() {
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L82" href="#L82">82</a>        UnsignedLongs.min();
<a class="jxr_linenumber" name="L83" href="#L83">83</a>        fail();
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      }
<a class="jxr_linenumber" name="L86" href="#L86">86</a>    }
<a class="jxr_linenumber" name="L87" href="#L87">87</a>    
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMin() {
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      assertEquals(LEAST, UnsignedLongs.min(LEAST));
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      assertEquals(GREATEST, UnsignedLongs.min(GREATEST));
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      assertEquals(0L, UnsignedLongs.min(
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          0x5a4316b8c153ac4dL, 8L, 100L,
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          0L, 0x6cf78a4b139a4e2aL, 0xff1a618b7f65ea12L));
<a class="jxr_linenumber" name="L94" href="#L94">94</a>    }
<a class="jxr_linenumber" name="L95" href="#L95">95</a>    
<a class="jxr_linenumber" name="L96" href="#L96">96</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testLexicographicalComparator() {
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      List&lt;<strong class="jxr_keyword">long</strong>[]&gt; ordered = Arrays.asList(
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] {},
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] {LEAST},
<a class="jxr_linenumber" name="L100" href="#L100">100</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] {LEAST, LEAST},
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] {LEAST, (<strong class="jxr_keyword">long</strong>) 1},
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] {(<strong class="jxr_keyword">long</strong>) 1},
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] {(<strong class="jxr_keyword">long</strong>) 1, LEAST},
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] {GREATEST, GREATEST - (<strong class="jxr_keyword">long</strong>) 1},
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] {GREATEST, GREATEST},
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] {GREATEST, GREATEST, GREATEST});
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     Comparator&lt;<strong class="jxr_keyword">long</strong>[]&gt; comparator = UnsignedLongs.lexicographicalComparator();
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     Helpers.testComparator(comparator, ordered);
<a class="jxr_linenumber" name="L110" href="#L110">110</a>   }
<a class="jxr_linenumber" name="L111" href="#L111">111</a> 
<a class="jxr_linenumber" name="L112" href="#L112">112</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDivide() {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     assertEquals(2, UnsignedLongs.divide(14, 5));
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     assertEquals(0, UnsignedLongs.divide(0, 50));
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     assertEquals(1, UnsignedLongs.divide(0xfffffffffffffffeL, 0xfffffffffffffffdL));
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     assertEquals(0, UnsignedLongs.divide(0xfffffffffffffffdL, 0xfffffffffffffffeL));
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     assertEquals(281479271743488L, UnsignedLongs.divide(0xfffffffffffffffeL, 65535));
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     assertEquals(0x7fffffffffffffffL, UnsignedLongs.divide(0xfffffffffffffffeL, 2));
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     assertEquals(3689348814741910322L, UnsignedLongs.divide(0xfffffffffffffffeL, 5));
<a class="jxr_linenumber" name="L120" href="#L120">120</a>   }
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRemainder() {
<a class="jxr_linenumber" name="L123" href="#L123">123</a>     assertEquals(4, UnsignedLongs.remainder(14, 5));
<a class="jxr_linenumber" name="L124" href="#L124">124</a>     assertEquals(0, UnsignedLongs.remainder(0, 50));
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     assertEquals(1, UnsignedLongs.remainder(0xfffffffffffffffeL, 0xfffffffffffffffdL));
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     assertEquals(0xfffffffffffffffdL,
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         UnsignedLongs.remainder(0xfffffffffffffffdL, 0xfffffffffffffffeL));
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     assertEquals(65534L, UnsignedLongs.remainder(0xfffffffffffffffeL, 65535));
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     assertEquals(0, UnsignedLongs.remainder(0xfffffffffffffffeL, 2));
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     assertEquals(4, UnsignedLongs.remainder(0xfffffffffffffffeL, 5));
<a class="jxr_linenumber" name="L131" href="#L131">131</a>   }
<a class="jxr_linenumber" name="L132" href="#L132">132</a> 
<a class="jxr_linenumber" name="L133" href="#L133">133</a>   @GwtIncompatible(<span class="jxr_string">"Too slow in GWT (~3min fully optimized)"</span>)
<a class="jxr_linenumber" name="L134" href="#L134">134</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDivideRemainderEuclideanProperty() {
<a class="jxr_linenumber" name="L135" href="#L135">135</a>     <em class="jxr_comment">// Use a seed so that the test is deterministic:</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     Random r = <strong class="jxr_keyword">new</strong> Random(0L);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 1000000; i++) {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>       <strong class="jxr_keyword">long</strong> dividend = r.nextLong();
<a class="jxr_linenumber" name="L139" href="#L139">139</a>       <strong class="jxr_keyword">long</strong> divisor = r.nextLong();
<a class="jxr_linenumber" name="L140" href="#L140">140</a>       <em class="jxr_comment">// Test that the Euclidean property is preserved:</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a>       assertEquals(0,
<a class="jxr_linenumber" name="L142" href="#L142">142</a>           dividend - (divisor * UnsignedLongs.divide(dividend, divisor)
<a class="jxr_linenumber" name="L143" href="#L143">143</a>           + UnsignedLongs.remainder(dividend, divisor)));
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     }
<a class="jxr_linenumber" name="L145" href="#L145">145</a>   }
<a class="jxr_linenumber" name="L146" href="#L146">146</a> 
<a class="jxr_linenumber" name="L147" href="#L147">147</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testParseLong() {
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     assertEquals(0xffffffffffffffffL, UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"18446744073709551615"</span>));
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     assertEquals(0x7fffffffffffffffL, UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"9223372036854775807"</span>));
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     assertEquals(0xff1a618b7f65ea12L, UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"18382112080831834642"</span>));
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     assertEquals(0x5a4316b8c153ac4dL, UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"6504067269626408013"</span>));
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     assertEquals(0x6cf78a4b139a4e2aL, UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"7851896530399809066"</span>));
<a class="jxr_linenumber" name="L153" href="#L153">153</a> 
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L155" href="#L155">155</a>       <em class="jxr_comment">// One more than maximum value</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a>       UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"18446744073709551616"</span>);
<a class="jxr_linenumber" name="L157" href="#L157">157</a>       fail();
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     } <strong class="jxr_keyword">catch</strong> (NumberFormatException expected) {
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     }
<a class="jxr_linenumber" name="L160" href="#L160">160</a>   }
<a class="jxr_linenumber" name="L161" href="#L161">161</a> 
<a class="jxr_linenumber" name="L162" href="#L162">162</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDecodeLong() {
<a class="jxr_linenumber" name="L163" href="#L163">163</a>     assertEquals(0xffffffffffffffffL, UnsignedLongs.decode(<span class="jxr_string">"0xffffffffffffffff"</span>));
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     assertEquals(01234567, UnsignedLongs.decode(<span class="jxr_string">"01234567"</span>)); <em class="jxr_comment">// octal</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     assertEquals(0x1234567890abcdefL, UnsignedLongs.decode(<span class="jxr_string">"#1234567890abcdef"</span>));
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     assertEquals(987654321012345678L, UnsignedLongs.decode(<span class="jxr_string">"987654321012345678"</span>));
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     assertEquals(0x135791357913579L, UnsignedLongs.decode(<span class="jxr_string">"0x135791357913579"</span>));
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     assertEquals(0x135791357913579L, UnsignedLongs.decode(<span class="jxr_string">"0X135791357913579"</span>));
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     assertEquals(0L, UnsignedLongs.decode(<span class="jxr_string">"0"</span>));
<a class="jxr_linenumber" name="L170" href="#L170">170</a>   }
<a class="jxr_linenumber" name="L171" href="#L171">171</a> 
<a class="jxr_linenumber" name="L172" href="#L172">172</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDecodeLongFails() {
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L174" href="#L174">174</a>       <em class="jxr_comment">// One more than maximum value</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a>       UnsignedLongs.decode(<span class="jxr_string">"0xfffffffffffffffff"</span>);
<a class="jxr_linenumber" name="L176" href="#L176">176</a>       fail();
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     } <strong class="jxr_keyword">catch</strong> (NumberFormatException expected) {
<a class="jxr_linenumber" name="L178" href="#L178">178</a>     }
<a class="jxr_linenumber" name="L179" href="#L179">179</a> 
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L181" href="#L181">181</a>       UnsignedLongs.decode(<span class="jxr_string">"-5"</span>);
<a class="jxr_linenumber" name="L182" href="#L182">182</a>       fail();
<a class="jxr_linenumber" name="L183" href="#L183">183</a>     } <strong class="jxr_keyword">catch</strong> (NumberFormatException expected) {
<a class="jxr_linenumber" name="L184" href="#L184">184</a>     }
<a class="jxr_linenumber" name="L185" href="#L185">185</a> 
<a class="jxr_linenumber" name="L186" href="#L186">186</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L187" href="#L187">187</a>       UnsignedLongs.decode(<span class="jxr_string">"-0x5"</span>);
<a class="jxr_linenumber" name="L188" href="#L188">188</a>       fail();
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     } <strong class="jxr_keyword">catch</strong> (NumberFormatException expected) {
<a class="jxr_linenumber" name="L190" href="#L190">190</a>     }
<a class="jxr_linenumber" name="L191" href="#L191">191</a> 
<a class="jxr_linenumber" name="L192" href="#L192">192</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L193" href="#L193">193</a>       UnsignedLongs.decode(<span class="jxr_string">"-05"</span>);
<a class="jxr_linenumber" name="L194" href="#L194">194</a>       fail();
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     } <strong class="jxr_keyword">catch</strong> (NumberFormatException expected) {
<a class="jxr_linenumber" name="L196" href="#L196">196</a>     }
<a class="jxr_linenumber" name="L197" href="#L197">197</a>   }
<a class="jxr_linenumber" name="L198" href="#L198">198</a> 
<a class="jxr_linenumber" name="L199" href="#L199">199</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testParseLongWithRadix() {
<a class="jxr_linenumber" name="L200" href="#L200">200</a>     assertEquals(0xffffffffffffffffL, UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"ffffffffffffffff"</span>, 16));
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     assertEquals(0x1234567890abcdefL, UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"1234567890abcdef"</span>, 16));
<a class="jxr_linenumber" name="L202" href="#L202">202</a> 
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     BigInteger max = BigInteger.ZERO.setBit(64).subtract(ONE);
<a class="jxr_linenumber" name="L204" href="#L204">204</a>     <em class="jxr_comment">// loops through all legal radix values.</em>
<a class="jxr_linenumber" name="L205" href="#L205">205</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> radix = Character.MIN_RADIX; radix &lt;= Character.MAX_RADIX; radix++) {
<a class="jxr_linenumber" name="L206" href="#L206">206</a>       <em class="jxr_comment">// tests can successfully parse a number string with this radix.</em>
<a class="jxr_linenumber" name="L207" href="#L207">207</a>       String maxAsString = max.toString(radix);
<a class="jxr_linenumber" name="L208" href="#L208">208</a>       assertEquals(max.longValue(), UnsignedLongs.parseUnsignedLong(maxAsString, radix));
<a class="jxr_linenumber" name="L209" href="#L209">209</a> 
<a class="jxr_linenumber" name="L210" href="#L210">210</a>       <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         <em class="jxr_comment">// tests that we get exception whre an overflow would occur.</em>
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         BigInteger overflow = max.add(ONE);
<a class="jxr_linenumber" name="L213" href="#L213">213</a>         String overflowAsString = overflow.toString(radix);
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         UnsignedLongs.parseUnsignedLong(overflowAsString, radix);
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         fail();
<a class="jxr_linenumber" name="L216" href="#L216">216</a>       } <strong class="jxr_keyword">catch</strong> (NumberFormatException expected) {
<a class="jxr_linenumber" name="L217" href="#L217">217</a>       }
<a class="jxr_linenumber" name="L218" href="#L218">218</a>     }
<a class="jxr_linenumber" name="L219" href="#L219">219</a> 
<a class="jxr_linenumber" name="L220" href="#L220">220</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L221" href="#L221">221</a>       UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"1234567890abcdef1"</span>, 16);
<a class="jxr_linenumber" name="L222" href="#L222">222</a>       fail();
<a class="jxr_linenumber" name="L223" href="#L223">223</a>     } <strong class="jxr_keyword">catch</strong> (NumberFormatException expected) {
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     }
<a class="jxr_linenumber" name="L225" href="#L225">225</a>   }
<a class="jxr_linenumber" name="L226" href="#L226">226</a> 
<a class="jxr_linenumber" name="L227" href="#L227">227</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testParseLongThrowsExceptionForInvalidRadix() {
<a class="jxr_linenumber" name="L228" href="#L228">228</a>     <em class="jxr_comment">// Valid radix values are Character.MIN_RADIX to Character.MAX_RADIX, inclusive.</em>
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L230" href="#L230">230</a>       UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"0"</span>, Character.MIN_RADIX - 1);
<a class="jxr_linenumber" name="L231" href="#L231">231</a>       fail();
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     } <strong class="jxr_keyword">catch</strong> (NumberFormatException expected) {
<a class="jxr_linenumber" name="L233" href="#L233">233</a>     }
<a class="jxr_linenumber" name="L234" href="#L234">234</a> 
<a class="jxr_linenumber" name="L235" href="#L235">235</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L236" href="#L236">236</a>       UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"0"</span>, Character.MAX_RADIX + 1);
<a class="jxr_linenumber" name="L237" href="#L237">237</a>       fail();
<a class="jxr_linenumber" name="L238" href="#L238">238</a>     } <strong class="jxr_keyword">catch</strong> (NumberFormatException expected) {
<a class="jxr_linenumber" name="L239" href="#L239">239</a>     }
<a class="jxr_linenumber" name="L240" href="#L240">240</a> 
<a class="jxr_linenumber" name="L241" href="#L241">241</a>     <em class="jxr_comment">// The radix is used as an array index, so try a negative value.</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L243" href="#L243">243</a>       UnsignedLongs.parseUnsignedLong(<span class="jxr_string">"0"</span>, -1);
<a class="jxr_linenumber" name="L244" href="#L244">244</a>       fail();
<a class="jxr_linenumber" name="L245" href="#L245">245</a>     } <strong class="jxr_keyword">catch</strong> (NumberFormatException expected) {
<a class="jxr_linenumber" name="L246" href="#L246">246</a>     }
<a class="jxr_linenumber" name="L247" href="#L247">247</a>   }
<a class="jxr_linenumber" name="L248" href="#L248">248</a> 
<a class="jxr_linenumber" name="L249" href="#L249">249</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testToString() {
<a class="jxr_linenumber" name="L250" href="#L250">250</a>     String[] tests = {
<a class="jxr_linenumber" name="L251" href="#L251">251</a>         <span class="jxr_string">"ffffffffffffffff"</span>,
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         <span class="jxr_string">"7fffffffffffffff"</span>,
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         <span class="jxr_string">"ff1a618b7f65ea12"</span>,
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         <span class="jxr_string">"5a4316b8c153ac4d"</span>,
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         <span class="jxr_string">"6cf78a4b139a4e2a"</span>
<a class="jxr_linenumber" name="L256" href="#L256">256</a>     };
<a class="jxr_linenumber" name="L257" href="#L257">257</a>     <strong class="jxr_keyword">int</strong>[] bases = { 2, 5, 7, 8, 10, 16 };
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> base : bases) {
<a class="jxr_linenumber" name="L259" href="#L259">259</a>       <strong class="jxr_keyword">for</strong> (String x : tests) {
<a class="jxr_linenumber" name="L260" href="#L260">260</a>         BigInteger xValue = <strong class="jxr_keyword">new</strong> BigInteger(x, 16);
<a class="jxr_linenumber" name="L261" href="#L261">261</a>         <strong class="jxr_keyword">long</strong> xLong = xValue.longValue(); <em class="jxr_comment">// signed</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a>         assertEquals(xValue.toString(base), UnsignedLongs.toString(xLong, base));
<a class="jxr_linenumber" name="L263" href="#L263">263</a>       }
<a class="jxr_linenumber" name="L264" href="#L264">264</a>     }
<a class="jxr_linenumber" name="L265" href="#L265">265</a>   }
<a class="jxr_linenumber" name="L266" href="#L266">266</a> 
<a class="jxr_linenumber" name="L267" href="#L267">267</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testJoin() {
<a class="jxr_linenumber" name="L268" href="#L268">268</a>     assertEquals(<span class="jxr_string">""</span>, UnsignedLongs.join(<span class="jxr_string">","</span>));
<a class="jxr_linenumber" name="L269" href="#L269">269</a>     assertEquals(<span class="jxr_string">"1"</span>, UnsignedLongs.join(<span class="jxr_string">","</span>, 1));
<a class="jxr_linenumber" name="L270" href="#L270">270</a>     assertEquals(<span class="jxr_string">"1,2"</span>, UnsignedLongs.join(<span class="jxr_string">","</span>, 1, 2));
<a class="jxr_linenumber" name="L271" href="#L271">271</a>     assertEquals(<span class="jxr_string">"18446744073709551615,9223372036854775808"</span>,
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         UnsignedLongs.join(<span class="jxr_string">","</span>, -1, Long.MIN_VALUE));
<a class="jxr_linenumber" name="L273" href="#L273">273</a>     assertEquals(<span class="jxr_string">"123"</span>, UnsignedLongs.join(<span class="jxr_string">""</span>, 1, 2, 3));
<a class="jxr_linenumber" name="L274" href="#L274">274</a>     assertEquals(<span class="jxr_string">"184467440737095516159223372036854775808"</span>,
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         UnsignedLongs.join(<span class="jxr_string">""</span>, -1, Long.MIN_VALUE));
<a class="jxr_linenumber" name="L276" href="#L276">276</a>   }
<a class="jxr_linenumber" name="L277" href="#L277">277</a> 
<a class="jxr_linenumber" name="L278" href="#L278">278</a>   @GwtIncompatible(<span class="jxr_string">"NullPointerTester"</span>)
<a class="jxr_linenumber" name="L279" href="#L279">279</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNulls() {
<a class="jxr_linenumber" name="L280" href="#L280">280</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/NullPointerTester.html">NullPointerTester</a>().testAllPublicStaticMethods(UnsignedLongs.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L281" href="#L281">281</a>   }
<a class="jxr_linenumber" name="L282" href="#L282">282</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
