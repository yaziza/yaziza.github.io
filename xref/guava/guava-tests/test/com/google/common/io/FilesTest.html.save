<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>FilesTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/io/FilesTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2007 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.io;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.io.Files.createTempDir;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.io.Files.touch;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.truth.Truth.assertThat;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Charsets;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableList;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> com.google.common.hash.Hashing;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> com.google.common.primitives.Bytes;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestSuite;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> java.io.BufferedReader;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> java.io.BufferedWriter;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> java.io.ByteArrayOutputStream;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> java.io.File;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> java.io.FileInputStream;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> java.io.FileNotFoundException;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> java.io.IOException;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> java.io.InputStream;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> java.io.PrintWriter;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">import</strong> java.io.RandomAccessFile;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <strong class="jxr_keyword">import</strong> java.nio.ByteBuffer;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <strong class="jxr_keyword">import</strong> java.nio.MappedByteBuffer;
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <strong class="jxr_keyword">import</strong> java.nio.channels.FileChannel.MapMode;
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <strong class="jxr_keyword">import</strong> java.util.Random;
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> * Unit test for {@link Files}.</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> * @author Chris Nokleberg</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/io/FilesTest.html">FilesTest</a> <strong class="jxr_keyword">extends</strong> <a href="../../../../com/google/common/io/IoTestCase.html">IoTestCase</a> {
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  
<a class="jxr_linenumber" name="L55" href="#L55">55</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> TestSuite suite() {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      TestSuite suite = <strong class="jxr_keyword">new</strong> TestSuite();
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      suite.addTest(ByteSourceTester.tests(<span class="jxr_string">"Files.asByteSource[File]"</span>,
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          SourceSinkFactories.fileByteSourceFactory(), <strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      suite.addTest(ByteSinkTester.tests(<span class="jxr_string">"Files.asByteSink[File]"</span>,
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          SourceSinkFactories.fileByteSinkFactory()));
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      suite.addTest(ByteSinkTester.tests(<span class="jxr_string">"Files.asByteSink[File, APPEND]"</span>,
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          SourceSinkFactories.appendingFileByteSinkFactory()));
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      suite.addTest(CharSourceTester.tests(<span class="jxr_string">"Files.asCharSource[File, Charset]"</span>,
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          SourceSinkFactories.fileCharSourceFactory()));
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      suite.addTest(CharSinkTester.tests(<span class="jxr_string">"Files.asCharSink[File, Charset]"</span>,
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          SourceSinkFactories.fileCharSinkFactory()));
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      suite.addTest(CharSinkTester.tests(<span class="jxr_string">"Files.asCharSink[File, Charset, APPEND]"</span>,
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          SourceSinkFactories.appendingFileCharSinkFactory()));
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      suite.addTestSuite(FilesTest.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <strong class="jxr_keyword">return</strong> suite;
<a class="jxr_linenumber" name="L71" href="#L71">71</a>    }
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  
<a class="jxr_linenumber" name="L73" href="#L73">73</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testToByteArray() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      File i18nFile = getTestFile(<span class="jxr_string">"i18n.txt"</span>);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      assertTrue(Arrays.equals(ASCII.getBytes(Charsets.US_ASCII),
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          Files.toByteArray(asciiFile)));
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      assertTrue(Arrays.equals(I18N.getBytes(Charsets.UTF_8),
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          Files.toByteArray(i18nFile)));
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      assertTrue(Arrays.equals(I18N.getBytes(Charsets.UTF_8),
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          Files.asByteSource(i18nFile).read()));
<a class="jxr_linenumber" name="L82" href="#L82">82</a>    }
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  
<a class="jxr_linenumber" name="L84" href="#L84">84</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testReadFile_withCorrectSize() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      <a href="../../../../com/google/common/io/Closer.html">Closer</a> closer = Closer.create();
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L89" href="#L89">89</a>        InputStream in = closer.register(<strong class="jxr_keyword">new</strong> FileInputStream(asciiFile));
<a class="jxr_linenumber" name="L90" href="#L90">90</a>        byte[] bytes = Files.readFile(in, asciiFile.length());
<a class="jxr_linenumber" name="L91" href="#L91">91</a>        assertTrue(Arrays.equals(ASCII.getBytes(Charsets.US_ASCII), bytes));
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      } <strong class="jxr_keyword">catch</strong> (Throwable e) {
<a class="jxr_linenumber" name="L93" href="#L93">93</a>        <strong class="jxr_keyword">throw</strong> closer.rethrow(e);
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L95" href="#L95">95</a>        closer.close();
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      }
<a class="jxr_linenumber" name="L97" href="#L97">97</a>    }
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  
<a class="jxr_linenumber" name="L99" href="#L99">99</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testReadFile_withSmallerSize() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L101" href="#L101">101</a> 
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     <a href="../../../../com/google/common/io/Closer.html">Closer</a> closer = Closer.create();
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L104" href="#L104">104</a>       InputStream in = closer.register(<strong class="jxr_keyword">new</strong> FileInputStream(asciiFile));
<a class="jxr_linenumber" name="L105" href="#L105">105</a>       byte[] bytes = Files.readFile(in, 10);
<a class="jxr_linenumber" name="L106" href="#L106">106</a>       assertTrue(Arrays.equals(ASCII.getBytes(Charsets.US_ASCII), bytes));
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     } <strong class="jxr_keyword">catch</strong> (Throwable e) {
<a class="jxr_linenumber" name="L108" href="#L108">108</a>       <strong class="jxr_keyword">throw</strong> closer.rethrow(e);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L110" href="#L110">110</a>       closer.close();
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     }
<a class="jxr_linenumber" name="L112" href="#L112">112</a>   }
<a class="jxr_linenumber" name="L113" href="#L113">113</a> 
<a class="jxr_linenumber" name="L114" href="#L114">114</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testReadFile_withLargerSize() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L116" href="#L116">116</a> 
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     <a href="../../../../com/google/common/io/Closer.html">Closer</a> closer = Closer.create();
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L119" href="#L119">119</a>       InputStream in = closer.register(<strong class="jxr_keyword">new</strong> FileInputStream(asciiFile));
<a class="jxr_linenumber" name="L120" href="#L120">120</a>       byte[] bytes = Files.readFile(in, 500);
<a class="jxr_linenumber" name="L121" href="#L121">121</a>       assertTrue(Arrays.equals(ASCII.getBytes(Charsets.US_ASCII), bytes));
<a class="jxr_linenumber" name="L122" href="#L122">122</a>     } <strong class="jxr_keyword">catch</strong> (Throwable e) {
<a class="jxr_linenumber" name="L123" href="#L123">123</a>       <strong class="jxr_keyword">throw</strong> closer.rethrow(e);
<a class="jxr_linenumber" name="L124" href="#L124">124</a>     } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L125" href="#L125">125</a>       closer.close();
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     }
<a class="jxr_linenumber" name="L127" href="#L127">127</a>   }
<a class="jxr_linenumber" name="L128" href="#L128">128</a> 
<a class="jxr_linenumber" name="L129" href="#L129">129</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testReadFile_withSizeZero() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L131" href="#L131">131</a> 
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     <a href="../../../../com/google/common/io/Closer.html">Closer</a> closer = Closer.create();
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>       InputStream in = closer.register(<strong class="jxr_keyword">new</strong> FileInputStream(asciiFile));
<a class="jxr_linenumber" name="L135" href="#L135">135</a>       byte[] bytes = Files.readFile(in, 0);
<a class="jxr_linenumber" name="L136" href="#L136">136</a>       assertTrue(Arrays.equals(ASCII.getBytes(Charsets.US_ASCII), bytes));
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     } <strong class="jxr_keyword">catch</strong> (Throwable e) {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>       <strong class="jxr_keyword">throw</strong> closer.rethrow(e);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>     } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L140" href="#L140">140</a>       closer.close();
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     }
<a class="jxr_linenumber" name="L142" href="#L142">142</a>   }
<a class="jxr_linenumber" name="L143" href="#L143">143</a> 
<a class="jxr_linenumber" name="L144" href="#L144">144</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a> <em class="jxr_javadoccomment">   * A {@link File} that provides a specialized value for {link File#length()}.</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/io/FilesTest.html">BadLengthFile</a> <strong class="jxr_keyword">extends</strong> File {
<a class="jxr_linenumber" name="L148" href="#L148">148</a> 
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> badLength;
<a class="jxr_linenumber" name="L150" href="#L150">150</a> 
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/io/FilesTest.html">BadLengthFile</a>(File delegate, <strong class="jxr_keyword">long</strong> badLength) {
<a class="jxr_linenumber" name="L152" href="#L152">152</a>       <strong class="jxr_keyword">super</strong>(delegate.getPath());
<a class="jxr_linenumber" name="L153" href="#L153">153</a>       <strong class="jxr_keyword">this</strong>.badLength = badLength;
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     }
<a class="jxr_linenumber" name="L155" href="#L155">155</a> 
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     @Override
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">long</strong> length() {
<a class="jxr_linenumber" name="L158" href="#L158">158</a>       <strong class="jxr_keyword">return</strong> badLength;
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     }
<a class="jxr_linenumber" name="L160" href="#L160">160</a> 
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 0;
<a class="jxr_linenumber" name="L162" href="#L162">162</a>   }
<a class="jxr_linenumber" name="L163" href="#L163">163</a> 
<a class="jxr_linenumber" name="L164" href="#L164">164</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testToString() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     File i18nFile = getTestFile(<span class="jxr_string">"i18n.txt"</span>);
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     assertEquals(ASCII, Files.toString(asciiFile, Charsets.US_ASCII));
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     assertEquals(I18N, Files.toString(i18nFile, Charsets.UTF_8));
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     assertThat(Files.toString(i18nFile, Charsets.US_ASCII))
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         .isNotEqualTo(I18N);
<a class="jxr_linenumber" name="L171" href="#L171">171</a>   }
<a class="jxr_linenumber" name="L172" href="#L172">172</a> 
<a class="jxr_linenumber" name="L173" href="#L173">173</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testWriteString() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L174" href="#L174">174</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     Files.write(I18N, temp, Charsets.UTF_16LE);
<a class="jxr_linenumber" name="L176" href="#L176">176</a>     assertEquals(I18N, Files.toString(temp, Charsets.UTF_16LE));
<a class="jxr_linenumber" name="L177" href="#L177">177</a>   }
<a class="jxr_linenumber" name="L178" href="#L178">178</a> 
<a class="jxr_linenumber" name="L179" href="#L179">179</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testWriteBytes() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L181" href="#L181">181</a>     byte[] data = newPreFilledByteArray(2000);
<a class="jxr_linenumber" name="L182" href="#L182">182</a>     Files.write(data, temp);
<a class="jxr_linenumber" name="L183" href="#L183">183</a>     assertTrue(Arrays.equals(data, Files.toByteArray(temp)));
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L186" href="#L186">186</a>       Files.write(<strong class="jxr_keyword">null</strong>, temp);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>       fail(<span class="jxr_string">"expected exception"</span>);
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException expected) {
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     }
<a class="jxr_linenumber" name="L190" href="#L190">190</a>   }
<a class="jxr_linenumber" name="L191" href="#L191">191</a> 
<a class="jxr_linenumber" name="L192" href="#L192">192</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAppendString() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L194" href="#L194">194</a>     Files.append(I18N, temp, Charsets.UTF_16LE);
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     assertEquals(I18N, Files.toString(temp, Charsets.UTF_16LE));
<a class="jxr_linenumber" name="L196" href="#L196">196</a>     Files.append(I18N, temp, Charsets.UTF_16LE);
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     assertEquals(I18N + I18N, Files.toString(temp, Charsets.UTF_16LE));
<a class="jxr_linenumber" name="L198" href="#L198">198</a>     Files.append(I18N, temp, Charsets.UTF_16LE);
<a class="jxr_linenumber" name="L199" href="#L199">199</a>     assertEquals(I18N + I18N + I18N, Files.toString(temp, Charsets.UTF_16LE));
<a class="jxr_linenumber" name="L200" href="#L200">200</a>   }
<a class="jxr_linenumber" name="L201" href="#L201">201</a> 
<a class="jxr_linenumber" name="L202" href="#L202">202</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCopyToOutputStream() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     File i18nFile = getTestFile(<span class="jxr_string">"i18n.txt"</span>);
<a class="jxr_linenumber" name="L204" href="#L204">204</a>     ByteArrayOutputStream out = <strong class="jxr_keyword">new</strong> ByteArrayOutputStream();
<a class="jxr_linenumber" name="L205" href="#L205">205</a>     Files.copy(i18nFile, out);
<a class="jxr_linenumber" name="L206" href="#L206">206</a>     assertEquals(I18N, out.toString(<span class="jxr_string">"UTF-8"</span>));
<a class="jxr_linenumber" name="L207" href="#L207">207</a>   }
<a class="jxr_linenumber" name="L208" href="#L208">208</a> 
<a class="jxr_linenumber" name="L209" href="#L209">209</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCopyToAppendable() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     File i18nFile = getTestFile(<span class="jxr_string">"i18n.txt"</span>);
<a class="jxr_linenumber" name="L211" href="#L211">211</a>     StringBuilder sb = <strong class="jxr_keyword">new</strong> StringBuilder();
<a class="jxr_linenumber" name="L212" href="#L212">212</a>     Files.copy(i18nFile, Charsets.UTF_8, sb);
<a class="jxr_linenumber" name="L213" href="#L213">213</a>     assertEquals(I18N, sb.toString());
<a class="jxr_linenumber" name="L214" href="#L214">214</a>   }
<a class="jxr_linenumber" name="L215" href="#L215">215</a> 
<a class="jxr_linenumber" name="L216" href="#L216">216</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCopyFile() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     File i18nFile = getTestFile(<span class="jxr_string">"i18n.txt"</span>);
<a class="jxr_linenumber" name="L218" href="#L218">218</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L219" href="#L219">219</a>     Files.copy(i18nFile, temp);
<a class="jxr_linenumber" name="L220" href="#L220">220</a>     assertEquals(I18N, Files.toString(temp, Charsets.UTF_8));
<a class="jxr_linenumber" name="L221" href="#L221">221</a>   }
<a class="jxr_linenumber" name="L222" href="#L222">222</a> 
<a class="jxr_linenumber" name="L223" href="#L223">223</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCopyEqualFiles() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     File temp1 = createTempFile();
<a class="jxr_linenumber" name="L225" href="#L225">225</a>     File temp2 = file(temp1.getPath());
<a class="jxr_linenumber" name="L226" href="#L226">226</a>     assertEquals(temp1, temp2);
<a class="jxr_linenumber" name="L227" href="#L227">227</a>     Files.write(ASCII, temp1, Charsets.UTF_8);
<a class="jxr_linenumber" name="L228" href="#L228">228</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L229" href="#L229">229</a>       Files.copy(temp1, temp2);
<a class="jxr_linenumber" name="L230" href="#L230">230</a>       fail(<span class="jxr_string">"Expected an IAE to be thrown but wasn't"</span>);
<a class="jxr_linenumber" name="L231" href="#L231">231</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     }
<a class="jxr_linenumber" name="L233" href="#L233">233</a>     assertEquals(ASCII, Files.toString(temp1, Charsets.UTF_8));
<a class="jxr_linenumber" name="L234" href="#L234">234</a>   }
<a class="jxr_linenumber" name="L235" href="#L235">235</a> 
<a class="jxr_linenumber" name="L236" href="#L236">236</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCopySameFile() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L238" href="#L238">238</a>     Files.write(ASCII, temp, Charsets.UTF_8);
<a class="jxr_linenumber" name="L239" href="#L239">239</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L240" href="#L240">240</a>       Files.copy(temp, temp);
<a class="jxr_linenumber" name="L241" href="#L241">241</a>       fail(<span class="jxr_string">"Expected an IAE to be thrown but wasn't"</span>);
<a class="jxr_linenumber" name="L242" href="#L242">242</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L243" href="#L243">243</a>     }
<a class="jxr_linenumber" name="L244" href="#L244">244</a>     assertEquals(ASCII, Files.toString(temp, Charsets.UTF_8));
<a class="jxr_linenumber" name="L245" href="#L245">245</a>   }
<a class="jxr_linenumber" name="L246" href="#L246">246</a> 
<a class="jxr_linenumber" name="L247" href="#L247">247</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCopyIdenticalFiles() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L248" href="#L248">248</a>     File temp1 = createTempFile();
<a class="jxr_linenumber" name="L249" href="#L249">249</a>     Files.write(ASCII, temp1, Charsets.UTF_8);
<a class="jxr_linenumber" name="L250" href="#L250">250</a>     File temp2 = createTempFile();
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     Files.write(ASCII, temp2, Charsets.UTF_8);
<a class="jxr_linenumber" name="L252" href="#L252">252</a>     Files.copy(temp1, temp2);
<a class="jxr_linenumber" name="L253" href="#L253">253</a>     assertEquals(ASCII, Files.toString(temp1, Charsets.UTF_8));
<a class="jxr_linenumber" name="L254" href="#L254">254</a>   }
<a class="jxr_linenumber" name="L255" href="#L255">255</a> 
<a class="jxr_linenumber" name="L256" href="#L256">256</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEqual() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L257" href="#L257">257</a>     File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     File i18nFile = getTestFile(<span class="jxr_string">"i18n.txt"</span>);
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     assertFalse(Files.equal(asciiFile, i18nFile));
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     assertTrue(Files.equal(asciiFile, asciiFile));
<a class="jxr_linenumber" name="L261" href="#L261">261</a> 
<a class="jxr_linenumber" name="L262" href="#L262">262</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L263" href="#L263">263</a>     Files.copy(asciiFile, temp);
<a class="jxr_linenumber" name="L264" href="#L264">264</a>     assertTrue(Files.equal(asciiFile, temp));
<a class="jxr_linenumber" name="L265" href="#L265">265</a> 
<a class="jxr_linenumber" name="L266" href="#L266">266</a>     Files.copy(i18nFile, temp);
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     assertTrue(Files.equal(i18nFile, temp));
<a class="jxr_linenumber" name="L268" href="#L268">268</a> 
<a class="jxr_linenumber" name="L269" href="#L269">269</a>     Files.copy(asciiFile, temp);
<a class="jxr_linenumber" name="L270" href="#L270">270</a>     RandomAccessFile rf = <strong class="jxr_keyword">new</strong> RandomAccessFile(temp, <span class="jxr_string">"rw"</span>);
<a class="jxr_linenumber" name="L271" href="#L271">271</a>     rf.writeByte(0);
<a class="jxr_linenumber" name="L272" href="#L272">272</a>     rf.close();
<a class="jxr_linenumber" name="L273" href="#L273">273</a>     assertEquals(asciiFile.length(), temp.length());
<a class="jxr_linenumber" name="L274" href="#L274">274</a>     assertFalse(Files.equal(asciiFile, temp));
<a class="jxr_linenumber" name="L275" href="#L275">275</a> 
<a class="jxr_linenumber" name="L276" href="#L276">276</a>     assertTrue(Files.asByteSource(asciiFile)
<a class="jxr_linenumber" name="L277" href="#L277">277</a>         .contentEquals(Files.asByteSource(asciiFile)));
<a class="jxr_linenumber" name="L278" href="#L278">278</a> 
<a class="jxr_linenumber" name="L279" href="#L279">279</a>     <em class="jxr_comment">// 0-length files have special treatment (/proc, etc.)</em>
<a class="jxr_linenumber" name="L280" href="#L280">280</a>     assertTrue(Files.equal(asciiFile, <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/io/FilesTest.html">BadLengthFile</a>(asciiFile, 0)));
<a class="jxr_linenumber" name="L281" href="#L281">281</a>   }
<a class="jxr_linenumber" name="L282" href="#L282">282</a> 
<a class="jxr_linenumber" name="L283" href="#L283">283</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNewReader() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L284" href="#L284">284</a>     File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L285" href="#L285">285</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L286" href="#L286">286</a>       Files.newReader(asciiFile, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L287" href="#L287">287</a>       fail(<span class="jxr_string">"expected exception"</span>);
<a class="jxr_linenumber" name="L288" href="#L288">288</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException expected) {
<a class="jxr_linenumber" name="L289" href="#L289">289</a>     }
<a class="jxr_linenumber" name="L290" href="#L290">290</a> 
<a class="jxr_linenumber" name="L291" href="#L291">291</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L292" href="#L292">292</a>       Files.newReader(<strong class="jxr_keyword">null</strong>, Charsets.UTF_8);
<a class="jxr_linenumber" name="L293" href="#L293">293</a>       fail(<span class="jxr_string">"expected exception"</span>);
<a class="jxr_linenumber" name="L294" href="#L294">294</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException expected) {
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     }
<a class="jxr_linenumber" name="L296" href="#L296">296</a> 
<a class="jxr_linenumber" name="L297" href="#L297">297</a>     BufferedReader r = Files.newReader(asciiFile, Charsets.US_ASCII);
<a class="jxr_linenumber" name="L298" href="#L298">298</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L299" href="#L299">299</a>       assertEquals(ASCII, r.readLine());
<a class="jxr_linenumber" name="L300" href="#L300">300</a>     } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L301" href="#L301">301</a>       r.close();
<a class="jxr_linenumber" name="L302" href="#L302">302</a>     }
<a class="jxr_linenumber" name="L303" href="#L303">303</a>   }
<a class="jxr_linenumber" name="L304" href="#L304">304</a> 
<a class="jxr_linenumber" name="L305" href="#L305">305</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNewWriter() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L306" href="#L306">306</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L307" href="#L307">307</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L308" href="#L308">308</a>       Files.newWriter(temp, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L309" href="#L309">309</a>       fail(<span class="jxr_string">"expected exception"</span>);
<a class="jxr_linenumber" name="L310" href="#L310">310</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException expected) {
<a class="jxr_linenumber" name="L311" href="#L311">311</a>     }
<a class="jxr_linenumber" name="L312" href="#L312">312</a> 
<a class="jxr_linenumber" name="L313" href="#L313">313</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L314" href="#L314">314</a>       Files.newWriter(<strong class="jxr_keyword">null</strong>, Charsets.UTF_8);
<a class="jxr_linenumber" name="L315" href="#L315">315</a>       fail(<span class="jxr_string">"expected exception"</span>);
<a class="jxr_linenumber" name="L316" href="#L316">316</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException expected) {
<a class="jxr_linenumber" name="L317" href="#L317">317</a>     }
<a class="jxr_linenumber" name="L318" href="#L318">318</a> 
<a class="jxr_linenumber" name="L319" href="#L319">319</a>     BufferedWriter w = Files.newWriter(temp, Charsets.UTF_8);
<a class="jxr_linenumber" name="L320" href="#L320">320</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L321" href="#L321">321</a>       w.write(I18N);
<a class="jxr_linenumber" name="L322" href="#L322">322</a>     } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L323" href="#L323">323</a>       w.close();
<a class="jxr_linenumber" name="L324" href="#L324">324</a>     }
<a class="jxr_linenumber" name="L325" href="#L325">325</a> 
<a class="jxr_linenumber" name="L326" href="#L326">326</a>     File i18nFile = getTestFile(<span class="jxr_string">"i18n.txt"</span>);
<a class="jxr_linenumber" name="L327" href="#L327">327</a>     assertTrue(Files.equal(i18nFile, temp));
<a class="jxr_linenumber" name="L328" href="#L328">328</a>   }
<a class="jxr_linenumber" name="L329" href="#L329">329</a> 
<a class="jxr_linenumber" name="L330" href="#L330">330</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTouch() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L331" href="#L331">331</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L332" href="#L332">332</a>     assertTrue(temp.exists());
<a class="jxr_linenumber" name="L333" href="#L333">333</a>     assertTrue(temp.delete());
<a class="jxr_linenumber" name="L334" href="#L334">334</a>     assertFalse(temp.exists());
<a class="jxr_linenumber" name="L335" href="#L335">335</a>     Files.touch(temp);
<a class="jxr_linenumber" name="L336" href="#L336">336</a>     assertTrue(temp.exists());
<a class="jxr_linenumber" name="L337" href="#L337">337</a>     Files.touch(temp);
<a class="jxr_linenumber" name="L338" href="#L338">338</a>     assertTrue(temp.exists());
<a class="jxr_linenumber" name="L339" href="#L339">339</a> 
<a class="jxr_linenumber" name="L340" href="#L340">340</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L341" href="#L341">341</a>       Files.touch(<strong class="jxr_keyword">new</strong> File(temp.getPath()) {
<a class="jxr_linenumber" name="L342" href="#L342">342</a>         @Override
<a class="jxr_linenumber" name="L343" href="#L343">343</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> setLastModified(<strong class="jxr_keyword">long</strong> t) {
<a class="jxr_linenumber" name="L344" href="#L344">344</a>           <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L345" href="#L345">345</a>         }
<a class="jxr_linenumber" name="L346" href="#L346">346</a> 
<a class="jxr_linenumber" name="L347" href="#L347">347</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 0;
<a class="jxr_linenumber" name="L348" href="#L348">348</a>       });
<a class="jxr_linenumber" name="L349" href="#L349">349</a>       fail(<span class="jxr_string">"expected exception"</span>);
<a class="jxr_linenumber" name="L350" href="#L350">350</a>     } <strong class="jxr_keyword">catch</strong> (IOException expected) {
<a class="jxr_linenumber" name="L351" href="#L351">351</a>     }
<a class="jxr_linenumber" name="L352" href="#L352">352</a>   }
<a class="jxr_linenumber" name="L353" href="#L353">353</a> 
<a class="jxr_linenumber" name="L354" href="#L354">354</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTouchTime() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L355" href="#L355">355</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L356" href="#L356">356</a>     assertTrue(temp.exists());
<a class="jxr_linenumber" name="L357" href="#L357">357</a>     temp.setLastModified(0);
<a class="jxr_linenumber" name="L358" href="#L358">358</a>     assertEquals(0, temp.lastModified());
<a class="jxr_linenumber" name="L359" href="#L359">359</a>     Files.touch(temp);
<a class="jxr_linenumber" name="L360" href="#L360">360</a>     assertThat(temp.lastModified()).isNotEqualTo(0);
<a class="jxr_linenumber" name="L361" href="#L361">361</a>   }
<a class="jxr_linenumber" name="L362" href="#L362">362</a> 
<a class="jxr_linenumber" name="L363" href="#L363">363</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCreateParentDirs_root() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L364" href="#L364">364</a>     File file = root();
<a class="jxr_linenumber" name="L365" href="#L365">365</a>     assertNull(file.getParentFile());
<a class="jxr_linenumber" name="L366" href="#L366">366</a>     assertNull(file.getCanonicalFile().getParentFile());
<a class="jxr_linenumber" name="L367" href="#L367">367</a>     Files.createParentDirs(file);
<a class="jxr_linenumber" name="L368" href="#L368">368</a>   }
<a class="jxr_linenumber" name="L369" href="#L369">369</a> 
<a class="jxr_linenumber" name="L370" href="#L370">370</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCreateParentDirs_relativePath() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L371" href="#L371">371</a>     File file = file(<span class="jxr_string">"nonexistent.file"</span>);
<a class="jxr_linenumber" name="L372" href="#L372">372</a>     assertNull(file.getParentFile());
<a class="jxr_linenumber" name="L373" href="#L373">373</a>     assertNotNull(file.getCanonicalFile().getParentFile());
<a class="jxr_linenumber" name="L374" href="#L374">374</a>     Files.createParentDirs(file);
<a class="jxr_linenumber" name="L375" href="#L375">375</a>   }
<a class="jxr_linenumber" name="L376" href="#L376">376</a> 
<a class="jxr_linenumber" name="L377" href="#L377">377</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCreateParentDirs_noParentsNeeded() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L378" href="#L378">378</a>     File file = file(getTempDir(), <span class="jxr_string">"nonexistent.file"</span>);
<a class="jxr_linenumber" name="L379" href="#L379">379</a>     assertTrue(file.getParentFile().exists());
<a class="jxr_linenumber" name="L380" href="#L380">380</a>     Files.createParentDirs(file);
<a class="jxr_linenumber" name="L381" href="#L381">381</a>   }
<a class="jxr_linenumber" name="L382" href="#L382">382</a> 
<a class="jxr_linenumber" name="L383" href="#L383">383</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCreateParentDirs_oneParentNeeded() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L384" href="#L384">384</a>     File file = file(getTempDir(), <span class="jxr_string">"parent"</span>, <span class="jxr_string">"nonexistent.file"</span>);
<a class="jxr_linenumber" name="L385" href="#L385">385</a>     File parent = file.getParentFile();
<a class="jxr_linenumber" name="L386" href="#L386">386</a>     assertFalse(parent.exists());
<a class="jxr_linenumber" name="L387" href="#L387">387</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L388" href="#L388">388</a>       Files.createParentDirs(file);
<a class="jxr_linenumber" name="L389" href="#L389">389</a>       assertTrue(parent.exists());
<a class="jxr_linenumber" name="L390" href="#L390">390</a>     } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L391" href="#L391">391</a>       assertTrue(parent.delete());
<a class="jxr_linenumber" name="L392" href="#L392">392</a>     }
<a class="jxr_linenumber" name="L393" href="#L393">393</a>   }
<a class="jxr_linenumber" name="L394" href="#L394">394</a> 
<a class="jxr_linenumber" name="L395" href="#L395">395</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCreateParentDirs_multipleParentsNeeded() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L396" href="#L396">396</a>     File file = file(getTempDir(), <span class="jxr_string">"grandparent"</span>, <span class="jxr_string">"parent"</span>, <span class="jxr_string">"nonexistent.file"</span>);
<a class="jxr_linenumber" name="L397" href="#L397">397</a>     File parent = file.getParentFile();
<a class="jxr_linenumber" name="L398" href="#L398">398</a>     File grandparent = parent.getParentFile();
<a class="jxr_linenumber" name="L399" href="#L399">399</a>     assertFalse(grandparent.exists());
<a class="jxr_linenumber" name="L400" href="#L400">400</a>     Files.createParentDirs(file);
<a class="jxr_linenumber" name="L401" href="#L401">401</a>     assertTrue(parent.exists());
<a class="jxr_linenumber" name="L402" href="#L402">402</a>   }
<a class="jxr_linenumber" name="L403" href="#L403">403</a> 
<a class="jxr_linenumber" name="L404" href="#L404">404</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCreateParentDirs_nonDirectoryParentExists() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L405" href="#L405">405</a>     File parent = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L406" href="#L406">406</a>     assertTrue(parent.isFile());
<a class="jxr_linenumber" name="L407" href="#L407">407</a>     File file = file(parent, <span class="jxr_string">"foo"</span>);
<a class="jxr_linenumber" name="L408" href="#L408">408</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L409" href="#L409">409</a>       Files.createParentDirs(file);
<a class="jxr_linenumber" name="L410" href="#L410">410</a>       fail();
<a class="jxr_linenumber" name="L411" href="#L411">411</a>     } <strong class="jxr_keyword">catch</strong> (IOException expected) {
<a class="jxr_linenumber" name="L412" href="#L412">412</a>     }
<a class="jxr_linenumber" name="L413" href="#L413">413</a>   }
<a class="jxr_linenumber" name="L414" href="#L414">414</a> 
<a class="jxr_linenumber" name="L415" href="#L415">415</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCreateTempDir() {
<a class="jxr_linenumber" name="L416" href="#L416">416</a>     File temp = Files.createTempDir();
<a class="jxr_linenumber" name="L417" href="#L417">417</a>     assertTrue(temp.exists());
<a class="jxr_linenumber" name="L418" href="#L418">418</a>     assertTrue(temp.isDirectory());
<a class="jxr_linenumber" name="L419" href="#L419">419</a>     assertEquals(0, temp.listFiles().length);
<a class="jxr_linenumber" name="L420" href="#L420">420</a>     assertTrue(temp.delete());
<a class="jxr_linenumber" name="L421" href="#L421">421</a>   }
<a class="jxr_linenumber" name="L422" href="#L422">422</a> 
<a class="jxr_linenumber" name="L423" href="#L423">423</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMove() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L424" href="#L424">424</a>     File i18nFile = getTestFile(<span class="jxr_string">"i18n.txt"</span>);
<a class="jxr_linenumber" name="L425" href="#L425">425</a>     File temp1 = createTempFile();
<a class="jxr_linenumber" name="L426" href="#L426">426</a>     File temp2 = createTempFile();
<a class="jxr_linenumber" name="L427" href="#L427">427</a> 
<a class="jxr_linenumber" name="L428" href="#L428">428</a>     Files.copy(i18nFile, temp1);
<a class="jxr_linenumber" name="L429" href="#L429">429</a>     moveHelper(<strong class="jxr_keyword">true</strong>, temp1, temp2);
<a class="jxr_linenumber" name="L430" href="#L430">430</a>     assertTrue(Files.equal(temp2, i18nFile));
<a class="jxr_linenumber" name="L431" href="#L431">431</a>   }
<a class="jxr_linenumber" name="L432" href="#L432">432</a> 
<a class="jxr_linenumber" name="L433" href="#L433">433</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMoveViaCopy() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L434" href="#L434">434</a>     File i18nFile = getTestFile(<span class="jxr_string">"i18n.txt"</span>);
<a class="jxr_linenumber" name="L435" href="#L435">435</a>     File temp1 = createTempFile();
<a class="jxr_linenumber" name="L436" href="#L436">436</a>     File temp2 = createTempFile();
<a class="jxr_linenumber" name="L437" href="#L437">437</a> 
<a class="jxr_linenumber" name="L438" href="#L438">438</a>     Files.copy(i18nFile, temp1);
<a class="jxr_linenumber" name="L439" href="#L439">439</a>     moveHelper(<strong class="jxr_keyword">true</strong>, <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/io/FilesTest.html">UnmovableFile</a>(temp1, false, <strong class="jxr_keyword">true</strong>), temp2);
<a class="jxr_linenumber" name="L440" href="#L440">440</a>     assertTrue(Files.equal(temp2, i18nFile));
<a class="jxr_linenumber" name="L441" href="#L441">441</a>   }
<a class="jxr_linenumber" name="L442" href="#L442">442</a> 
<a class="jxr_linenumber" name="L443" href="#L443">443</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMoveFailures() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L444" href="#L444">444</a>     File temp1 = createTempFile();
<a class="jxr_linenumber" name="L445" href="#L445">445</a>     File temp2 = createTempFile();
<a class="jxr_linenumber" name="L446" href="#L446">446</a> 
<a class="jxr_linenumber" name="L447" href="#L447">447</a>     moveHelper(false, <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/io/FilesTest.html">UnmovableFile</a>(temp1, false, false), temp2);
<a class="jxr_linenumber" name="L448" href="#L448">448</a>     moveHelper(false, <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/io/FilesTest.html">UnmovableFile</a>(temp1, false, false),
<a class="jxr_linenumber" name="L449" href="#L449">449</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/io/FilesTest.html">UnmovableFile</a>(temp2, <strong class="jxr_keyword">true</strong>, false));
<a class="jxr_linenumber" name="L450" href="#L450">450</a> 
<a class="jxr_linenumber" name="L451" href="#L451">451</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L452" href="#L452">452</a>       File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L453" href="#L453">453</a>       moveHelper(false, asciiFile, asciiFile);
<a class="jxr_linenumber" name="L454" href="#L454">454</a>       fail(<span class="jxr_string">"expected exception"</span>);
<a class="jxr_linenumber" name="L455" href="#L455">455</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L456" href="#L456">456</a>     }
<a class="jxr_linenumber" name="L457" href="#L457">457</a>   }
<a class="jxr_linenumber" name="L458" href="#L458">458</a> 
<a class="jxr_linenumber" name="L459" href="#L459">459</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> moveHelper(<strong class="jxr_keyword">boolean</strong> success, File from, File to)
<a class="jxr_linenumber" name="L460" href="#L460">460</a>       <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L461" href="#L461">461</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L462" href="#L462">462</a>       Files.move(from, to);
<a class="jxr_linenumber" name="L463" href="#L463">463</a>       <strong class="jxr_keyword">if</strong> (success) {
<a class="jxr_linenumber" name="L464" href="#L464">464</a>         assertFalse(from.exists());
<a class="jxr_linenumber" name="L465" href="#L465">465</a>         assertTrue(to.exists());
<a class="jxr_linenumber" name="L466" href="#L466">466</a>       } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L467" href="#L467">467</a>         fail(<span class="jxr_string">"expected exception"</span>);
<a class="jxr_linenumber" name="L468" href="#L468">468</a>       }
<a class="jxr_linenumber" name="L469" href="#L469">469</a>     } <strong class="jxr_keyword">catch</strong> (IOException possiblyExpected) {
<a class="jxr_linenumber" name="L470" href="#L470">470</a>       <strong class="jxr_keyword">if</strong> (success) {
<a class="jxr_linenumber" name="L471" href="#L471">471</a>         <strong class="jxr_keyword">throw</strong> possiblyExpected;
<a class="jxr_linenumber" name="L472" href="#L472">472</a>       }
<a class="jxr_linenumber" name="L473" href="#L473">473</a>     }
<a class="jxr_linenumber" name="L474" href="#L474">474</a>   }
<a class="jxr_linenumber" name="L475" href="#L475">475</a> 
<a class="jxr_linenumber" name="L476" href="#L476">476</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/io/FilesTest.html">UnmovableFile</a> <strong class="jxr_keyword">extends</strong> File {
<a class="jxr_linenumber" name="L477" href="#L477">477</a> 
<a class="jxr_linenumber" name="L478" href="#L478">478</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> canRename;
<a class="jxr_linenumber" name="L479" href="#L479">479</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> canDelete;
<a class="jxr_linenumber" name="L480" href="#L480">480</a> 
<a class="jxr_linenumber" name="L481" href="#L481">481</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/io/FilesTest.html">UnmovableFile</a>(File file, <strong class="jxr_keyword">boolean</strong> canRename, <strong class="jxr_keyword">boolean</strong> canDelete) {
<a class="jxr_linenumber" name="L482" href="#L482">482</a>       <strong class="jxr_keyword">super</strong>(file.getPath());
<a class="jxr_linenumber" name="L483" href="#L483">483</a>       <strong class="jxr_keyword">this</strong>.canRename = canRename;
<a class="jxr_linenumber" name="L484" href="#L484">484</a>       <strong class="jxr_keyword">this</strong>.canDelete = canDelete;
<a class="jxr_linenumber" name="L485" href="#L485">485</a>     }
<a class="jxr_linenumber" name="L486" href="#L486">486</a> 
<a class="jxr_linenumber" name="L487" href="#L487">487</a>     @Override
<a class="jxr_linenumber" name="L488" href="#L488">488</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> renameTo(File to) {
<a class="jxr_linenumber" name="L489" href="#L489">489</a>       <strong class="jxr_keyword">return</strong> canRename &amp;&amp; <strong class="jxr_keyword">super</strong>.renameTo(to);
<a class="jxr_linenumber" name="L490" href="#L490">490</a>     }
<a class="jxr_linenumber" name="L491" href="#L491">491</a> 
<a class="jxr_linenumber" name="L492" href="#L492">492</a>     @Override
<a class="jxr_linenumber" name="L493" href="#L493">493</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> delete() {
<a class="jxr_linenumber" name="L494" href="#L494">494</a>       <strong class="jxr_keyword">return</strong> canDelete &amp;&amp; <strong class="jxr_keyword">super</strong>.delete();
<a class="jxr_linenumber" name="L495" href="#L495">495</a>     }
<a class="jxr_linenumber" name="L496" href="#L496">496</a> 
<a class="jxr_linenumber" name="L497" href="#L497">497</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 0;
<a class="jxr_linenumber" name="L498" href="#L498">498</a>   }
<a class="jxr_linenumber" name="L499" href="#L499">499</a> 
<a class="jxr_linenumber" name="L500" href="#L500">500</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testLineReading() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L501" href="#L501">501</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L502" href="#L502">502</a>     assertNull(Files.readFirstLine(temp, Charsets.UTF_8));
<a class="jxr_linenumber" name="L503" href="#L503">503</a>     assertTrue(Files.readLines(temp, Charsets.UTF_8).isEmpty());
<a class="jxr_linenumber" name="L504" href="#L504">504</a> 
<a class="jxr_linenumber" name="L505" href="#L505">505</a>     PrintWriter w = <strong class="jxr_keyword">new</strong> PrintWriter(Files.newWriter(temp, Charsets.UTF_8));
<a class="jxr_linenumber" name="L506" href="#L506">506</a>     w.println(<span class="jxr_string">"hello"</span>);
<a class="jxr_linenumber" name="L507" href="#L507">507</a>     w.println(<span class="jxr_string">""</span>);
<a class="jxr_linenumber" name="L508" href="#L508">508</a>     w.println(<span class="jxr_string">" world  "</span>);
<a class="jxr_linenumber" name="L509" href="#L509">509</a>     w.println(<span class="jxr_string">""</span>);
<a class="jxr_linenumber" name="L510" href="#L510">510</a>     w.close();
<a class="jxr_linenumber" name="L511" href="#L511">511</a> 
<a class="jxr_linenumber" name="L512" href="#L512">512</a>     assertEquals(<span class="jxr_string">"hello"</span>, Files.readFirstLine(temp, Charsets.UTF_8));
<a class="jxr_linenumber" name="L513" href="#L513">513</a>     assertEquals(ImmutableList.of(<span class="jxr_string">"hello"</span>, <span class="jxr_string">""</span>, <span class="jxr_string">" world  "</span>, <span class="jxr_string">""</span>),
<a class="jxr_linenumber" name="L514" href="#L514">514</a>         Files.readLines(temp, Charsets.UTF_8));
<a class="jxr_linenumber" name="L515" href="#L515">515</a> 
<a class="jxr_linenumber" name="L516" href="#L516">516</a>     assertTrue(temp.delete());
<a class="jxr_linenumber" name="L517" href="#L517">517</a>   }
<a class="jxr_linenumber" name="L518" href="#L518">518</a> 
<a class="jxr_linenumber" name="L519" href="#L519">519</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testReadLines_withLineProcessor() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L520" href="#L520">520</a>     File temp = createTempFile();
<a class="jxr_linenumber" name="L521" href="#L521">521</a>     LineProcessor&lt;List&lt;String&gt;&gt; collect = <strong class="jxr_keyword">new</strong> LineProcessor&lt;List&lt;String&gt;&gt;() {
<a class="jxr_linenumber" name="L522" href="#L522">522</a>       List&lt;String&gt; collector = <strong class="jxr_keyword">new</strong> ArrayList&lt;String&gt;();
<a class="jxr_linenumber" name="L523" href="#L523">523</a> 
<a class="jxr_linenumber" name="L524" href="#L524">524</a>       @Override
<a class="jxr_linenumber" name="L525" href="#L525">525</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> processLine(String line) {
<a class="jxr_linenumber" name="L526" href="#L526">526</a>         collector.add(line);
<a class="jxr_linenumber" name="L527" href="#L527">527</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L528" href="#L528">528</a>       }
<a class="jxr_linenumber" name="L529" href="#L529">529</a> 
<a class="jxr_linenumber" name="L530" href="#L530">530</a>       @Override
<a class="jxr_linenumber" name="L531" href="#L531">531</a>       <strong class="jxr_keyword">public</strong> List&lt;String&gt; getResult() {
<a class="jxr_linenumber" name="L532" href="#L532">532</a>         <strong class="jxr_keyword">return</strong> collector;
<a class="jxr_linenumber" name="L533" href="#L533">533</a>       }
<a class="jxr_linenumber" name="L534" href="#L534">534</a>     };
<a class="jxr_linenumber" name="L535" href="#L535">535</a>     assertThat(Files.readLines(temp, Charsets.UTF_8, collect)).isEmpty();
<a class="jxr_linenumber" name="L536" href="#L536">536</a> 
<a class="jxr_linenumber" name="L537" href="#L537">537</a>     PrintWriter w = <strong class="jxr_keyword">new</strong> PrintWriter(Files.newWriter(temp, Charsets.UTF_8));
<a class="jxr_linenumber" name="L538" href="#L538">538</a>     w.println(<span class="jxr_string">"hello"</span>);
<a class="jxr_linenumber" name="L539" href="#L539">539</a>     w.println(<span class="jxr_string">""</span>);
<a class="jxr_linenumber" name="L540" href="#L540">540</a>     w.println(<span class="jxr_string">" world  "</span>);
<a class="jxr_linenumber" name="L541" href="#L541">541</a>     w.println(<span class="jxr_string">""</span>);
<a class="jxr_linenumber" name="L542" href="#L542">542</a>     w.close();
<a class="jxr_linenumber" name="L543" href="#L543">543</a>     Files.readLines(temp, Charsets.UTF_8, collect);
<a class="jxr_linenumber" name="L544" href="#L544">544</a>     assertThat(collect.getResult())
<a class="jxr_linenumber" name="L545" href="#L545">545</a>         .has().exactly(<span class="jxr_string">"hello"</span>, <span class="jxr_string">""</span>, <span class="jxr_string">" world  "</span>, <span class="jxr_string">""</span>).inOrder();
<a class="jxr_linenumber" name="L546" href="#L546">546</a> 
<a class="jxr_linenumber" name="L547" href="#L547">547</a>     LineProcessor&lt;List&lt;String&gt;&gt; collectNonEmptyLines =
<a class="jxr_linenumber" name="L548" href="#L548">548</a>         <strong class="jxr_keyword">new</strong> LineProcessor&lt;List&lt;String&gt;&gt;() {
<a class="jxr_linenumber" name="L549" href="#L549">549</a>           List&lt;String&gt; collector = <strong class="jxr_keyword">new</strong> ArrayList&lt;String&gt;();
<a class="jxr_linenumber" name="L550" href="#L550">550</a> 
<a class="jxr_linenumber" name="L551" href="#L551">551</a>           @Override
<a class="jxr_linenumber" name="L552" href="#L552">552</a>           <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> processLine(String line) {
<a class="jxr_linenumber" name="L553" href="#L553">553</a>             <strong class="jxr_keyword">if</strong> (line.length() &gt; 0) {
<a class="jxr_linenumber" name="L554" href="#L554">554</a>               collector.add(line);
<a class="jxr_linenumber" name="L555" href="#L555">555</a>             }
<a class="jxr_linenumber" name="L556" href="#L556">556</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L557" href="#L557">557</a>           }
<a class="jxr_linenumber" name="L558" href="#L558">558</a> 
<a class="jxr_linenumber" name="L559" href="#L559">559</a>           @Override
<a class="jxr_linenumber" name="L560" href="#L560">560</a>           <strong class="jxr_keyword">public</strong> List&lt;String&gt; getResult() {
<a class="jxr_linenumber" name="L561" href="#L561">561</a>             <strong class="jxr_keyword">return</strong> collector;
<a class="jxr_linenumber" name="L562" href="#L562">562</a>           }
<a class="jxr_linenumber" name="L563" href="#L563">563</a>         };
<a class="jxr_linenumber" name="L564" href="#L564">564</a>     Files.readLines(temp, Charsets.UTF_8, collectNonEmptyLines);
<a class="jxr_linenumber" name="L565" href="#L565">565</a>     assertThat(collectNonEmptyLines.getResult()).has().exactly(
<a class="jxr_linenumber" name="L566" href="#L566">566</a>         <span class="jxr_string">"hello"</span>, <span class="jxr_string">" world  "</span>).inOrder();
<a class="jxr_linenumber" name="L567" href="#L567">567</a> 
<a class="jxr_linenumber" name="L568" href="#L568">568</a>     assertTrue(temp.delete());
<a class="jxr_linenumber" name="L569" href="#L569">569</a>   }
<a class="jxr_linenumber" name="L570" href="#L570">570</a> 
<a class="jxr_linenumber" name="L571" href="#L571">571</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testHash() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L572" href="#L572">572</a>     File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L573" href="#L573">573</a>     File i18nFile = getTestFile(<span class="jxr_string">"i18n.txt"</span>);
<a class="jxr_linenumber" name="L574" href="#L574">574</a> 
<a class="jxr_linenumber" name="L575" href="#L575">575</a>     String init = <span class="jxr_string">"d41d8cd98f00b204e9800998ecf8427e"</span>;
<a class="jxr_linenumber" name="L576" href="#L576">576</a>     assertEquals(init, Hashing.md5().newHasher().hash().toString());
<a class="jxr_linenumber" name="L577" href="#L577">577</a> 
<a class="jxr_linenumber" name="L578" href="#L578">578</a>     String asciiHash = <span class="jxr_string">"e5df5a39f2b8cb71b24e1d8038f93131"</span>;
<a class="jxr_linenumber" name="L579" href="#L579">579</a>     assertEquals(asciiHash, Files.hash(asciiFile, Hashing.md5()).toString());
<a class="jxr_linenumber" name="L580" href="#L580">580</a> 
<a class="jxr_linenumber" name="L581" href="#L581">581</a>     String i18nHash = <span class="jxr_string">"7fa826962ce2079c8334cd4ebf33aea4"</span>;
<a class="jxr_linenumber" name="L582" href="#L582">582</a>     assertEquals(i18nHash, Files.hash(i18nFile, Hashing.md5()).toString());
<a class="jxr_linenumber" name="L583" href="#L583">583</a>   }
<a class="jxr_linenumber" name="L584" href="#L584">584</a> 
<a class="jxr_linenumber" name="L585" href="#L585">585</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMap() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L586" href="#L586">586</a>     <em class="jxr_comment">// Test data</em>
<a class="jxr_linenumber" name="L587" href="#L587">587</a>     <strong class="jxr_keyword">int</strong> size = 1024;
<a class="jxr_linenumber" name="L588" href="#L588">588</a>     byte[] bytes = newPreFilledByteArray(size);
<a class="jxr_linenumber" name="L589" href="#L589">589</a> 
<a class="jxr_linenumber" name="L590" href="#L590">590</a>     <em class="jxr_comment">// Setup</em>
<a class="jxr_linenumber" name="L591" href="#L591">591</a>     File file = createTempFile();
<a class="jxr_linenumber" name="L592" href="#L592">592</a>     Files.write(bytes, file);
<a class="jxr_linenumber" name="L593" href="#L593">593</a> 
<a class="jxr_linenumber" name="L594" href="#L594">594</a>     <em class="jxr_comment">// Test</em>
<a class="jxr_linenumber" name="L595" href="#L595">595</a>     MappedByteBuffer actual = Files.map(file);
<a class="jxr_linenumber" name="L596" href="#L596">596</a> 
<a class="jxr_linenumber" name="L597" href="#L597">597</a>     <em class="jxr_comment">// Verify</em>
<a class="jxr_linenumber" name="L598" href="#L598">598</a>     ByteBuffer expected = ByteBuffer.wrap(bytes);
<a class="jxr_linenumber" name="L599" href="#L599">599</a>     assertTrue(<span class="jxr_string">"ByteBuffers should be equal."</span>, expected.equals(actual));
<a class="jxr_linenumber" name="L600" href="#L600">600</a>   }
<a class="jxr_linenumber" name="L601" href="#L601">601</a> 
<a class="jxr_linenumber" name="L602" href="#L602">602</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMap_noSuchFile() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L603" href="#L603">603</a>     <em class="jxr_comment">// Setup</em>
<a class="jxr_linenumber" name="L604" href="#L604">604</a>     File file = createTempFile();
<a class="jxr_linenumber" name="L605" href="#L605">605</a>     <strong class="jxr_keyword">boolean</strong> deleted = file.delete();
<a class="jxr_linenumber" name="L606" href="#L606">606</a>     assertTrue(deleted);
<a class="jxr_linenumber" name="L607" href="#L607">607</a> 
<a class="jxr_linenumber" name="L608" href="#L608">608</a>     <em class="jxr_comment">// Test</em>
<a class="jxr_linenumber" name="L609" href="#L609">609</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L610" href="#L610">610</a>       Files.map(file);
<a class="jxr_linenumber" name="L611" href="#L611">611</a>       fail(<span class="jxr_string">"Should have thrown FileNotFoundException."</span>);
<a class="jxr_linenumber" name="L612" href="#L612">612</a>     } <strong class="jxr_keyword">catch</strong> (FileNotFoundException expected) {
<a class="jxr_linenumber" name="L613" href="#L613">613</a>     }
<a class="jxr_linenumber" name="L614" href="#L614">614</a>   }
<a class="jxr_linenumber" name="L615" href="#L615">615</a> 
<a class="jxr_linenumber" name="L616" href="#L616">616</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMap_readWrite() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L617" href="#L617">617</a>     <em class="jxr_comment">// Test data</em>
<a class="jxr_linenumber" name="L618" href="#L618">618</a>     <strong class="jxr_keyword">int</strong> size = 1024;
<a class="jxr_linenumber" name="L619" href="#L619">619</a>     byte[] expectedBytes = <strong class="jxr_keyword">new</strong> byte[size];
<a class="jxr_linenumber" name="L620" href="#L620">620</a>     byte[] bytes = newPreFilledByteArray(1024);
<a class="jxr_linenumber" name="L621" href="#L621">621</a> 
<a class="jxr_linenumber" name="L622" href="#L622">622</a>     <em class="jxr_comment">// Setup</em>
<a class="jxr_linenumber" name="L623" href="#L623">623</a>     File file = createTempFile();
<a class="jxr_linenumber" name="L624" href="#L624">624</a>     Files.write(bytes, file);
<a class="jxr_linenumber" name="L625" href="#L625">625</a> 
<a class="jxr_linenumber" name="L626" href="#L626">626</a>     Random random = <strong class="jxr_keyword">new</strong> Random();
<a class="jxr_linenumber" name="L627" href="#L627">627</a>     random.nextBytes(expectedBytes);
<a class="jxr_linenumber" name="L628" href="#L628">628</a> 
<a class="jxr_linenumber" name="L629" href="#L629">629</a>     <em class="jxr_comment">// Test</em>
<a class="jxr_linenumber" name="L630" href="#L630">630</a>     MappedByteBuffer map = Files.map(file, MapMode.READ_WRITE);
<a class="jxr_linenumber" name="L631" href="#L631">631</a>     map.put(expectedBytes);
<a class="jxr_linenumber" name="L632" href="#L632">632</a> 
<a class="jxr_linenumber" name="L633" href="#L633">633</a>     <em class="jxr_comment">// Verify</em>
<a class="jxr_linenumber" name="L634" href="#L634">634</a>     byte[] actualBytes = Files.toByteArray(file);
<a class="jxr_linenumber" name="L635" href="#L635">635</a>     assertTrue(Arrays.equals(expectedBytes, actualBytes));
<a class="jxr_linenumber" name="L636" href="#L636">636</a>   }
<a class="jxr_linenumber" name="L637" href="#L637">637</a> 
<a class="jxr_linenumber" name="L638" href="#L638">638</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMap_readWrite_creates() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L639" href="#L639">639</a>     <em class="jxr_comment">// Test data</em>
<a class="jxr_linenumber" name="L640" href="#L640">640</a>     <strong class="jxr_keyword">int</strong> size = 1024;
<a class="jxr_linenumber" name="L641" href="#L641">641</a>     byte[] expectedBytes = newPreFilledByteArray(1024);
<a class="jxr_linenumber" name="L642" href="#L642">642</a> 
<a class="jxr_linenumber" name="L643" href="#L643">643</a>     <em class="jxr_comment">// Setup</em>
<a class="jxr_linenumber" name="L644" href="#L644">644</a>     File file = createTempFile();
<a class="jxr_linenumber" name="L645" href="#L645">645</a>     <strong class="jxr_keyword">boolean</strong> deleted = file.delete();
<a class="jxr_linenumber" name="L646" href="#L646">646</a>     assertTrue(deleted);
<a class="jxr_linenumber" name="L647" href="#L647">647</a>     assertFalse(file.exists());
<a class="jxr_linenumber" name="L648" href="#L648">648</a> 
<a class="jxr_linenumber" name="L649" href="#L649">649</a>     <em class="jxr_comment">// Test</em>
<a class="jxr_linenumber" name="L650" href="#L650">650</a>     MappedByteBuffer map = Files.map(file, MapMode.READ_WRITE, size);
<a class="jxr_linenumber" name="L651" href="#L651">651</a>     map.put(expectedBytes);
<a class="jxr_linenumber" name="L652" href="#L652">652</a> 
<a class="jxr_linenumber" name="L653" href="#L653">653</a>     <em class="jxr_comment">// Verify</em>
<a class="jxr_linenumber" name="L654" href="#L654">654</a>     assertTrue(file.exists());
<a class="jxr_linenumber" name="L655" href="#L655">655</a>     assertTrue(file.isFile());
<a class="jxr_linenumber" name="L656" href="#L656">656</a>     assertEquals(size, file.length());
<a class="jxr_linenumber" name="L657" href="#L657">657</a>     byte[] actualBytes = Files.toByteArray(file);
<a class="jxr_linenumber" name="L658" href="#L658">658</a>     assertTrue(Arrays.equals(expectedBytes, actualBytes));
<a class="jxr_linenumber" name="L659" href="#L659">659</a>   }
<a class="jxr_linenumber" name="L660" href="#L660">660</a> 
<a class="jxr_linenumber" name="L661" href="#L661">661</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMap_readWrite_max_value_plus_1() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L662" href="#L662">662</a>     <em class="jxr_comment">// Setup</em>
<a class="jxr_linenumber" name="L663" href="#L663">663</a>     File file = createTempFile();
<a class="jxr_linenumber" name="L664" href="#L664">664</a>     <em class="jxr_comment">// Test</em>
<a class="jxr_linenumber" name="L665" href="#L665">665</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L666" href="#L666">666</a>       Files.map(file, MapMode.READ_WRITE, (<strong class="jxr_keyword">long</strong>) Integer.MAX_VALUE + 1);
<a class="jxr_linenumber" name="L667" href="#L667">667</a>       fail(<span class="jxr_string">"Should throw when size exceeds Integer.MAX_VALUE"</span>);
<a class="jxr_linenumber" name="L668" href="#L668">668</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L669" href="#L669">669</a>     }
<a class="jxr_linenumber" name="L670" href="#L670">670</a>   }
<a class="jxr_linenumber" name="L671" href="#L671">671</a> 
<a class="jxr_linenumber" name="L672" href="#L672">672</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGetFileExtension() {
<a class="jxr_linenumber" name="L673" href="#L673">673</a>     assertEquals(<span class="jxr_string">"txt"</span>, Files.getFileExtension(<span class="jxr_string">".txt"</span>));
<a class="jxr_linenumber" name="L674" href="#L674">674</a>     assertEquals(<span class="jxr_string">"txt"</span>, Files.getFileExtension(<span class="jxr_string">"blah.txt"</span>));
<a class="jxr_linenumber" name="L675" href="#L675">675</a>     assertEquals(<span class="jxr_string">"txt"</span>, Files.getFileExtension(<span class="jxr_string">"blah..txt"</span>));
<a class="jxr_linenumber" name="L676" href="#L676">676</a>     assertEquals(<span class="jxr_string">"txt"</span>, Files.getFileExtension(<span class="jxr_string">".blah.txt"</span>));
<a class="jxr_linenumber" name="L677" href="#L677">677</a>     assertEquals(<span class="jxr_string">"txt"</span>, Files.getFileExtension(<span class="jxr_string">"/tmp/blah.txt"</span>));
<a class="jxr_linenumber" name="L678" href="#L678">678</a>     assertEquals(<span class="jxr_string">"gz"</span>, Files.getFileExtension(<span class="jxr_string">"blah.tar.gz"</span>));
<a class="jxr_linenumber" name="L679" href="#L679">679</a>     assertEquals(<span class="jxr_string">""</span>, Files.getFileExtension(<span class="jxr_string">"/"</span>));
<a class="jxr_linenumber" name="L680" href="#L680">680</a>     assertEquals(<span class="jxr_string">""</span>, Files.getFileExtension(<span class="jxr_string">"."</span>));
<a class="jxr_linenumber" name="L681" href="#L681">681</a>     assertEquals(<span class="jxr_string">""</span>, Files.getFileExtension(<span class="jxr_string">".."</span>));
<a class="jxr_linenumber" name="L682" href="#L682">682</a>     assertEquals(<span class="jxr_string">""</span>, Files.getFileExtension(<span class="jxr_string">"..."</span>));
<a class="jxr_linenumber" name="L683" href="#L683">683</a>     assertEquals(<span class="jxr_string">""</span>, Files.getFileExtension(<span class="jxr_string">"blah"</span>));
<a class="jxr_linenumber" name="L684" href="#L684">684</a>     assertEquals(<span class="jxr_string">""</span>, Files.getFileExtension(<span class="jxr_string">"blah."</span>));
<a class="jxr_linenumber" name="L685" href="#L685">685</a>     assertEquals(<span class="jxr_string">""</span>, Files.getFileExtension(<span class="jxr_string">".blah."</span>));
<a class="jxr_linenumber" name="L686" href="#L686">686</a>     assertEquals(<span class="jxr_string">""</span>, Files.getFileExtension(<span class="jxr_string">"/foo.bar/blah"</span>));
<a class="jxr_linenumber" name="L687" href="#L687">687</a>     assertEquals(<span class="jxr_string">""</span>, Files.getFileExtension(<span class="jxr_string">"/foo/.bar/blah"</span>));
<a class="jxr_linenumber" name="L688" href="#L688">688</a>   }
<a class="jxr_linenumber" name="L689" href="#L689">689</a> 
<a class="jxr_linenumber" name="L690" href="#L690">690</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGetNameWithoutExtension() {
<a class="jxr_linenumber" name="L691" href="#L691">691</a>     assertEquals(<span class="jxr_string">""</span>, Files.getNameWithoutExtension(<span class="jxr_string">".txt"</span>));
<a class="jxr_linenumber" name="L692" href="#L692">692</a>     assertEquals(<span class="jxr_string">"blah"</span>, Files.getNameWithoutExtension(<span class="jxr_string">"blah.txt"</span>));
<a class="jxr_linenumber" name="L693" href="#L693">693</a>     assertEquals(<span class="jxr_string">"blah."</span>, Files.getNameWithoutExtension(<span class="jxr_string">"blah..txt"</span>));
<a class="jxr_linenumber" name="L694" href="#L694">694</a>     assertEquals(<span class="jxr_string">".blah"</span>, Files.getNameWithoutExtension(<span class="jxr_string">".blah.txt"</span>));
<a class="jxr_linenumber" name="L695" href="#L695">695</a>     assertEquals(<span class="jxr_string">"blah"</span>, Files.getNameWithoutExtension(<span class="jxr_string">"/tmp/blah.txt"</span>));
<a class="jxr_linenumber" name="L696" href="#L696">696</a>     assertEquals(<span class="jxr_string">"blah.tar"</span>, Files.getNameWithoutExtension(<span class="jxr_string">"blah.tar.gz"</span>));
<a class="jxr_linenumber" name="L697" href="#L697">697</a>     assertEquals(<span class="jxr_string">""</span>, Files.getNameWithoutExtension(<span class="jxr_string">"/"</span>));
<a class="jxr_linenumber" name="L698" href="#L698">698</a>     assertEquals(<span class="jxr_string">""</span>, Files.getNameWithoutExtension(<span class="jxr_string">"."</span>));
<a class="jxr_linenumber" name="L699" href="#L699">699</a>     assertEquals(<span class="jxr_string">"."</span>, Files.getNameWithoutExtension(<span class="jxr_string">".."</span>));
<a class="jxr_linenumber" name="L700" href="#L700">700</a>     assertEquals(<span class="jxr_string">".."</span>, Files.getNameWithoutExtension(<span class="jxr_string">"..."</span>));
<a class="jxr_linenumber" name="L701" href="#L701">701</a>     assertEquals(<span class="jxr_string">"blah"</span>, Files.getNameWithoutExtension(<span class="jxr_string">"blah"</span>));
<a class="jxr_linenumber" name="L702" href="#L702">702</a>     assertEquals(<span class="jxr_string">"blah"</span>, Files.getNameWithoutExtension(<span class="jxr_string">"blah."</span>));
<a class="jxr_linenumber" name="L703" href="#L703">703</a>     assertEquals(<span class="jxr_string">".blah"</span>, Files.getNameWithoutExtension(<span class="jxr_string">".blah."</span>));
<a class="jxr_linenumber" name="L704" href="#L704">704</a>     assertEquals(<span class="jxr_string">"blah"</span>, Files.getNameWithoutExtension(<span class="jxr_string">"/foo.bar/blah"</span>));
<a class="jxr_linenumber" name="L705" href="#L705">705</a>     assertEquals(<span class="jxr_string">"blah"</span>, Files.getNameWithoutExtension(<span class="jxr_string">"/foo/.bar/blah"</span>));
<a class="jxr_linenumber" name="L706" href="#L706">706</a>   }
<a class="jxr_linenumber" name="L707" href="#L707">707</a> 
<a class="jxr_linenumber" name="L708" href="#L708">708</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testReadBytes() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L709" href="#L709">709</a>     ByteProcessor&lt;byte[]&gt; processor = <strong class="jxr_keyword">new</strong> ByteProcessor&lt;byte[]&gt;() {
<a class="jxr_linenumber" name="L710" href="#L710">710</a>       <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> ByteArrayOutputStream out = <strong class="jxr_keyword">new</strong> ByteArrayOutputStream();
<a class="jxr_linenumber" name="L711" href="#L711">711</a> 
<a class="jxr_linenumber" name="L712" href="#L712">712</a>       @Override
<a class="jxr_linenumber" name="L713" href="#L713">713</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> processBytes(byte[] buffer, <strong class="jxr_keyword">int</strong> offset, <strong class="jxr_keyword">int</strong> length) <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L714" href="#L714">714</a>         <strong class="jxr_keyword">if</strong> (length &gt;= 0) {
<a class="jxr_linenumber" name="L715" href="#L715">715</a>           out.write(buffer, offset, length);
<a class="jxr_linenumber" name="L716" href="#L716">716</a>         }
<a class="jxr_linenumber" name="L717" href="#L717">717</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L718" href="#L718">718</a>       }
<a class="jxr_linenumber" name="L719" href="#L719">719</a> 
<a class="jxr_linenumber" name="L720" href="#L720">720</a>       @Override
<a class="jxr_linenumber" name="L721" href="#L721">721</a>       <strong class="jxr_keyword">public</strong> byte[] getResult() {
<a class="jxr_linenumber" name="L722" href="#L722">722</a>         <strong class="jxr_keyword">return</strong> out.toByteArray();
<a class="jxr_linenumber" name="L723" href="#L723">723</a>       }
<a class="jxr_linenumber" name="L724" href="#L724">724</a>     };
<a class="jxr_linenumber" name="L725" href="#L725">725</a> 
<a class="jxr_linenumber" name="L726" href="#L726">726</a>     File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L727" href="#L727">727</a>     byte[] result = Files.readBytes(asciiFile, processor);
<a class="jxr_linenumber" name="L728" href="#L728">728</a>     assertEquals(Bytes.asList(Files.toByteArray(asciiFile)), Bytes.asList(result));
<a class="jxr_linenumber" name="L729" href="#L729">729</a>   }
<a class="jxr_linenumber" name="L730" href="#L730">730</a> 
<a class="jxr_linenumber" name="L731" href="#L731">731</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testReadBytes_returnFalse() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L732" href="#L732">732</a>     ByteProcessor&lt;byte[]&gt; processor = <strong class="jxr_keyword">new</strong> ByteProcessor&lt;byte[]&gt;() {
<a class="jxr_linenumber" name="L733" href="#L733">733</a>       <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> ByteArrayOutputStream out = <strong class="jxr_keyword">new</strong> ByteArrayOutputStream();
<a class="jxr_linenumber" name="L734" href="#L734">734</a> 
<a class="jxr_linenumber" name="L735" href="#L735">735</a>       @Override
<a class="jxr_linenumber" name="L736" href="#L736">736</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> processBytes(byte[] buffer, <strong class="jxr_keyword">int</strong> offset, <strong class="jxr_keyword">int</strong> length) <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L737" href="#L737">737</a>         <strong class="jxr_keyword">if</strong> (length &gt; 0) {
<a class="jxr_linenumber" name="L738" href="#L738">738</a>           out.write(buffer, offset, 1);
<a class="jxr_linenumber" name="L739" href="#L739">739</a>           <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L740" href="#L740">740</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L741" href="#L741">741</a>           <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L742" href="#L742">742</a>         }
<a class="jxr_linenumber" name="L743" href="#L743">743</a>       }
<a class="jxr_linenumber" name="L744" href="#L744">744</a> 
<a class="jxr_linenumber" name="L745" href="#L745">745</a>       @Override
<a class="jxr_linenumber" name="L746" href="#L746">746</a>       <strong class="jxr_keyword">public</strong> byte[] getResult() {
<a class="jxr_linenumber" name="L747" href="#L747">747</a>         <strong class="jxr_keyword">return</strong> out.toByteArray();
<a class="jxr_linenumber" name="L748" href="#L748">748</a>       }
<a class="jxr_linenumber" name="L749" href="#L749">749</a>     };
<a class="jxr_linenumber" name="L750" href="#L750">750</a> 
<a class="jxr_linenumber" name="L751" href="#L751">751</a>     File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L752" href="#L752">752</a>     byte[] result = Files.readBytes(asciiFile, processor);
<a class="jxr_linenumber" name="L753" href="#L753">753</a>     assertEquals(1, result.length);
<a class="jxr_linenumber" name="L754" href="#L754">754</a>   }
<a class="jxr_linenumber" name="L755" href="#L755">755</a> 
<a class="jxr_linenumber" name="L756" href="#L756">756</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPredicates() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L757" href="#L757">757</a>     File asciiFile = getTestFile(<span class="jxr_string">"ascii.txt"</span>);
<a class="jxr_linenumber" name="L758" href="#L758">758</a>     File dir = asciiFile.getParentFile();
<a class="jxr_linenumber" name="L759" href="#L759">759</a>     assertTrue(Files.isDirectory().apply(dir));
<a class="jxr_linenumber" name="L760" href="#L760">760</a>     assertFalse(Files.isFile().apply(dir));
<a class="jxr_linenumber" name="L761" href="#L761">761</a> 
<a class="jxr_linenumber" name="L762" href="#L762">762</a>     assertFalse(Files.isDirectory().apply(asciiFile));
<a class="jxr_linenumber" name="L763" href="#L763">763</a>     assertTrue(Files.isFile().apply(asciiFile));
<a class="jxr_linenumber" name="L764" href="#L764">764</a>   }
<a class="jxr_linenumber" name="L765" href="#L765">765</a> 
<a class="jxr_linenumber" name="L766" href="#L766">766</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L767" href="#L767">767</a> <em class="jxr_javadoccomment">   * Returns a root path for the file system.</em>
<a class="jxr_linenumber" name="L768" href="#L768">768</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L769" href="#L769">769</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> File root() {
<a class="jxr_linenumber" name="L770" href="#L770">770</a>     <strong class="jxr_keyword">return</strong> File.listRoots()[0];
<a class="jxr_linenumber" name="L771" href="#L771">771</a>   }
<a class="jxr_linenumber" name="L772" href="#L772">772</a> 
<a class="jxr_linenumber" name="L773" href="#L773">773</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L774" href="#L774">774</a> <em class="jxr_javadoccomment">   * Returns a {@code File} object for the given path parts.</em>
<a class="jxr_linenumber" name="L775" href="#L775">775</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L776" href="#L776">776</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> File file(String first, String... more) {
<a class="jxr_linenumber" name="L777" href="#L777">777</a>     <strong class="jxr_keyword">return</strong> file(<strong class="jxr_keyword">new</strong> File(first), more);
<a class="jxr_linenumber" name="L778" href="#L778">778</a>   }
<a class="jxr_linenumber" name="L779" href="#L779">779</a> 
<a class="jxr_linenumber" name="L780" href="#L780">780</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L781" href="#L781">781</a> <em class="jxr_javadoccomment">   * Returns a {@code File} object for the given path parts.</em>
<a class="jxr_linenumber" name="L782" href="#L782">782</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L783" href="#L783">783</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> File file(File first, String... more) {
<a class="jxr_linenumber" name="L784" href="#L784">784</a>     <em class="jxr_comment">// not very efficient, but should definitely be correct</em>
<a class="jxr_linenumber" name="L785" href="#L785">785</a>     File file = first;
<a class="jxr_linenumber" name="L786" href="#L786">786</a>     <strong class="jxr_keyword">for</strong> (String name : more) {
<a class="jxr_linenumber" name="L787" href="#L787">787</a>       file = <strong class="jxr_keyword">new</strong> File(file, name);
<a class="jxr_linenumber" name="L788" href="#L788">788</a>     }
<a class="jxr_linenumber" name="L789" href="#L789">789</a>     <strong class="jxr_keyword">return</strong> file;
<a class="jxr_linenumber" name="L790" href="#L790">790</a>   }
<a class="jxr_linenumber" name="L791" href="#L791">791</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
