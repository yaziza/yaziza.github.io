<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>LittleEndianDataOutputStreamTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/io/LittleEndianDataOutputStreamTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2010 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.io;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Charsets;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> com.google.common.primitives.Bytes;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> java.io.ByteArrayInputStream;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> java.io.ByteArrayOutputStream;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> java.io.DataInput;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> java.io.DataInputStream;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> java.io.IOException;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * Test class for {@link LittleEndianDataOutputStream}.</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * @author Keith Bottner</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/io/LittleEndianDataOutputStreamTest.html">LittleEndianDataOutputStreamTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  
<a class="jxr_linenumber" name="L37" href="#L37">37</a>    <strong class="jxr_keyword">private</strong> ByteArrayOutputStream baos = <strong class="jxr_keyword">new</strong> ByteArrayOutputStream();
<a class="jxr_linenumber" name="L38" href="#L38">38</a>    <strong class="jxr_keyword">private</strong> <a href="../../../../com/google/common/io/LittleEndianDataOutputStream.html">LittleEndianDataOutputStream</a> out = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/io/LittleEndianDataOutputStream.html">LittleEndianDataOutputStream</a>(baos);
<a class="jxr_linenumber" name="L39" href="#L39">39</a>    
<a class="jxr_linenumber" name="L40" href="#L40">40</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testWriteLittleEndian() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <em class="jxr_comment">/* Write out various test values in LITTLE ENDIAN FORMAT */</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      out.write(<strong class="jxr_keyword">new</strong> byte[] { -100, 100 });
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      out.writeBoolean(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      out.writeBoolean(false);
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      out.writeByte(100);
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      out.writeByte(-100);
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      out.writeByte((byte) 200);
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      out.writeChar('a');
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      out.writeShort((<strong class="jxr_keyword">short</strong>) -30000);
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      out.writeShort((<strong class="jxr_keyword">short</strong>) 50000);
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      out.writeInt(0xCAFEBABE);
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      out.writeLong(0xDEADBEEFCAFEBABEL);
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      out.writeUTF(<span class="jxr_string">"Herby Derby"</span>);
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      out.writeFloat(Float.intBitsToFloat(0xCAFEBABE));
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      out.writeDouble(Double.longBitsToDouble(0xDEADBEEFCAFEBABEL));
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      byte[] data = baos.toByteArray();
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <em class="jxr_comment">/* Setup input streams */</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      DataInput in = <strong class="jxr_keyword">new</strong> DataInputStream(<strong class="jxr_keyword">new</strong> ByteArrayInputStream(data));
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      <em class="jxr_comment">/* Read in various values NORMALLY */</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      byte[] b = <strong class="jxr_keyword">new</strong> byte[2];
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      in.readFully(b);
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      assertEquals(-100, b[0]);
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      assertEquals(100, b[1]);
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      assertEquals(<strong class="jxr_keyword">true</strong>, in.readBoolean());
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      assertEquals(false, in.readBoolean());
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      assertEquals(100, in.readByte());
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      assertEquals(-100, in.readByte());
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      assertEquals(200, in.readUnsignedByte());
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      assertEquals('\u6100', in.readChar());
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      assertEquals(-12150, in.readShort());
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      assertEquals(20675, in.readUnsignedShort());
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      assertEquals(0xBEBAFECA, in.readInt());
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      assertEquals(0xBEBAFECAEFBEADDEL, in.readLong());
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      assertEquals(<span class="jxr_string">"Herby Derby"</span>, in.readUTF());
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      assertEquals(0xBEBAFECA, Float.floatToIntBits(in.readFloat()));
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      assertEquals(0xBEBAFECAEFBEADDEL, Double.doubleToLongBits(in.readDouble()));
<a class="jxr_linenumber" name="L81" href="#L81">81</a>    }
<a class="jxr_linenumber" name="L82" href="#L82">82</a>    
<a class="jxr_linenumber" name="L83" href="#L83">83</a>    @SuppressWarnings(<span class="jxr_string">"deprecation"</span>) <em class="jxr_comment">// testing a deprecated method</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testWriteBytes() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      <em class="jxr_comment">/* Write out various test values in LITTLE ENDIAN FORMAT */</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      out.writeBytes(<span class="jxr_string">"r\u00C9sum\u00C9"</span>);
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      byte[] data = baos.toByteArray();
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      <em class="jxr_comment">/* Setup input streams */</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      DataInput in = <strong class="jxr_keyword">new</strong> DataInputStream(<strong class="jxr_keyword">new</strong> ByteArrayInputStream(data));
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      <em class="jxr_comment">/* Read in various values NORMALLY */</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      byte[] b = <strong class="jxr_keyword">new</strong> byte[6];
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      in.readFully(b);
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      assertEquals(<span class="jxr_string">"r\u00C9sum\u00C9"</span>.getBytes(Charsets.ISO_8859_1), b);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>    }
<a class="jxr_linenumber" name="L99" href="#L99">99</a>    
<a class="jxr_linenumber" name="L100" href="#L100">100</a>   @SuppressWarnings(<span class="jxr_string">"deprecation"</span>) <em class="jxr_comment">// testing a deprecated method</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testWriteBytes_discardHighOrderBytes() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     <em class="jxr_comment">/* Write out various test values in LITTLE ENDIAN FORMAT */</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     out.writeBytes(<span class="jxr_string">"\uAAAA\uAABB\uAACC"</span>);
<a class="jxr_linenumber" name="L105" href="#L105">105</a> 
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     byte[] data = baos.toByteArray();
<a class="jxr_linenumber" name="L107" href="#L107">107</a> 
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     <em class="jxr_comment">/* Setup input streams */</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     DataInput in = <strong class="jxr_keyword">new</strong> DataInputStream(<strong class="jxr_keyword">new</strong> ByteArrayInputStream(data));
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     <em class="jxr_comment">/* Read in various values NORMALLY */</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     byte[] b = <strong class="jxr_keyword">new</strong> byte[3];
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     in.readFully(b);
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     byte[] expected = {(byte) 0xAA, (byte) 0xBB, (byte) 0xCC};
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     assertEquals(expected, b);
<a class="jxr_linenumber" name="L116" href="#L116">116</a>   }
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testWriteChars() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L119" href="#L119">119</a> 
<a class="jxr_linenumber" name="L120" href="#L120">120</a>     <em class="jxr_comment">/* Write out various test values in LITTLE ENDIAN FORMAT */</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     out.writeChars(<span class="jxr_string">"r\u00C9sum\u00C9"</span>);
<a class="jxr_linenumber" name="L122" href="#L122">122</a> 
<a class="jxr_linenumber" name="L123" href="#L123">123</a>     byte[] data = baos.toByteArray();
<a class="jxr_linenumber" name="L124" href="#L124">124</a> 
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     <em class="jxr_comment">/* Setup input streams */</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     DataInput in = <strong class="jxr_keyword">new</strong> DataInputStream(<strong class="jxr_keyword">new</strong> ByteArrayInputStream(data));
<a class="jxr_linenumber" name="L127" href="#L127">127</a> 
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     <em class="jxr_comment">/* Read in various values NORMALLY */</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     byte[] actual = <strong class="jxr_keyword">new</strong> byte[12];
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     in.readFully(actual);
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     assertEquals('r', actual[0]);
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     assertEquals(0, actual[1]);
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     assertEquals((byte) 0xC9, actual[2]);
<a class="jxr_linenumber" name="L134" href="#L134">134</a>     assertEquals(0, actual[3]);
<a class="jxr_linenumber" name="L135" href="#L135">135</a>     assertEquals('s', actual[4]);
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     assertEquals(0, actual[5]);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     assertEquals('u', actual[6]);
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     assertEquals(0, actual[7]);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>     assertEquals('m', actual[8]);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     assertEquals(0, actual[9]);
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     assertEquals((byte) 0xC9, actual[10]);
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     assertEquals(0, actual[11]);
<a class="jxr_linenumber" name="L143" href="#L143">143</a>   }
<a class="jxr_linenumber" name="L144" href="#L144">144</a> 
<a class="jxr_linenumber" name="L145" href="#L145">145</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> assertEquals(byte[] expected, byte[] actual) {
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     assertEquals(Bytes.asList(expected), Bytes.asList(actual));
<a class="jxr_linenumber" name="L147" href="#L147">147</a>   }
<a class="jxr_linenumber" name="L148" href="#L148">148</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
