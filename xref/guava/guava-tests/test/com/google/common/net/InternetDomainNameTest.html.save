<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>InternetDomainNameTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/net/InternetDomainNameTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2009 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.net;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtIncompatible;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Ascii;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Strings;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableSet;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Iterables;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.EqualsTester;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.NullPointerTester;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * {@link TestCase} for {@link InternetDomainName}.</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * @author Craig Berry</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/net/InternetDomainNameTest.html">InternetDomainNameTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L37" href="#L37">37</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> UNICODE_EXAMPLE =
<a class="jxr_linenumber" name="L38" href="#L38">38</a>        InternetDomainName.from(<span class="jxr_string">"j\u00f8rpeland.no"</span>);
<a class="jxr_linenumber" name="L39" href="#L39">39</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> PUNYCODE_EXAMPLE =
<a class="jxr_linenumber" name="L40" href="#L40">40</a>        InternetDomainName.from(<span class="jxr_string">"xn--jrpeland-54a.no"</span>);
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  
<a class="jxr_linenumber" name="L42" href="#L42">42</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment">   * The Greek letter delta, used in unicode testing.</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> String DELTA = <span class="jxr_string">"\u0394"</span>;
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment">   * A domain part which is valid under lenient validation, but invalid under</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment">   * strict validation.</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>    <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> String LOTS_OF_DELTAS = Strings.repeat(DELTA, 62);
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  
<a class="jxr_linenumber" name="L53" href="#L53">53</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> String ALMOST_TOO_MANY_LEVELS =
<a class="jxr_linenumber" name="L54" href="#L54">54</a>        Strings.repeat(<span class="jxr_string">"a."</span>, 127);
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  
<a class="jxr_linenumber" name="L56" href="#L56">56</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> String ALMOST_TOO_LONG =
<a class="jxr_linenumber" name="L57" href="#L57">57</a>        Strings.repeat(<span class="jxr_string">"aaaaa."</span>, 40) + <span class="jxr_string">"1234567890.c"</span>;
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  
<a class="jxr_linenumber" name="L59" href="#L59">59</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableSet&lt;String&gt; VALID_NAME = ImmutableSet.of(
<a class="jxr_linenumber" name="L60" href="#L60">60</a>        <span class="jxr_string">"foo.com"</span>,
<a class="jxr_linenumber" name="L61" href="#L61">61</a>        <span class="jxr_string">"f-_-o.cOM"</span>,
<a class="jxr_linenumber" name="L62" href="#L62">62</a>        <span class="jxr_string">"f--1.com"</span>,
<a class="jxr_linenumber" name="L63" href="#L63">63</a>        <span class="jxr_string">"f11-1.com"</span>,
<a class="jxr_linenumber" name="L64" href="#L64">64</a>        <span class="jxr_string">"www"</span>,
<a class="jxr_linenumber" name="L65" href="#L65">65</a>        <span class="jxr_string">"abc.a23"</span>,
<a class="jxr_linenumber" name="L66" href="#L66">66</a>        <span class="jxr_string">"biz.com.ua"</span>,
<a class="jxr_linenumber" name="L67" href="#L67">67</a>        <span class="jxr_string">"x"</span>,
<a class="jxr_linenumber" name="L68" href="#L68">68</a>        <span class="jxr_string">"fOo"</span>,
<a class="jxr_linenumber" name="L69" href="#L69">69</a>        <span class="jxr_string">"f--o"</span>,
<a class="jxr_linenumber" name="L70" href="#L70">70</a>        <span class="jxr_string">"f_a"</span>,
<a class="jxr_linenumber" name="L71" href="#L71">71</a>        <span class="jxr_string">"foo.net.us\uFF61ocm"</span>,
<a class="jxr_linenumber" name="L72" href="#L72">72</a>        <span class="jxr_string">"woo.com."</span>,
<a class="jxr_linenumber" name="L73" href="#L73">73</a>        <span class="jxr_string">"a"</span> + DELTA + <span class="jxr_string">"b.com"</span>,
<a class="jxr_linenumber" name="L74" href="#L74">74</a>        ALMOST_TOO_MANY_LEVELS,
<a class="jxr_linenumber" name="L75" href="#L75">75</a>        ALMOST_TOO_LONG);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  
<a class="jxr_linenumber" name="L77" href="#L77">77</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableSet&lt;String&gt; INVALID_NAME = ImmutableSet.of(
<a class="jxr_linenumber" name="L78" href="#L78">78</a>        <span class="jxr_string">""</span>,
<a class="jxr_linenumber" name="L79" href="#L79">79</a>        <span class="jxr_string">" "</span>,
<a class="jxr_linenumber" name="L80" href="#L80">80</a>        <span class="jxr_string">"127.0.0.1"</span>,
<a class="jxr_linenumber" name="L81" href="#L81">81</a>        <span class="jxr_string">"::1"</span>, <span class="jxr_string">"13"</span>,
<a class="jxr_linenumber" name="L82" href="#L82">82</a>        <span class="jxr_string">"abc.12c"</span>,
<a class="jxr_linenumber" name="L83" href="#L83">83</a>        <span class="jxr_string">"foo-.com"</span>,
<a class="jxr_linenumber" name="L84" href="#L84">84</a>        <span class="jxr_string">"_bar.quux"</span>,
<a class="jxr_linenumber" name="L85" href="#L85">85</a>        <span class="jxr_string">"foo+bar.com"</span>,
<a class="jxr_linenumber" name="L86" href="#L86">86</a>        <span class="jxr_string">"foo!bar.com"</span>,
<a class="jxr_linenumber" name="L87" href="#L87">87</a>        <span class="jxr_string">".foo.com"</span>,
<a class="jxr_linenumber" name="L88" href="#L88">88</a>        <span class="jxr_string">"..bar.com"</span>,
<a class="jxr_linenumber" name="L89" href="#L89">89</a>        <span class="jxr_string">"baz..com"</span>,
<a class="jxr_linenumber" name="L90" href="#L90">90</a>        <span class="jxr_string">"..quiffle.com"</span>,
<a class="jxr_linenumber" name="L91" href="#L91">91</a>        <span class="jxr_string">"fleeb.com.."</span>,
<a class="jxr_linenumber" name="L92" href="#L92">92</a>        <span class="jxr_string">"."</span>,
<a class="jxr_linenumber" name="L93" href="#L93">93</a>        <span class="jxr_string">".."</span>,
<a class="jxr_linenumber" name="L94" href="#L94">94</a>        <span class="jxr_string">"..."</span>,
<a class="jxr_linenumber" name="L95" href="#L95">95</a>        <span class="jxr_string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com"</span>,
<a class="jxr_linenumber" name="L96" href="#L96">96</a>        <span class="jxr_string">"a"</span> + DELTA + <span class="jxr_string">" .com"</span>,
<a class="jxr_linenumber" name="L97" href="#L97">97</a>        ALMOST_TOO_MANY_LEVELS + <span class="jxr_string">"com"</span>,
<a class="jxr_linenumber" name="L98" href="#L98">98</a>        ALMOST_TOO_LONG + <span class="jxr_string">".c"</span>);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  
<a class="jxr_linenumber" name="L100" href="#L100">100</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableSet&lt;String&gt; PS = ImmutableSet.of(
<a class="jxr_linenumber" name="L101" href="#L101">101</a>       <span class="jxr_string">"com"</span>,
<a class="jxr_linenumber" name="L102" href="#L102">102</a>       <span class="jxr_string">"co.uk"</span>,
<a class="jxr_linenumber" name="L103" href="#L103">103</a>       <span class="jxr_string">"foo.bd"</span>,
<a class="jxr_linenumber" name="L104" href="#L104">104</a>       <span class="jxr_string">"xxxxxx.bd"</span>,
<a class="jxr_linenumber" name="L105" href="#L105">105</a>       <span class="jxr_string">"org.mK"</span>,
<a class="jxr_linenumber" name="L106" href="#L106">106</a>       <span class="jxr_string">"us"</span>,
<a class="jxr_linenumber" name="L107" href="#L107">107</a>       <span class="jxr_string">"uk\uFF61com."</span>,  <em class="jxr_comment">// Alternate dot character</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a>       <span class="jxr_string">"\u7f51\u7edc.Cn"</span>,  <em class="jxr_comment">// "网络.Cn"</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a>       <span class="jxr_string">"j\u00f8rpeland.no"</span>,  <em class="jxr_comment">// "jorpeland.no" (first o slashed)</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a>       <span class="jxr_string">"xn--jrpeland-54a.no"</span>  <em class="jxr_comment">// IDNA (punycode) encoding of above</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a>   );
<a class="jxr_linenumber" name="L112" href="#L112">112</a> 
<a class="jxr_linenumber" name="L113" href="#L113">113</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableSet&lt;String&gt; NO_PS = ImmutableSet.of(
<a class="jxr_linenumber" name="L114" href="#L114">114</a>       <span class="jxr_string">"www"</span>, <span class="jxr_string">"foo.google"</span>, <span class="jxr_string">"x.y.z"</span>);
<a class="jxr_linenumber" name="L115" href="#L115">115</a> 
<a class="jxr_linenumber" name="L116" href="#L116">116</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableSet&lt;String&gt; NON_PS = ImmutableSet.of(
<a class="jxr_linenumber" name="L117" href="#L117">117</a>       <span class="jxr_string">"foo.bar.com"</span>, <span class="jxr_string">"foo.ca"</span>, <span class="jxr_string">"foo.bar.ca"</span>,
<a class="jxr_linenumber" name="L118" href="#L118">118</a>       <span class="jxr_string">"foo.bar.co.il"</span>, <span class="jxr_string">"state.CA.us"</span>, <span class="jxr_string">"www.state.pa.us"</span>, <span class="jxr_string">"pvt.k12.ca.us"</span>,
<a class="jxr_linenumber" name="L119" href="#L119">119</a>       <span class="jxr_string">"www.google.com"</span>, <span class="jxr_string">"www4.yahoo.co.uk"</span>, <span class="jxr_string">"home.netscape.com"</span>,
<a class="jxr_linenumber" name="L120" href="#L120">120</a>       <span class="jxr_string">"web.MIT.edu"</span>, <span class="jxr_string">"foo.eDu.au"</span>, <span class="jxr_string">"utenti.blah.IT"</span>, <span class="jxr_string">"dominio.com.co"</span>);
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableSet&lt;String&gt; TOP_PRIVATE_DOMAIN =
<a class="jxr_linenumber" name="L123" href="#L123">123</a>       ImmutableSet.of(<span class="jxr_string">"google.com"</span>, <span class="jxr_string">"foo.Co.uk"</span>, <span class="jxr_string">"foo.ca.us."</span>);
<a class="jxr_linenumber" name="L124" href="#L124">124</a> 
<a class="jxr_linenumber" name="L125" href="#L125">125</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableSet&lt;String&gt; UNDER_PRIVATE_DOMAIN =
<a class="jxr_linenumber" name="L126" href="#L126">126</a>       ImmutableSet.of(<span class="jxr_string">"foo.bar.google.com"</span>, <span class="jxr_string">"a.b.co.uk"</span>, <span class="jxr_string">"x.y.ca.us"</span>);
<a class="jxr_linenumber" name="L127" href="#L127">127</a> 
<a class="jxr_linenumber" name="L128" href="#L128">128</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableSet&lt;String&gt; VALID_IP_ADDRS = ImmutableSet.of(
<a class="jxr_linenumber" name="L129" href="#L129">129</a>       <span class="jxr_string">"1.2.3.4"</span>, <span class="jxr_string">"127.0.0.1"</span>, <span class="jxr_string">"::1"</span>, <span class="jxr_string">"2001:db8::1"</span>);
<a class="jxr_linenumber" name="L130" href="#L130">130</a> 
<a class="jxr_linenumber" name="L131" href="#L131">131</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableSet&lt;String&gt; INVALID_IP_ADDRS = ImmutableSet.of(
<a class="jxr_linenumber" name="L132" href="#L132">132</a>       <span class="jxr_string">""</span>, <span class="jxr_string">"1"</span>, <span class="jxr_string">"1.2.3"</span>, <span class="jxr_string">"..."</span>, <span class="jxr_string">"1.2.3.4.5"</span>, <span class="jxr_string">"400.500.600.700"</span>,
<a class="jxr_linenumber" name="L133" href="#L133">133</a>       <span class="jxr_string">":"</span>, <span class="jxr_string">":::1"</span>, <span class="jxr_string">"2001:db8:"</span>);
<a class="jxr_linenumber" name="L134" href="#L134">134</a> 
<a class="jxr_linenumber" name="L135" href="#L135">135</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableSet&lt;String&gt; SOMEWHERE_UNDER_PS =
<a class="jxr_linenumber" name="L136" href="#L136">136</a>       ImmutableSet.of(
<a class="jxr_linenumber" name="L137" href="#L137">137</a>           <span class="jxr_string">"foo.bar.google.com"</span>,
<a class="jxr_linenumber" name="L138" href="#L138">138</a>           <span class="jxr_string">"a.b.c.1.2.3.ca.us"</span>,
<a class="jxr_linenumber" name="L139" href="#L139">139</a>           <span class="jxr_string">"site.jp"</span>,
<a class="jxr_linenumber" name="L140" href="#L140">140</a>           <span class="jxr_string">"uomi-online.kir.jp"</span>,
<a class="jxr_linenumber" name="L141" href="#L141">141</a>           <span class="jxr_string">"jprs.co.jp"</span>,
<a class="jxr_linenumber" name="L142" href="#L142">142</a>           <span class="jxr_string">"site.quick.jp"</span>,
<a class="jxr_linenumber" name="L143" href="#L143">143</a>           <span class="jxr_string">"site.tenki.jp"</span>,
<a class="jxr_linenumber" name="L144" href="#L144">144</a>           <span class="jxr_string">"site.or.jp"</span>,
<a class="jxr_linenumber" name="L145" href="#L145">145</a>           <span class="jxr_string">"site.gr.jp"</span>,
<a class="jxr_linenumber" name="L146" href="#L146">146</a>           <span class="jxr_string">"site.ne.jp"</span>,
<a class="jxr_linenumber" name="L147" href="#L147">147</a>           <span class="jxr_string">"site.ac.jp"</span>,
<a class="jxr_linenumber" name="L148" href="#L148">148</a>           <span class="jxr_string">"site.ad.jp"</span>,
<a class="jxr_linenumber" name="L149" href="#L149">149</a>           <span class="jxr_string">"site.ed.jp"</span>,
<a class="jxr_linenumber" name="L150" href="#L150">150</a>           <span class="jxr_string">"site.geo.jp"</span>,
<a class="jxr_linenumber" name="L151" href="#L151">151</a>           <span class="jxr_string">"site.go.jp"</span>,
<a class="jxr_linenumber" name="L152" href="#L152">152</a>           <span class="jxr_string">"site.lg.jp"</span>,
<a class="jxr_linenumber" name="L153" href="#L153">153</a>           <span class="jxr_string">"1.fm"</span>,
<a class="jxr_linenumber" name="L154" href="#L154">154</a>           <span class="jxr_string">"site.cc"</span>,
<a class="jxr_linenumber" name="L155" href="#L155">155</a>           <span class="jxr_string">"site.ee"</span>,
<a class="jxr_linenumber" name="L156" href="#L156">156</a>           <span class="jxr_string">"site.fi"</span>,
<a class="jxr_linenumber" name="L157" href="#L157">157</a>           <span class="jxr_string">"site.fm"</span>,
<a class="jxr_linenumber" name="L158" href="#L158">158</a>           <span class="jxr_string">"site.gr"</span>,
<a class="jxr_linenumber" name="L159" href="#L159">159</a>           <span class="jxr_string">"www.leguide.ma"</span>,
<a class="jxr_linenumber" name="L160" href="#L160">160</a>           <span class="jxr_string">"site.ma"</span>,
<a class="jxr_linenumber" name="L161" href="#L161">161</a>           <span class="jxr_string">"some.org.mk"</span>,
<a class="jxr_linenumber" name="L162" href="#L162">162</a>           <span class="jxr_string">"site.mk"</span>,
<a class="jxr_linenumber" name="L163" href="#L163">163</a>           <span class="jxr_string">"site.tv"</span>,
<a class="jxr_linenumber" name="L164" href="#L164">164</a>           <span class="jxr_string">"site.us"</span>,
<a class="jxr_linenumber" name="L165" href="#L165">165</a>           <span class="jxr_string">"www.odev.us"</span>,
<a class="jxr_linenumber" name="L166" href="#L166">166</a>           <span class="jxr_string">"www.GOOGLE.com"</span>,
<a class="jxr_linenumber" name="L167" href="#L167">167</a>           <span class="jxr_string">"www.com"</span>,
<a class="jxr_linenumber" name="L168" href="#L168">168</a>           <span class="jxr_string">"google.com"</span>,
<a class="jxr_linenumber" name="L169" href="#L169">169</a>           <span class="jxr_string">"www7.google.co.uk"</span>,
<a class="jxr_linenumber" name="L170" href="#L170">170</a>           <span class="jxr_string">"google.Co.uK"</span>,
<a class="jxr_linenumber" name="L171" href="#L171">171</a>           <span class="jxr_string">"jobs.kt.com."</span>,
<a class="jxr_linenumber" name="L172" href="#L172">172</a>           <span class="jxr_string">"home.netscape.com"</span>,
<a class="jxr_linenumber" name="L173" href="#L173">173</a>           <span class="jxr_string">"web.stanford.edu"</span>,
<a class="jxr_linenumber" name="L174" href="#L174">174</a>           <span class="jxr_string">"stanford.edu"</span>,
<a class="jxr_linenumber" name="L175" href="#L175">175</a>           <span class="jxr_string">"state.ca.us"</span>,
<a class="jxr_linenumber" name="L176" href="#L176">176</a>           <span class="jxr_string">"www.state.ca.us"</span>,
<a class="jxr_linenumber" name="L177" href="#L177">177</a>           <span class="jxr_string">"state.ca.us"</span>,
<a class="jxr_linenumber" name="L178" href="#L178">178</a>           <span class="jxr_string">"pvt.k12.ca.us"</span>,
<a class="jxr_linenumber" name="L179" href="#L179">179</a>           <span class="jxr_string">"www.rave.ca."</span>,
<a class="jxr_linenumber" name="L180" href="#L180">180</a>           <span class="jxr_string">"cnn.ca"</span>,
<a class="jxr_linenumber" name="L181" href="#L181">181</a>           <span class="jxr_string">"ledger-enquirer.com"</span>,
<a class="jxr_linenumber" name="L182" href="#L182">182</a>           <span class="jxr_string">"it-trace.ch"</span>,
<a class="jxr_linenumber" name="L183" href="#L183">183</a>           <span class="jxr_string">"cool.dk"</span>,
<a class="jxr_linenumber" name="L184" href="#L184">184</a>           <span class="jxr_string">"cool.co.uk"</span>,
<a class="jxr_linenumber" name="L185" href="#L185">185</a>           <span class="jxr_string">"cool.de"</span>,
<a class="jxr_linenumber" name="L186" href="#L186">186</a>           <span class="jxr_string">"cool.es"</span>,
<a class="jxr_linenumber" name="L187" href="#L187">187</a>           <span class="jxr_string">"cool\uFF61fr"</span>, <em class="jxr_comment">// Alternate dot character</em>
<a class="jxr_linenumber" name="L188" href="#L188">188</a>           <span class="jxr_string">"cool.nl"</span>,
<a class="jxr_linenumber" name="L189" href="#L189">189</a>           <span class="jxr_string">"members.blah.nl."</span>,
<a class="jxr_linenumber" name="L190" href="#L190">190</a>           <span class="jxr_string">"cool.se"</span>,
<a class="jxr_linenumber" name="L191" href="#L191">191</a>           <span class="jxr_string">"utenti.blah.it"</span>,
<a class="jxr_linenumber" name="L192" href="#L192">192</a>           <span class="jxr_string">"kt.co"</span>,
<a class="jxr_linenumber" name="L193" href="#L193">193</a>           <span class="jxr_string">"a\u7f51\u7edcA.\u7f51\u7edc.Cn"</span>  <em class="jxr_comment">// "a网络A.网络.Cn"</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a>       );
<a class="jxr_linenumber" name="L195" href="#L195">195</a> 
<a class="jxr_linenumber" name="L196" href="#L196">196</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testValid() {
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     <strong class="jxr_keyword">for</strong> (String name : VALID_NAME) {
<a class="jxr_linenumber" name="L198" href="#L198">198</a>       InternetDomainName.from(name);
<a class="jxr_linenumber" name="L199" href="#L199">199</a>     }
<a class="jxr_linenumber" name="L200" href="#L200">200</a>   }
<a class="jxr_linenumber" name="L201" href="#L201">201</a> 
<a class="jxr_linenumber" name="L202" href="#L202">202</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testInvalid() {
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     <strong class="jxr_keyword">for</strong> (String name : INVALID_NAME) {
<a class="jxr_linenumber" name="L204" href="#L204">204</a>       <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         InternetDomainName.from(name);
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         fail(<span class="jxr_string">"Should have been invalid: '"</span> + name + <span class="jxr_string">"'"</span>);
<a class="jxr_linenumber" name="L207" href="#L207">207</a>       } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         <em class="jxr_comment">// Expected case</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a>       }
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     }
<a class="jxr_linenumber" name="L211" href="#L211">211</a>   }
<a class="jxr_linenumber" name="L212" href="#L212">212</a> 
<a class="jxr_linenumber" name="L213" href="#L213">213</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPublicSuffix() {
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     <strong class="jxr_keyword">for</strong> (String name : PS) {
<a class="jxr_linenumber" name="L215" href="#L215">215</a>       <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> domain = InternetDomainName.from(name);
<a class="jxr_linenumber" name="L216" href="#L216">216</a>       assertTrue(name, domain.isPublicSuffix());
<a class="jxr_linenumber" name="L217" href="#L217">217</a>       assertTrue(name, domain.hasPublicSuffix());
<a class="jxr_linenumber" name="L218" href="#L218">218</a>       assertFalse(name, domain.isUnderPublicSuffix());
<a class="jxr_linenumber" name="L219" href="#L219">219</a>       assertFalse(name, domain.isTopPrivateDomain());
<a class="jxr_linenumber" name="L220" href="#L220">220</a>       assertEquals(domain, domain.publicSuffix());
<a class="jxr_linenumber" name="L221" href="#L221">221</a>     }
<a class="jxr_linenumber" name="L222" href="#L222">222</a> 
<a class="jxr_linenumber" name="L223" href="#L223">223</a>     <strong class="jxr_keyword">for</strong> (String name : NO_PS) {
<a class="jxr_linenumber" name="L224" href="#L224">224</a>       <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> domain = InternetDomainName.from(name);
<a class="jxr_linenumber" name="L225" href="#L225">225</a>       assertFalse(name, domain.isPublicSuffix());
<a class="jxr_linenumber" name="L226" href="#L226">226</a>       assertFalse(name, domain.hasPublicSuffix());
<a class="jxr_linenumber" name="L227" href="#L227">227</a>       assertFalse(name, domain.isUnderPublicSuffix());
<a class="jxr_linenumber" name="L228" href="#L228">228</a>       assertFalse(name, domain.isTopPrivateDomain());
<a class="jxr_linenumber" name="L229" href="#L229">229</a>       assertNull(domain.publicSuffix());
<a class="jxr_linenumber" name="L230" href="#L230">230</a>     }
<a class="jxr_linenumber" name="L231" href="#L231">231</a> 
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     <strong class="jxr_keyword">for</strong> (String name : NON_PS) {
<a class="jxr_linenumber" name="L233" href="#L233">233</a>       <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> domain = InternetDomainName.from(name);
<a class="jxr_linenumber" name="L234" href="#L234">234</a>       assertFalse(name, domain.isPublicSuffix());
<a class="jxr_linenumber" name="L235" href="#L235">235</a>       assertTrue(name, domain.hasPublicSuffix());
<a class="jxr_linenumber" name="L236" href="#L236">236</a>       assertTrue(name, domain.isUnderPublicSuffix());
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     }
<a class="jxr_linenumber" name="L238" href="#L238">238</a>   }
<a class="jxr_linenumber" name="L239" href="#L239">239</a> 
<a class="jxr_linenumber" name="L240" href="#L240">240</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testUnderPublicSuffix() {
<a class="jxr_linenumber" name="L241" href="#L241">241</a>     <strong class="jxr_keyword">for</strong> (String name : SOMEWHERE_UNDER_PS) {
<a class="jxr_linenumber" name="L242" href="#L242">242</a>       <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> domain = InternetDomainName.from(name);
<a class="jxr_linenumber" name="L243" href="#L243">243</a>       assertFalse(name, domain.isPublicSuffix());
<a class="jxr_linenumber" name="L244" href="#L244">244</a>       assertTrue(name, domain.hasPublicSuffix());
<a class="jxr_linenumber" name="L245" href="#L245">245</a>       assertTrue(name, domain.isUnderPublicSuffix());
<a class="jxr_linenumber" name="L246" href="#L246">246</a>     }
<a class="jxr_linenumber" name="L247" href="#L247">247</a>   }
<a class="jxr_linenumber" name="L248" href="#L248">248</a> 
<a class="jxr_linenumber" name="L249" href="#L249">249</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTopPrivateDomain() {
<a class="jxr_linenumber" name="L250" href="#L250">250</a>     <strong class="jxr_keyword">for</strong> (String name : TOP_PRIVATE_DOMAIN) {
<a class="jxr_linenumber" name="L251" href="#L251">251</a>       <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> domain = InternetDomainName.from(name);
<a class="jxr_linenumber" name="L252" href="#L252">252</a>       assertFalse(name, domain.isPublicSuffix());
<a class="jxr_linenumber" name="L253" href="#L253">253</a>       assertTrue(name, domain.hasPublicSuffix());
<a class="jxr_linenumber" name="L254" href="#L254">254</a>       assertTrue(name, domain.isUnderPublicSuffix());
<a class="jxr_linenumber" name="L255" href="#L255">255</a>       assertTrue(name, domain.isTopPrivateDomain());
<a class="jxr_linenumber" name="L256" href="#L256">256</a>       assertEquals(domain.parent(), domain.publicSuffix());
<a class="jxr_linenumber" name="L257" href="#L257">257</a>     }
<a class="jxr_linenumber" name="L258" href="#L258">258</a>   }
<a class="jxr_linenumber" name="L259" href="#L259">259</a> 
<a class="jxr_linenumber" name="L260" href="#L260">260</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testUnderPrivateDomain() {
<a class="jxr_linenumber" name="L261" href="#L261">261</a>     <strong class="jxr_keyword">for</strong> (String name : UNDER_PRIVATE_DOMAIN) {
<a class="jxr_linenumber" name="L262" href="#L262">262</a>       <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> domain = InternetDomainName.from(name);
<a class="jxr_linenumber" name="L263" href="#L263">263</a>       assertFalse(name, domain.isPublicSuffix());
<a class="jxr_linenumber" name="L264" href="#L264">264</a>       assertTrue(name, domain.hasPublicSuffix());
<a class="jxr_linenumber" name="L265" href="#L265">265</a>       assertTrue(name, domain.isUnderPublicSuffix());
<a class="jxr_linenumber" name="L266" href="#L266">266</a>       assertFalse(name, domain.isTopPrivateDomain());
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     }
<a class="jxr_linenumber" name="L268" href="#L268">268</a>   }
<a class="jxr_linenumber" name="L269" href="#L269">269</a> 
<a class="jxr_linenumber" name="L270" href="#L270">270</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testParent() {
<a class="jxr_linenumber" name="L271" href="#L271">271</a>     assertEquals(
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         <span class="jxr_string">"com"</span>,
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         InternetDomainName.from(<span class="jxr_string">"google.com"</span>).parent().toString());
<a class="jxr_linenumber" name="L274" href="#L274">274</a>     assertEquals(
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         <span class="jxr_string">"uk"</span>,
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         InternetDomainName.from(<span class="jxr_string">"co.uk"</span>).parent().toString());
<a class="jxr_linenumber" name="L277" href="#L277">277</a>     assertEquals(
<a class="jxr_linenumber" name="L278" href="#L278">278</a>         <span class="jxr_string">"google.com"</span>,
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         InternetDomainName.from(<span class="jxr_string">"www.google.com"</span>).parent().toString());
<a class="jxr_linenumber" name="L280" href="#L280">280</a> 
<a class="jxr_linenumber" name="L281" href="#L281">281</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L282" href="#L282">282</a>       InternetDomainName.from(<span class="jxr_string">"com"</span>).parent();
<a class="jxr_linenumber" name="L283" href="#L283">283</a>       fail(<span class="jxr_string">"'com' should throw ISE on .parent() call"</span>);
<a class="jxr_linenumber" name="L284" href="#L284">284</a>     } <strong class="jxr_keyword">catch</strong> (IllegalStateException expected) {
<a class="jxr_linenumber" name="L285" href="#L285">285</a>     }
<a class="jxr_linenumber" name="L286" href="#L286">286</a>   }
<a class="jxr_linenumber" name="L287" href="#L287">287</a> 
<a class="jxr_linenumber" name="L288" href="#L288">288</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testChild() {
<a class="jxr_linenumber" name="L289" href="#L289">289</a>     <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> domain = InternetDomainName.from(<span class="jxr_string">"foo.com"</span>);
<a class="jxr_linenumber" name="L290" href="#L290">290</a> 
<a class="jxr_linenumber" name="L291" href="#L291">291</a>     assertEquals(<span class="jxr_string">"www.foo.com"</span>, domain.child(<span class="jxr_string">"www"</span>).toString());
<a class="jxr_linenumber" name="L292" href="#L292">292</a> 
<a class="jxr_linenumber" name="L293" href="#L293">293</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L294" href="#L294">294</a>       domain.child(<span class="jxr_string">"www."</span>);
<a class="jxr_linenumber" name="L295" href="#L295">295</a>       fail(<span class="jxr_string">"www..google.com should have been invalid"</span>);
<a class="jxr_linenumber" name="L296" href="#L296">296</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L297" href="#L297">297</a>       <em class="jxr_comment">// Expected outcome</em>
<a class="jxr_linenumber" name="L298" href="#L298">298</a>     }
<a class="jxr_linenumber" name="L299" href="#L299">299</a>   }
<a class="jxr_linenumber" name="L300" href="#L300">300</a> 
<a class="jxr_linenumber" name="L301" href="#L301">301</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testParentChild() {
<a class="jxr_linenumber" name="L302" href="#L302">302</a>     <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> origin = InternetDomainName.from(<span class="jxr_string">"foo.com"</span>);
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> parent = origin.parent();
<a class="jxr_linenumber" name="L304" href="#L304">304</a>     assertEquals(<span class="jxr_string">"com"</span>, parent.toString());
<a class="jxr_linenumber" name="L305" href="#L305">305</a> 
<a class="jxr_linenumber" name="L306" href="#L306">306</a>     <em class="jxr_comment">// These would throw an exception if leniency were not preserved during parent() and child()</em>
<a class="jxr_linenumber" name="L307" href="#L307">307</a>     <em class="jxr_comment">// calls.</em>
<a class="jxr_linenumber" name="L308" href="#L308">308</a>     <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> child = parent.child(LOTS_OF_DELTAS);
<a class="jxr_linenumber" name="L309" href="#L309">309</a>     child.child(LOTS_OF_DELTAS);
<a class="jxr_linenumber" name="L310" href="#L310">310</a>   }
<a class="jxr_linenumber" name="L311" href="#L311">311</a> 
<a class="jxr_linenumber" name="L312" href="#L312">312</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testValidTopPrivateDomain() {
<a class="jxr_linenumber" name="L313" href="#L313">313</a>     <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> googleDomain = InternetDomainName.from(<span class="jxr_string">"google.com"</span>);
<a class="jxr_linenumber" name="L314" href="#L314">314</a> 
<a class="jxr_linenumber" name="L315" href="#L315">315</a>     assertEquals(googleDomain, googleDomain.topPrivateDomain());
<a class="jxr_linenumber" name="L316" href="#L316">316</a>     assertEquals(googleDomain, googleDomain.child(<span class="jxr_string">"mail"</span>).topPrivateDomain());
<a class="jxr_linenumber" name="L317" href="#L317">317</a>     assertEquals(googleDomain, googleDomain.child(<span class="jxr_string">"foo.bar"</span>).topPrivateDomain());
<a class="jxr_linenumber" name="L318" href="#L318">318</a>   }
<a class="jxr_linenumber" name="L319" href="#L319">319</a> 
<a class="jxr_linenumber" name="L320" href="#L320">320</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testInvalidTopPrivateDomain() {
<a class="jxr_linenumber" name="L321" href="#L321">321</a>     ImmutableSet&lt;String&gt; badCookieDomains =
<a class="jxr_linenumber" name="L322" href="#L322">322</a>         ImmutableSet.of(<span class="jxr_string">"co.uk"</span>, <span class="jxr_string">"foo"</span>, <span class="jxr_string">"com"</span>);
<a class="jxr_linenumber" name="L323" href="#L323">323</a> 
<a class="jxr_linenumber" name="L324" href="#L324">324</a>     <strong class="jxr_keyword">for</strong> (String domain : badCookieDomains) {
<a class="jxr_linenumber" name="L325" href="#L325">325</a>       <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L326" href="#L326">326</a>         InternetDomainName.from(domain).topPrivateDomain();
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         fail(domain);
<a class="jxr_linenumber" name="L328" href="#L328">328</a>       } <strong class="jxr_keyword">catch</strong> (IllegalStateException expected) {
<a class="jxr_linenumber" name="L329" href="#L329">329</a>       }
<a class="jxr_linenumber" name="L330" href="#L330">330</a>     }
<a class="jxr_linenumber" name="L331" href="#L331">331</a>   }
<a class="jxr_linenumber" name="L332" href="#L332">332</a> 
<a class="jxr_linenumber" name="L333" href="#L333">333</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIsValid() {
<a class="jxr_linenumber" name="L334" href="#L334">334</a>     <strong class="jxr_keyword">final</strong> Iterable&lt;String&gt; validCases = Iterables.concat(
<a class="jxr_linenumber" name="L335" href="#L335">335</a>         VALID_NAME, PS, NO_PS, NON_PS);
<a class="jxr_linenumber" name="L336" href="#L336">336</a>     <strong class="jxr_keyword">final</strong> Iterable&lt;String&gt; invalidCases = Iterables.concat(
<a class="jxr_linenumber" name="L337" href="#L337">337</a>         INVALID_NAME, VALID_IP_ADDRS, INVALID_IP_ADDRS);
<a class="jxr_linenumber" name="L338" href="#L338">338</a> 
<a class="jxr_linenumber" name="L339" href="#L339">339</a>     <strong class="jxr_keyword">for</strong> (String valid : validCases) {
<a class="jxr_linenumber" name="L340" href="#L340">340</a>       assertTrue(valid, InternetDomainName.isValid(valid));
<a class="jxr_linenumber" name="L341" href="#L341">341</a>     }
<a class="jxr_linenumber" name="L342" href="#L342">342</a> 
<a class="jxr_linenumber" name="L343" href="#L343">343</a>     <strong class="jxr_keyword">for</strong> (String invalid : invalidCases) {
<a class="jxr_linenumber" name="L344" href="#L344">344</a>       assertFalse(invalid, InternetDomainName.isValid(invalid));
<a class="jxr_linenumber" name="L345" href="#L345">345</a>     }
<a class="jxr_linenumber" name="L346" href="#L346">346</a>   }
<a class="jxr_linenumber" name="L347" href="#L347">347</a> 
<a class="jxr_linenumber" name="L348" href="#L348">348</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testToString() {
<a class="jxr_linenumber" name="L349" href="#L349">349</a>     <strong class="jxr_keyword">for</strong> (String inputName : SOMEWHERE_UNDER_PS) {
<a class="jxr_linenumber" name="L350" href="#L350">350</a>       <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> domain = InternetDomainName.from(inputName);
<a class="jxr_linenumber" name="L351" href="#L351">351</a> 
<a class="jxr_linenumber" name="L352" href="#L352">352</a>       <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L353" href="#L353">353</a> <em class="jxr_comment">       * We would ordinarily use constants for the expected results, but</em>
<a class="jxr_linenumber" name="L354" href="#L354">354</a> <em class="jxr_comment">       * doing it by derivation allows us to reuse the test case definitions</em>
<a class="jxr_linenumber" name="L355" href="#L355">355</a> <em class="jxr_comment">       * used in other tests.</em>
<a class="jxr_linenumber" name="L356" href="#L356">356</a> <em class="jxr_comment">       */</em>
<a class="jxr_linenumber" name="L357" href="#L357">357</a> 
<a class="jxr_linenumber" name="L358" href="#L358">358</a>       String expectedName = Ascii.toLowerCase(inputName);
<a class="jxr_linenumber" name="L359" href="#L359">359</a>       expectedName = expectedName.replaceAll(<span class="jxr_string">"[\u3002\uFF0E\uFF61]"</span>, <span class="jxr_string">"."</span>);
<a class="jxr_linenumber" name="L360" href="#L360">360</a> 
<a class="jxr_linenumber" name="L361" href="#L361">361</a>       <strong class="jxr_keyword">if</strong> (expectedName.endsWith(<span class="jxr_string">"."</span>)) {
<a class="jxr_linenumber" name="L362" href="#L362">362</a>         expectedName = expectedName.substring(0, expectedName.length() - 1);
<a class="jxr_linenumber" name="L363" href="#L363">363</a>       }
<a class="jxr_linenumber" name="L364" href="#L364">364</a> 
<a class="jxr_linenumber" name="L365" href="#L365">365</a>       assertEquals(expectedName, domain.toString());
<a class="jxr_linenumber" name="L366" href="#L366">366</a>     }
<a class="jxr_linenumber" name="L367" href="#L367">367</a>   }
<a class="jxr_linenumber" name="L368" href="#L368">368</a> 
<a class="jxr_linenumber" name="L369" href="#L369">369</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testExclusion() {
<a class="jxr_linenumber" name="L370" href="#L370">370</a>     <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> domain = InternetDomainName.from(<span class="jxr_string">"foo.teledata.mz"</span>);
<a class="jxr_linenumber" name="L371" href="#L371">371</a>     assertTrue(domain.hasPublicSuffix());
<a class="jxr_linenumber" name="L372" href="#L372">372</a>     assertEquals(<span class="jxr_string">"mz"</span>, domain.publicSuffix().toString());
<a class="jxr_linenumber" name="L373" href="#L373">373</a> 
<a class="jxr_linenumber" name="L374" href="#L374">374</a>     <em class="jxr_comment">// Behold the weirdness!</em>
<a class="jxr_linenumber" name="L375" href="#L375">375</a>     assertFalse(domain.publicSuffix().isPublicSuffix());
<a class="jxr_linenumber" name="L376" href="#L376">376</a>   }
<a class="jxr_linenumber" name="L377" href="#L377">377</a> 
<a class="jxr_linenumber" name="L378" href="#L378">378</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMultipleUnders() {
<a class="jxr_linenumber" name="L379" href="#L379">379</a>     <em class="jxr_comment">// PSL has both *.uk and *.sch.uk; the latter should win.</em>
<a class="jxr_linenumber" name="L380" href="#L380">380</a>     <em class="jxr_comment">// See http://code.google.com/p/guava-libraries/issues/detail?id=1176</em>
<a class="jxr_linenumber" name="L381" href="#L381">381</a> 
<a class="jxr_linenumber" name="L382" href="#L382">382</a>     <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> domain = InternetDomainName.from(<span class="jxr_string">"www.essex.sch.uk"</span>);
<a class="jxr_linenumber" name="L383" href="#L383">383</a>     assertTrue(domain.hasPublicSuffix());
<a class="jxr_linenumber" name="L384" href="#L384">384</a>     assertEquals(<span class="jxr_string">"essex.sch.uk"</span>, domain.publicSuffix().toString());
<a class="jxr_linenumber" name="L385" href="#L385">385</a>     assertEquals(<span class="jxr_string">"www.essex.sch.uk"</span>, domain.topPrivateDomain().toString());
<a class="jxr_linenumber" name="L386" href="#L386">386</a>   }
<a class="jxr_linenumber" name="L387" href="#L387">387</a> 
<a class="jxr_linenumber" name="L388" href="#L388">388</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEquality() {
<a class="jxr_linenumber" name="L389" href="#L389">389</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L390" href="#L390">390</a>         .addEqualityGroup(
<a class="jxr_linenumber" name="L391" href="#L391">391</a>             idn(<span class="jxr_string">"google.com"</span>), idn(<span class="jxr_string">"google.com"</span>), idn(<span class="jxr_string">"GOOGLE.COM"</span>))
<a class="jxr_linenumber" name="L392" href="#L392">392</a>         .addEqualityGroup(idn(<span class="jxr_string">"www.google.com"</span>))
<a class="jxr_linenumber" name="L393" href="#L393">393</a>         .addEqualityGroup(UNICODE_EXAMPLE)
<a class="jxr_linenumber" name="L394" href="#L394">394</a>         .addEqualityGroup(PUNYCODE_EXAMPLE)
<a class="jxr_linenumber" name="L395" href="#L395">395</a>         .testEquals();
<a class="jxr_linenumber" name="L396" href="#L396">396</a>   }
<a class="jxr_linenumber" name="L397" href="#L397">397</a> 
<a class="jxr_linenumber" name="L398" href="#L398">398</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../com/google/common/net/InternetDomainName.html">InternetDomainName</a> idn(String domain) {
<a class="jxr_linenumber" name="L399" href="#L399">399</a>     <strong class="jxr_keyword">return</strong> InternetDomainName.from(domain);
<a class="jxr_linenumber" name="L400" href="#L400">400</a>   }
<a class="jxr_linenumber" name="L401" href="#L401">401</a> 
<a class="jxr_linenumber" name="L402" href="#L402">402</a>   @GwtIncompatible(<span class="jxr_string">"NullPointerTester"</span>)
<a class="jxr_linenumber" name="L403" href="#L403">403</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNulls() {
<a class="jxr_linenumber" name="L404" href="#L404">404</a>     <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/testing/NullPointerTester.html">NullPointerTester</a> tester = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/NullPointerTester.html">NullPointerTester</a>();
<a class="jxr_linenumber" name="L405" href="#L405">405</a> 
<a class="jxr_linenumber" name="L406" href="#L406">406</a>     tester.testAllPublicStaticMethods(InternetDomainName.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L407" href="#L407">407</a>     tester.testAllPublicInstanceMethods(InternetDomainName.from(<span class="jxr_string">"google.com"</span>));
<a class="jxr_linenumber" name="L408" href="#L408">408</a>   }
<a class="jxr_linenumber" name="L409" href="#L409">409</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
