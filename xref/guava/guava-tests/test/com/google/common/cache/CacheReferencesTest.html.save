<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>CacheReferencesTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/cache/CacheReferencesTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2011 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * in compliance with the License. You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software distributed under the License</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * or implied. See the License for the specific language governing permissions and limitations under</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * the License.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <strong class="jxr_keyword">package</strong> com.google.common.cache;
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.cache.LocalCache.Strength.STRONG;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.collect.Maps.immutableEntry;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.truth.Truth.assertThat;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Function;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.common.cache.LocalCache.Strength;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> com.google.common.cache.TestingRemovalListeners.CountingRemovalListener;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableSet;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Iterables;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> java.lang.ref.WeakReference;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * Tests of basic {@link LoadingCache} operations with all possible combinations of key &amp; value</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * strengths.</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * @author mike nonemacher</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/cache/CacheReferencesTest.html">CacheReferencesTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  
<a class="jxr_linenumber" name="L39" href="#L39">39</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> CacheLoader&lt;Key,String&gt; KEY_TO_STRING_LOADER =
<a class="jxr_linenumber" name="L40" href="#L40">40</a>        <strong class="jxr_keyword">new</strong> CacheLoader&lt;Key, String&gt;() {
<a class="jxr_linenumber" name="L41" href="#L41">41</a>          @Override <strong class="jxr_keyword">public</strong> String load(<a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a> key) {
<a class="jxr_linenumber" name="L42" href="#L42">42</a>            <strong class="jxr_keyword">return</strong> key.toString();
<a class="jxr_linenumber" name="L43" href="#L43">43</a>          }
<a class="jxr_linenumber" name="L44" href="#L44">44</a>        };
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  
<a class="jxr_linenumber" name="L46" href="#L46">46</a>    <strong class="jxr_keyword">private</strong> <a href="../../../../com/google/common/cache/CacheBuilderFactory.html">CacheBuilderFactory</a> factoryWithAllKeyStrengths() {
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/cache/CacheBuilderFactory.html">CacheBuilderFactory</a>()
<a class="jxr_linenumber" name="L48" href="#L48">48</a>          .withKeyStrengths(ImmutableSet.of(STRONG, Strength.WEAK))
<a class="jxr_linenumber" name="L49" href="#L49">49</a>          .withValueStrengths(ImmutableSet.of(STRONG, Strength.WEAK, Strength.SOFT));
<a class="jxr_linenumber" name="L50" href="#L50">50</a>    }
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  
<a class="jxr_linenumber" name="L52" href="#L52">52</a>    <strong class="jxr_keyword">private</strong> Iterable&lt;LoadingCache&lt;Key, String&gt;&gt; caches() {
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      <a href="../../../../com/google/common/cache/CacheBuilderFactory.html">CacheBuilderFactory</a> factory = factoryWithAllKeyStrengths();
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <strong class="jxr_keyword">return</strong> Iterables.transform(factory.buildAllPermutations(),
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          <strong class="jxr_keyword">new</strong> Function&lt;CacheBuilder&lt;Object, Object&gt;, LoadingCache&lt;Key, String&gt;&gt;() {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>            @Override <strong class="jxr_keyword">public</strong> LoadingCache&lt;Key, String&gt; apply(CacheBuilder&lt;Object, Object&gt; builder) {
<a class="jxr_linenumber" name="L57" href="#L57">57</a>              <strong class="jxr_keyword">return</strong> builder.build(KEY_TO_STRING_LOADER);
<a class="jxr_linenumber" name="L58" href="#L58">58</a>            }
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          });
<a class="jxr_linenumber" name="L60" href="#L60">60</a>    }
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  
<a class="jxr_linenumber" name="L62" href="#L62">62</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testContainsKeyAndValue() {
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      <strong class="jxr_keyword">for</strong> (LoadingCache&lt;Key, String&gt; cache : caches()) {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>        <em class="jxr_comment">// maintain strong refs so these won't be collected, regardless of cache's key/value strength</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>        <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a> key = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a>(1);
<a class="jxr_linenumber" name="L66" href="#L66">66</a>        String value = key.toString();
<a class="jxr_linenumber" name="L67" href="#L67">67</a>        assertSame(value, cache.getUnchecked(key));
<a class="jxr_linenumber" name="L68" href="#L68">68</a>        assertTrue(cache.asMap().containsKey(key));
<a class="jxr_linenumber" name="L69" href="#L69">69</a>        assertTrue(cache.asMap().containsValue(value));
<a class="jxr_linenumber" name="L70" href="#L70">70</a>        assertEquals(1, cache.size());
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      }
<a class="jxr_linenumber" name="L72" href="#L72">72</a>    }
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  
<a class="jxr_linenumber" name="L74" href="#L74">74</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testClear() {
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      <strong class="jxr_keyword">for</strong> (LoadingCache&lt;Key, String&gt; cache : caches()) {
<a class="jxr_linenumber" name="L76" href="#L76">76</a>        <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a> key = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a>(1);
<a class="jxr_linenumber" name="L77" href="#L77">77</a>        String value = key.toString();
<a class="jxr_linenumber" name="L78" href="#L78">78</a>        assertSame(value, cache.getUnchecked(key));
<a class="jxr_linenumber" name="L79" href="#L79">79</a>        assertFalse(cache.asMap().isEmpty());
<a class="jxr_linenumber" name="L80" href="#L80">80</a>        cache.invalidateAll();
<a class="jxr_linenumber" name="L81" href="#L81">81</a>        assertEquals(0, cache.size());
<a class="jxr_linenumber" name="L82" href="#L82">82</a>        assertTrue(cache.asMap().isEmpty());
<a class="jxr_linenumber" name="L83" href="#L83">83</a>        assertFalse(cache.asMap().containsKey(key));
<a class="jxr_linenumber" name="L84" href="#L84">84</a>        assertFalse(cache.asMap().containsValue(value));
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      }
<a class="jxr_linenumber" name="L86" href="#L86">86</a>    }
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testKeySetEntrySetValues() {
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      <strong class="jxr_keyword">for</strong> (LoadingCache&lt;Key, String&gt; cache : caches()) {
<a class="jxr_linenumber" name="L90" href="#L90">90</a>        <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a> key1 = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a>(1);
<a class="jxr_linenumber" name="L91" href="#L91">91</a>        String value1 = key1.toString();
<a class="jxr_linenumber" name="L92" href="#L92">92</a>        <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a> key2 = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a>(2);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>        String value2 = key2.toString();
<a class="jxr_linenumber" name="L94" href="#L94">94</a>        assertSame(value1, cache.getUnchecked(key1));
<a class="jxr_linenumber" name="L95" href="#L95">95</a>        assertSame(value2, cache.getUnchecked(key2));
<a class="jxr_linenumber" name="L96" href="#L96">96</a>        assertEquals(ImmutableSet.of(key1, key2), cache.asMap().keySet());
<a class="jxr_linenumber" name="L97" href="#L97">97</a>        assertThat(cache.asMap().values()).has().exactly(value1, value2);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>        assertEquals(ImmutableSet.of(immutableEntry(key1, value1), immutableEntry(key2, value2)),
<a class="jxr_linenumber" name="L99" href="#L99">99</a>            cache.asMap().entrySet());
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     }
<a class="jxr_linenumber" name="L101" href="#L101">101</a>   }
<a class="jxr_linenumber" name="L102" href="#L102">102</a> 
<a class="jxr_linenumber" name="L103" href="#L103">103</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testInvalidate() {
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     <strong class="jxr_keyword">for</strong> (LoadingCache&lt;Key, String&gt; cache : caches()) {
<a class="jxr_linenumber" name="L105" href="#L105">105</a>       <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a> key1 = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a>(1);
<a class="jxr_linenumber" name="L106" href="#L106">106</a>       String value1 = key1.toString();
<a class="jxr_linenumber" name="L107" href="#L107">107</a>       <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a> key2 = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a>(2);
<a class="jxr_linenumber" name="L108" href="#L108">108</a>       String value2 = key2.toString();
<a class="jxr_linenumber" name="L109" href="#L109">109</a>       assertSame(value1, cache.getUnchecked(key1));
<a class="jxr_linenumber" name="L110" href="#L110">110</a>       assertSame(value2, cache.getUnchecked(key2));
<a class="jxr_linenumber" name="L111" href="#L111">111</a>       cache.invalidate(key1);
<a class="jxr_linenumber" name="L112" href="#L112">112</a>       assertFalse(cache.asMap().containsKey(key1));
<a class="jxr_linenumber" name="L113" href="#L113">113</a>       assertTrue(cache.asMap().containsKey(key2));
<a class="jxr_linenumber" name="L114" href="#L114">114</a>       assertEquals(1, cache.size());
<a class="jxr_linenumber" name="L115" href="#L115">115</a>       assertEquals(ImmutableSet.of(key2), cache.asMap().keySet());
<a class="jxr_linenumber" name="L116" href="#L116">116</a>       assertThat(cache.asMap().values()).has().item(value2);
<a class="jxr_linenumber" name="L117" href="#L117">117</a>       assertEquals(ImmutableSet.of(immutableEntry(key2, value2)), cache.asMap().entrySet());
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     }
<a class="jxr_linenumber" name="L119" href="#L119">119</a>   }
<a class="jxr_linenumber" name="L120" href="#L120">120</a> 
<a class="jxr_linenumber" name="L121" href="#L121">121</a>   <em class="jxr_comment">// fails in Maven with 64-bit JDK: http://code.google.com/p/guava-libraries/issues/detail?id=1568</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> 
<a class="jxr_linenumber" name="L123" href="#L123">123</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> assertCleanup(LoadingCache&lt;Integer, String&gt; cache,
<a class="jxr_linenumber" name="L124" href="#L124">124</a>       CountingRemovalListener&lt;Integer, String&gt; removalListener) {
<a class="jxr_linenumber" name="L125" href="#L125">125</a> 
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     <em class="jxr_comment">// initialSize will most likely be 2, but it's possible for the GC to have already run, so we'll</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     <em class="jxr_comment">// observe a size of 1</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     <strong class="jxr_keyword">long</strong> initialSize = cache.size();
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     assertTrue(initialSize == 1 || initialSize == 2);
<a class="jxr_linenumber" name="L130" href="#L130">130</a> 
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     <em class="jxr_comment">// wait up to 5s</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     byte[] filler = <strong class="jxr_keyword">new</strong> byte[1024];
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 500; i++) {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>       System.gc();
<a class="jxr_linenumber" name="L135" href="#L135">135</a> 
<a class="jxr_linenumber" name="L136" href="#L136">136</a>       CacheTesting.drainReferenceQueues(cache);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>       <strong class="jxr_keyword">if</strong> (cache.size() == 1) {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L139" href="#L139">139</a>       }
<a class="jxr_linenumber" name="L140" href="#L140">140</a>       <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         Thread.sleep(10);
<a class="jxr_linenumber" name="L142" href="#L142">142</a>       } <strong class="jxr_keyword">catch</strong> (InterruptedException e) { <em class="jxr_comment">/* ignore */</em>}
<a class="jxr_linenumber" name="L143" href="#L143">143</a>       <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         <em class="jxr_comment">// Fill up heap so soft references get cleared.</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a>         filler = <strong class="jxr_keyword">new</strong> byte[Math.max(filler.length, filler.length * 2)];
<a class="jxr_linenumber" name="L146" href="#L146">146</a>       } <strong class="jxr_keyword">catch</strong> (OutOfMemoryError e) {}
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     }
<a class="jxr_linenumber" name="L148" href="#L148">148</a> 
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     CacheTesting.processPendingNotifications(cache);
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     assertEquals(1, cache.size());
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     assertEquals(1, removalListener.getCount());
<a class="jxr_linenumber" name="L152" href="#L152">152</a>   }
<a class="jxr_linenumber" name="L153" href="#L153">153</a> 
<a class="jxr_linenumber" name="L154" href="#L154">154</a>   <em class="jxr_comment">// A simple type whose .toString() will return the same value each time, but without maintaining</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a>   <em class="jxr_comment">// a strong reference to that value.</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a> {
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> value;
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     <strong class="jxr_keyword">private</strong> WeakReference&lt;String&gt; toString;
<a class="jxr_linenumber" name="L159" href="#L159">159</a> 
<a class="jxr_linenumber" name="L160" href="#L160">160</a>     <a href="../../../../com/google/common/cache/CacheReferencesTest.html">Key</a>(<strong class="jxr_keyword">int</strong> value) {
<a class="jxr_linenumber" name="L161" href="#L161">161</a>       <strong class="jxr_keyword">this</strong>.value = value;
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     }
<a class="jxr_linenumber" name="L163" href="#L163">163</a> 
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">synchronized</strong> String toString() {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>       String s;
<a class="jxr_linenumber" name="L166" href="#L166">166</a>       <strong class="jxr_keyword">if</strong> (toString != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         s = toString.get();
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         <strong class="jxr_keyword">if</strong> (s != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L169" href="#L169">169</a>           <strong class="jxr_keyword">return</strong> s;
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         }
<a class="jxr_linenumber" name="L171" href="#L171">171</a>       }
<a class="jxr_linenumber" name="L172" href="#L172">172</a>       s = Integer.toString(value);
<a class="jxr_linenumber" name="L173" href="#L173">173</a>       toString = <strong class="jxr_keyword">new</strong> WeakReference&lt;String&gt;(s);
<a class="jxr_linenumber" name="L174" href="#L174">174</a>       <strong class="jxr_keyword">return</strong> s;
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     }
<a class="jxr_linenumber" name="L176" href="#L176">176</a>   }
<a class="jxr_linenumber" name="L177" href="#L177">177</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
