<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>LocalLoadingCacheTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/cache/LocalLoadingCacheTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2011 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.cache;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.cache.CacheBuilder.EMPTY_STATS;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.cache.LocalCacheTest.SMALL_MAX_SIZE;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.cache.TestingCacheLoaders.identityLoader;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.truth.Truth.assertThat;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> com.google.common.cache.LocalCache.LocalLoadingCache;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> com.google.common.cache.LocalCache.Segment;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableMap;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableSet;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.NullPointerTester;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> java.lang.Thread.UncaughtExceptionHandler;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> java.util.Map;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> java.util.Set;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.ConcurrentMap;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.CountDownLatch;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.TimeUnit;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.atomic.AtomicReference;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * @author Charles Fry</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/cache/LocalLoadingCacheTest.html">LocalLoadingCacheTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  
<a class="jxr_linenumber" name="L45" href="#L45">45</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> &lt;K, V&gt; LocalLoadingCache&lt;K, V&gt; makeCache(
<a class="jxr_linenumber" name="L46" href="#L46">46</a>        CacheBuilder&lt;K, V&gt; builder, CacheLoader&lt;? <strong class="jxr_keyword">super</strong> K, V&gt; loader) {
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> LocalLoadingCache&lt;K, V&gt;(builder, loader);
<a class="jxr_linenumber" name="L48" href="#L48">48</a>    }
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  
<a class="jxr_linenumber" name="L50" href="#L50">50</a>    <strong class="jxr_keyword">private</strong> CacheBuilder&lt;Object, Object&gt; createCacheBuilder() {
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      <strong class="jxr_keyword">return</strong> CacheBuilder.newBuilder().recordStats();
<a class="jxr_linenumber" name="L52" href="#L52">52</a>    }
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  
<a class="jxr_linenumber" name="L54" href="#L54">54</a>    <em class="jxr_comment">// constructor tests</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  
<a class="jxr_linenumber" name="L56" href="#L56">56</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testComputingFunction() {
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      CacheLoader&lt;Object, Object&gt; loader = <strong class="jxr_keyword">new</strong> CacheLoader&lt;Object, Object&gt;() {
<a class="jxr_linenumber" name="L58" href="#L58">58</a>        @Override
<a class="jxr_linenumber" name="L59" href="#L59">59</a>        <strong class="jxr_keyword">public</strong> Object load(Object from) {
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L61" href="#L61">61</a>        }
<a class="jxr_linenumber" name="L62" href="#L62">62</a>      };
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      LocalLoadingCache&lt;Object, Object&gt; cache = makeCache(createCacheBuilder(), loader);
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      assertSame(loader, cache.localCache.defaultLoader);
<a class="jxr_linenumber" name="L65" href="#L65">65</a>    }
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  
<a class="jxr_linenumber" name="L67" href="#L67">67</a>    <em class="jxr_comment">// null parameters test</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  
<a class="jxr_linenumber" name="L69" href="#L69">69</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNullParameters() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <a href="../../../../com/google/common/testing/NullPointerTester.html">NullPointerTester</a> tester = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/NullPointerTester.html">NullPointerTester</a>();
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      CacheLoader&lt;Object, Object&gt; loader = identityLoader();
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      tester.testAllPublicInstanceMethods(makeCache(createCacheBuilder(), loader));
<a class="jxr_linenumber" name="L73" href="#L73">73</a>    }
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  
<a class="jxr_linenumber" name="L75" href="#L75">75</a>    <em class="jxr_comment">// stats tests</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  
<a class="jxr_linenumber" name="L77" href="#L77">77</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testStats() {
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      CacheBuilder&lt;Object, Object&gt; builder = createCacheBuilder()
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          .concurrencyLevel(1)
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          .maximumSize(2);
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      LocalLoadingCache&lt;Object, Object&gt; cache = makeCache(builder, identityLoader());
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      assertEquals(EMPTY_STATS, cache.stats());
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      Object one = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      cache.getUnchecked(one);
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      <a href="../../../../com/google/common/cache/CacheStats.html">CacheStats</a> stats = cache.stats();
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      assertEquals(1, stats.requestCount());
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      assertEquals(0, stats.hitCount());
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      assertEquals(0.0, stats.hitRate());
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      assertEquals(1, stats.missCount());
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      assertEquals(1.0, stats.missRate());
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      assertEquals(1, stats.loadCount());
<a class="jxr_linenumber" name="L93" href="#L93">93</a>      <strong class="jxr_keyword">long</strong> totalLoadTime = stats.totalLoadTime();
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      assertTrue(totalLoadTime &gt;= 0);
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      assertTrue(stats.averageLoadPenalty() &gt;= 0.0);
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      assertEquals(0, stats.evictionCount());
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      cache.getUnchecked(one);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      stats = cache.stats();
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     assertEquals(2, stats.requestCount());
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     assertEquals(1, stats.hitCount());
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     assertEquals(1.0/2, stats.hitRate());
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     assertEquals(1, stats.missCount());
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     assertEquals(1.0/2, stats.missRate());
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     assertEquals(1, stats.loadCount());
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     assertEquals(0, stats.evictionCount());
<a class="jxr_linenumber" name="L107" href="#L107">107</a> 
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     Object two = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     cache.getUnchecked(two);
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     stats = cache.stats();
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     assertEquals(3, stats.requestCount());
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     assertEquals(1, stats.hitCount());
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     assertEquals(1.0/3, stats.hitRate());
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     assertEquals(2, stats.missCount());
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     assertEquals(2.0/3, stats.missRate());
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     assertEquals(2, stats.loadCount());
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     assertTrue(stats.totalLoadTime() &gt;= totalLoadTime);
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     totalLoadTime = stats.totalLoadTime();
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     assertTrue(stats.averageLoadPenalty() &gt;= 0.0);
<a class="jxr_linenumber" name="L120" href="#L120">120</a>     assertEquals(0, stats.evictionCount());
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>     Object three = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L123" href="#L123">123</a>     cache.getUnchecked(three);
<a class="jxr_linenumber" name="L124" href="#L124">124</a>     stats = cache.stats();
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     assertEquals(4, stats.requestCount());
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     assertEquals(1, stats.hitCount());
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     assertEquals(1.0/4, stats.hitRate());
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     assertEquals(3, stats.missCount());
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     assertEquals(3.0/4, stats.missRate());
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     assertEquals(3, stats.loadCount());
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     assertTrue(stats.totalLoadTime() &gt;= totalLoadTime);
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     totalLoadTime = stats.totalLoadTime();
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     assertTrue(stats.averageLoadPenalty() &gt;= 0.0);
<a class="jxr_linenumber" name="L134" href="#L134">134</a>     assertEquals(1, stats.evictionCount());
<a class="jxr_linenumber" name="L135" href="#L135">135</a>   }
<a class="jxr_linenumber" name="L136" href="#L136">136</a> 
<a class="jxr_linenumber" name="L137" href="#L137">137</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testStatsNoops() {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     CacheBuilder&lt;Object, Object&gt; builder = createCacheBuilder()
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         .concurrencyLevel(1);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     LocalLoadingCache&lt;Object, Object&gt; cache = makeCache(builder, identityLoader());
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     ConcurrentMap&lt;Object, Object&gt; map = cache.localCache; <em class="jxr_comment">// modifiable map view</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     assertEquals(EMPTY_STATS, cache.stats());
<a class="jxr_linenumber" name="L143" href="#L143">143</a> 
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     Object one = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     assertNull(map.put(one, one));
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     assertSame(one, map.get(one));
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     assertTrue(map.containsKey(one));
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     assertTrue(map.containsValue(one));
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     Object two = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     assertSame(one, map.replace(one, two));
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     assertTrue(map.containsKey(one));
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     assertFalse(map.containsValue(one));
<a class="jxr_linenumber" name="L153" href="#L153">153</a>     Object three = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     assertTrue(map.replace(one, two, three));
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     assertTrue(map.remove(one, three));
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     assertFalse(map.containsKey(one));
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     assertFalse(map.containsValue(one));
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     assertNull(map.putIfAbsent(two, three));
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     assertSame(three, map.remove(two));
<a class="jxr_linenumber" name="L160" href="#L160">160</a>     assertNull(map.put(three, one));
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     assertNull(map.put(one, two));
<a class="jxr_linenumber" name="L162" href="#L162">162</a> 
<a class="jxr_linenumber" name="L163" href="#L163">163</a>     assertThat(map).hasKey(three).withValue(one);
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     assertThat(map).hasKey(one).withValue(two);
<a class="jxr_linenumber" name="L165" href="#L165">165</a> 
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     <em class="jxr_comment">//TODO(user): Confirm with fry@ that this is a reasonable substitute.</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     <em class="jxr_comment">//Set&lt;Map.Entry&lt;Object, Object&gt;&gt; entries = map.entrySet();</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     <em class="jxr_comment">//assertThat(entries).has().exactly(</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     <em class="jxr_comment">//    Maps.immutableEntry(three, one), Maps.immutableEntry(one, two));</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a>     <em class="jxr_comment">//Set&lt;Object&gt; keys = map.keySet();</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     <em class="jxr_comment">//assertThat(keys).has().exactly(one, three);</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     <em class="jxr_comment">//Collection&lt;Object&gt; values = map.values();</em>
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     <em class="jxr_comment">//assertThat(values).has().exactly(one, two);</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> 
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     map.clear();
<a class="jxr_linenumber" name="L176" href="#L176">176</a> 
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     assertEquals(EMPTY_STATS, cache.stats());
<a class="jxr_linenumber" name="L178" href="#L178">178</a>   }
<a class="jxr_linenumber" name="L179" href="#L179">179</a> 
<a class="jxr_linenumber" name="L180" href="#L180">180</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNoStats() {
<a class="jxr_linenumber" name="L181" href="#L181">181</a>     CacheBuilder&lt;Object, Object&gt; builder = CacheBuilder.newBuilder()
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         .concurrencyLevel(1)
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         .maximumSize(2);
<a class="jxr_linenumber" name="L184" href="#L184">184</a>     LocalLoadingCache&lt;Object, Object&gt; cache = makeCache(builder, identityLoader());
<a class="jxr_linenumber" name="L185" href="#L185">185</a>     assertEquals(EMPTY_STATS, cache.stats());
<a class="jxr_linenumber" name="L186" href="#L186">186</a> 
<a class="jxr_linenumber" name="L187" href="#L187">187</a>     Object one = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     cache.getUnchecked(one);
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     assertEquals(EMPTY_STATS, cache.stats());
<a class="jxr_linenumber" name="L190" href="#L190">190</a> 
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     cache.getUnchecked(one);
<a class="jxr_linenumber" name="L192" href="#L192">192</a>     assertEquals(EMPTY_STATS, cache.stats());
<a class="jxr_linenumber" name="L193" href="#L193">193</a> 
<a class="jxr_linenumber" name="L194" href="#L194">194</a>     Object two = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     cache.getUnchecked(two);
<a class="jxr_linenumber" name="L196" href="#L196">196</a>     assertEquals(EMPTY_STATS, cache.stats());
<a class="jxr_linenumber" name="L197" href="#L197">197</a> 
<a class="jxr_linenumber" name="L198" href="#L198">198</a>     Object three = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L199" href="#L199">199</a>     cache.getUnchecked(three);
<a class="jxr_linenumber" name="L200" href="#L200">200</a>     assertEquals(EMPTY_STATS, cache.stats());
<a class="jxr_linenumber" name="L201" href="#L201">201</a>   }
<a class="jxr_linenumber" name="L202" href="#L202">202</a> 
<a class="jxr_linenumber" name="L203" href="#L203">203</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRecordStats() {
<a class="jxr_linenumber" name="L204" href="#L204">204</a>     CacheBuilder&lt;Object, Object&gt; builder = createCacheBuilder()
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         .recordStats()
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         .concurrencyLevel(1)
<a class="jxr_linenumber" name="L207" href="#L207">207</a>         .maximumSize(2);
<a class="jxr_linenumber" name="L208" href="#L208">208</a>     LocalLoadingCache&lt;Object, Object&gt; cache = makeCache(builder, identityLoader());
<a class="jxr_linenumber" name="L209" href="#L209">209</a>     assertEquals(0, cache.stats().hitCount());
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     assertEquals(0, cache.stats().missCount());
<a class="jxr_linenumber" name="L211" href="#L211">211</a> 
<a class="jxr_linenumber" name="L212" href="#L212">212</a>     Object one = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L213" href="#L213">213</a>     cache.getUnchecked(one);
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     assertEquals(0, cache.stats().hitCount());
<a class="jxr_linenumber" name="L215" href="#L215">215</a>     assertEquals(1, cache.stats().missCount());
<a class="jxr_linenumber" name="L216" href="#L216">216</a> 
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     cache.getUnchecked(one);
<a class="jxr_linenumber" name="L218" href="#L218">218</a>     assertEquals(1, cache.stats().hitCount());
<a class="jxr_linenumber" name="L219" href="#L219">219</a>     assertEquals(1, cache.stats().missCount());
<a class="jxr_linenumber" name="L220" href="#L220">220</a> 
<a class="jxr_linenumber" name="L221" href="#L221">221</a>     Object two = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L222" href="#L222">222</a>     cache.getUnchecked(two);
<a class="jxr_linenumber" name="L223" href="#L223">223</a>     assertEquals(1, cache.stats().hitCount());
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     assertEquals(2, cache.stats().missCount());
<a class="jxr_linenumber" name="L225" href="#L225">225</a> 
<a class="jxr_linenumber" name="L226" href="#L226">226</a>     Object three = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L227" href="#L227">227</a>     cache.getUnchecked(three);
<a class="jxr_linenumber" name="L228" href="#L228">228</a>     assertEquals(1, cache.stats().hitCount());
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     assertEquals(3, cache.stats().missCount());
<a class="jxr_linenumber" name="L230" href="#L230">230</a>   }
<a class="jxr_linenumber" name="L231" href="#L231">231</a> 
<a class="jxr_linenumber" name="L232" href="#L232">232</a>   <em class="jxr_comment">// asMap tests</em>
<a class="jxr_linenumber" name="L233" href="#L233">233</a> 
<a class="jxr_linenumber" name="L234" href="#L234">234</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsMap() {
<a class="jxr_linenumber" name="L235" href="#L235">235</a>     CacheBuilder&lt;Object, Object&gt; builder = createCacheBuilder();
<a class="jxr_linenumber" name="L236" href="#L236">236</a>     LocalLoadingCache&lt;Object, Object&gt; cache = makeCache(builder, identityLoader());
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     assertEquals(EMPTY_STATS, cache.stats());
<a class="jxr_linenumber" name="L238" href="#L238">238</a> 
<a class="jxr_linenumber" name="L239" href="#L239">239</a>     Object one = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L240" href="#L240">240</a>     Object two = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L241" href="#L241">241</a>     Object three = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L242" href="#L242">242</a> 
<a class="jxr_linenumber" name="L243" href="#L243">243</a>     ConcurrentMap&lt;Object, Object&gt; map = cache.asMap();
<a class="jxr_linenumber" name="L244" href="#L244">244</a>     assertNull(map.put(one, two));
<a class="jxr_linenumber" name="L245" href="#L245">245</a>     assertSame(two, map.get(one));
<a class="jxr_linenumber" name="L246" href="#L246">246</a>     map.putAll(ImmutableMap.of(two, three));
<a class="jxr_linenumber" name="L247" href="#L247">247</a>     assertSame(three, map.get(two));
<a class="jxr_linenumber" name="L248" href="#L248">248</a>     assertSame(two, map.putIfAbsent(one, three));
<a class="jxr_linenumber" name="L249" href="#L249">249</a>     assertSame(two, map.get(one));
<a class="jxr_linenumber" name="L250" href="#L250">250</a>     assertNull(map.putIfAbsent(three, one));
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     assertSame(one, map.get(three));
<a class="jxr_linenumber" name="L252" href="#L252">252</a>     assertSame(two, map.replace(one, three));
<a class="jxr_linenumber" name="L253" href="#L253">253</a>     assertSame(three, map.get(one));
<a class="jxr_linenumber" name="L254" href="#L254">254</a>     assertFalse(map.replace(one, two, three));
<a class="jxr_linenumber" name="L255" href="#L255">255</a>     assertSame(three, map.get(one));
<a class="jxr_linenumber" name="L256" href="#L256">256</a>     assertTrue(map.replace(one, three, two));
<a class="jxr_linenumber" name="L257" href="#L257">257</a>     assertSame(two, map.get(one));
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     assertEquals(3, map.size());
<a class="jxr_linenumber" name="L259" href="#L259">259</a> 
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     map.clear();
<a class="jxr_linenumber" name="L261" href="#L261">261</a>     assertTrue(map.isEmpty());
<a class="jxr_linenumber" name="L262" href="#L262">262</a>     assertEquals(0, map.size());
<a class="jxr_linenumber" name="L263" href="#L263">263</a> 
<a class="jxr_linenumber" name="L264" href="#L264">264</a>     cache.getUnchecked(one);
<a class="jxr_linenumber" name="L265" href="#L265">265</a>     assertEquals(1, map.size());
<a class="jxr_linenumber" name="L266" href="#L266">266</a>     assertSame(one, map.get(one));
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     assertTrue(map.containsKey(one));
<a class="jxr_linenumber" name="L268" href="#L268">268</a>     assertTrue(map.containsValue(one));
<a class="jxr_linenumber" name="L269" href="#L269">269</a>     assertSame(one, map.remove(one));
<a class="jxr_linenumber" name="L270" href="#L270">270</a>     assertEquals(0, map.size());
<a class="jxr_linenumber" name="L271" href="#L271">271</a> 
<a class="jxr_linenumber" name="L272" href="#L272">272</a>     cache.getUnchecked(one);
<a class="jxr_linenumber" name="L273" href="#L273">273</a>     assertEquals(1, map.size());
<a class="jxr_linenumber" name="L274" href="#L274">274</a>     assertFalse(map.remove(one, two));
<a class="jxr_linenumber" name="L275" href="#L275">275</a>     assertTrue(map.remove(one, one));
<a class="jxr_linenumber" name="L276" href="#L276">276</a>     assertEquals(0, map.size());
<a class="jxr_linenumber" name="L277" href="#L277">277</a> 
<a class="jxr_linenumber" name="L278" href="#L278">278</a>     cache.getUnchecked(one);
<a class="jxr_linenumber" name="L279" href="#L279">279</a>     Map&lt;Object, Object&gt; newMap = ImmutableMap.of(one, one);
<a class="jxr_linenumber" name="L280" href="#L280">280</a>     assertEquals(newMap, map);
<a class="jxr_linenumber" name="L281" href="#L281">281</a>     assertEquals(newMap.entrySet(), map.entrySet());
<a class="jxr_linenumber" name="L282" href="#L282">282</a>     assertEquals(newMap.keySet(), map.keySet());
<a class="jxr_linenumber" name="L283" href="#L283">283</a>     Set&lt;Object&gt; expectedValues = ImmutableSet.of(one);
<a class="jxr_linenumber" name="L284" href="#L284">284</a>     Set&lt;Object&gt; actualValues = ImmutableSet.copyOf(map.values());
<a class="jxr_linenumber" name="L285" href="#L285">285</a>     assertEquals(expectedValues, actualValues);
<a class="jxr_linenumber" name="L286" href="#L286">286</a>   }
<a class="jxr_linenumber" name="L287" href="#L287">287</a> 
<a class="jxr_linenumber" name="L288" href="#L288">288</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> <em class="jxr_javadoccomment">   * Lookups on the map view shouldn't impact the recency queue.</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L291" href="#L291">291</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsMapRecency() {
<a class="jxr_linenumber" name="L292" href="#L292">292</a>     CacheBuilder&lt;Object, Object&gt; builder = createCacheBuilder()
<a class="jxr_linenumber" name="L293" href="#L293">293</a>         .concurrencyLevel(1)
<a class="jxr_linenumber" name="L294" href="#L294">294</a>         .maximumSize(SMALL_MAX_SIZE);
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     LocalLoadingCache&lt;Object, Object&gt; cache = makeCache(builder, identityLoader());
<a class="jxr_linenumber" name="L296" href="#L296">296</a>     Segment&lt;Object, Object&gt; segment = cache.localCache.segments[0];
<a class="jxr_linenumber" name="L297" href="#L297">297</a>     ConcurrentMap&lt;Object, Object&gt; map = cache.asMap();
<a class="jxr_linenumber" name="L298" href="#L298">298</a> 
<a class="jxr_linenumber" name="L299" href="#L299">299</a>     Object one = <strong class="jxr_keyword">new</strong> Object();
<a class="jxr_linenumber" name="L300" href="#L300">300</a>     assertSame(one, cache.getUnchecked(one));
<a class="jxr_linenumber" name="L301" href="#L301">301</a>     assertTrue(segment.recencyQueue.isEmpty());
<a class="jxr_linenumber" name="L302" href="#L302">302</a>     assertSame(one, map.get(one));
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     assertSame(one, segment.recencyQueue.peek().getKey());
<a class="jxr_linenumber" name="L304" href="#L304">304</a>     assertSame(one, cache.getUnchecked(one));
<a class="jxr_linenumber" name="L305" href="#L305">305</a>     assertFalse(segment.recencyQueue.isEmpty());
<a class="jxr_linenumber" name="L306" href="#L306">306</a>   }
<a class="jxr_linenumber" name="L307" href="#L307">307</a> 
<a class="jxr_linenumber" name="L308" href="#L308">308</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRecursiveComputation() <strong class="jxr_keyword">throws</strong> InterruptedException {
<a class="jxr_linenumber" name="L309" href="#L309">309</a>     <strong class="jxr_keyword">final</strong> AtomicReference&lt;LoadingCache&lt;Integer, String&gt;&gt; cacheRef =
<a class="jxr_linenumber" name="L310" href="#L310">310</a>         <strong class="jxr_keyword">new</strong> AtomicReference&lt;LoadingCache&lt;Integer, String&gt;&gt;();
<a class="jxr_linenumber" name="L311" href="#L311">311</a>     CacheLoader&lt;Integer, String&gt; recursiveLoader = <strong class="jxr_keyword">new</strong> CacheLoader&lt;Integer, String&gt;() {
<a class="jxr_linenumber" name="L312" href="#L312">312</a>       @Override
<a class="jxr_linenumber" name="L313" href="#L313">313</a>       <strong class="jxr_keyword">public</strong> String load(Integer key) {
<a class="jxr_linenumber" name="L314" href="#L314">314</a>         <strong class="jxr_keyword">if</strong> (key &gt; 0) {
<a class="jxr_linenumber" name="L315" href="#L315">315</a>           <strong class="jxr_keyword">return</strong> key + <span class="jxr_string">", "</span> + cacheRef.get().getUnchecked(key - 1);
<a class="jxr_linenumber" name="L316" href="#L316">316</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L317" href="#L317">317</a>           <strong class="jxr_keyword">return</strong> <span class="jxr_string">"0"</span>;
<a class="jxr_linenumber" name="L318" href="#L318">318</a>         }
<a class="jxr_linenumber" name="L319" href="#L319">319</a>       }
<a class="jxr_linenumber" name="L320" href="#L320">320</a>     };
<a class="jxr_linenumber" name="L321" href="#L321">321</a> 
<a class="jxr_linenumber" name="L322" href="#L322">322</a>     LoadingCache&lt;Integer, String&gt; recursiveCache = <strong class="jxr_keyword">new</strong> CacheBuilder&lt;Integer, String&gt;()
<a class="jxr_linenumber" name="L323" href="#L323">323</a>         .weakKeys()
<a class="jxr_linenumber" name="L324" href="#L324">324</a>         .weakValues()
<a class="jxr_linenumber" name="L325" href="#L325">325</a>         .build(recursiveLoader);
<a class="jxr_linenumber" name="L326" href="#L326">326</a>     cacheRef.set(recursiveCache);
<a class="jxr_linenumber" name="L327" href="#L327">327</a>     assertEquals(<span class="jxr_string">"3, 2, 1, 0"</span>, recursiveCache.getUnchecked(3));
<a class="jxr_linenumber" name="L328" href="#L328">328</a> 
<a class="jxr_linenumber" name="L329" href="#L329">329</a>     recursiveLoader = <strong class="jxr_keyword">new</strong> CacheLoader&lt;Integer, String&gt;() {
<a class="jxr_linenumber" name="L330" href="#L330">330</a>       @Override
<a class="jxr_linenumber" name="L331" href="#L331">331</a>       <strong class="jxr_keyword">public</strong> String load(Integer key) {
<a class="jxr_linenumber" name="L332" href="#L332">332</a>         <strong class="jxr_keyword">return</strong> cacheRef.get().getUnchecked(key);
<a class="jxr_linenumber" name="L333" href="#L333">333</a>       }
<a class="jxr_linenumber" name="L334" href="#L334">334</a>     };
<a class="jxr_linenumber" name="L335" href="#L335">335</a> 
<a class="jxr_linenumber" name="L336" href="#L336">336</a>     recursiveCache = <strong class="jxr_keyword">new</strong> CacheBuilder&lt;Integer, String&gt;()
<a class="jxr_linenumber" name="L337" href="#L337">337</a>         .weakKeys()
<a class="jxr_linenumber" name="L338" href="#L338">338</a>         .weakValues()
<a class="jxr_linenumber" name="L339" href="#L339">339</a>         .build(recursiveLoader);
<a class="jxr_linenumber" name="L340" href="#L340">340</a>     cacheRef.set(recursiveCache);
<a class="jxr_linenumber" name="L341" href="#L341">341</a> 
<a class="jxr_linenumber" name="L342" href="#L342">342</a>     <em class="jxr_comment">// tells the test when the compution has completed</em>
<a class="jxr_linenumber" name="L343" href="#L343">343</a>     <strong class="jxr_keyword">final</strong> CountDownLatch doneSignal = <strong class="jxr_keyword">new</strong> CountDownLatch(1);
<a class="jxr_linenumber" name="L344" href="#L344">344</a> 
<a class="jxr_linenumber" name="L345" href="#L345">345</a>     Thread thread = <strong class="jxr_keyword">new</strong> Thread() {
<a class="jxr_linenumber" name="L346" href="#L346">346</a>       @Override
<a class="jxr_linenumber" name="L347" href="#L347">347</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> run() {
<a class="jxr_linenumber" name="L348" href="#L348">348</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L349" href="#L349">349</a>           cacheRef.get().getUnchecked(3);
<a class="jxr_linenumber" name="L350" href="#L350">350</a>         } <strong class="jxr_keyword">finally</strong> {
<a class="jxr_linenumber" name="L351" href="#L351">351</a>           doneSignal.countDown();
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         }
<a class="jxr_linenumber" name="L353" href="#L353">353</a>       }
<a class="jxr_linenumber" name="L354" href="#L354">354</a>     };
<a class="jxr_linenumber" name="L355" href="#L355">355</a>     thread.setUncaughtExceptionHandler(<strong class="jxr_keyword">new</strong> UncaughtExceptionHandler() {
<a class="jxr_linenumber" name="L356" href="#L356">356</a>       @Override
<a class="jxr_linenumber" name="L357" href="#L357">357</a>       <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> uncaughtException(Thread t, Throwable e) {}
<a class="jxr_linenumber" name="L358" href="#L358">358</a>     });
<a class="jxr_linenumber" name="L359" href="#L359">359</a>     thread.start();
<a class="jxr_linenumber" name="L360" href="#L360">360</a> 
<a class="jxr_linenumber" name="L361" href="#L361">361</a>     <strong class="jxr_keyword">boolean</strong> done = doneSignal.await(1, TimeUnit.SECONDS);
<a class="jxr_linenumber" name="L362" href="#L362">362</a>     <strong class="jxr_keyword">if</strong> (!done) {
<a class="jxr_linenumber" name="L363" href="#L363">363</a>       StringBuilder builder = <strong class="jxr_keyword">new</strong> StringBuilder();
<a class="jxr_linenumber" name="L364" href="#L364">364</a>       <strong class="jxr_keyword">for</strong> (StackTraceElement trace : thread.getStackTrace()) {
<a class="jxr_linenumber" name="L365" href="#L365">365</a>         builder.append(<span class="jxr_string">"\tat "</span>).append(trace).append('\n');
<a class="jxr_linenumber" name="L366" href="#L366">366</a>       }
<a class="jxr_linenumber" name="L367" href="#L367">367</a>       fail(builder.toString());
<a class="jxr_linenumber" name="L368" href="#L368">368</a>     }
<a class="jxr_linenumber" name="L369" href="#L369">369</a>   }
<a class="jxr_linenumber" name="L370" href="#L370">370</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
