<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>MathBenchmarking xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/math/MathBenchmarking.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2011 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.math;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.math.BigInteger;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.Random;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <em class="jxr_javadoccomment"> * Utilities for benchmarks.</em>
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <em class="jxr_javadoccomment"> * In many cases, we wish to vary the order of magnitude of the input as much as we</em>
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <em class="jxr_javadoccomment"> * want to vary the input itself, so most methods which generate values use</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment"> * an exponential distribution varying the order of magnitude of the generated values</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> * uniformly at random.</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * @author Louis Wasserman</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/math/MathBenchmarking.html">MathBenchmarking</a> {
<a class="jxr_linenumber" name="L33" href="#L33">33</a>    <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> ARRAY_SIZE = 0x10000;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>    <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> ARRAY_MASK = 0x0ffff;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>    <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> Random RANDOM_SOURCE = <strong class="jxr_keyword">new</strong> Random(314159265358979L);
<a class="jxr_linenumber" name="L36" href="#L36">36</a>    <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> MAX_EXPONENT = 100;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  
<a class="jxr_linenumber" name="L38" href="#L38">38</a>    <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_comment">   * Duplicated from LongMath.</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_comment">   * binomial(biggestBinomials[k], k) fits in a long, but not</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_comment">   * binomial(biggestBinomials[k] + 1, k).</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_comment">   */</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>    <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] biggestBinomials =
<a class="jxr_linenumber" name="L44" href="#L44">44</a>        {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 3810779, 121977, 16175, 4337, 1733,
<a class="jxr_linenumber" name="L45" href="#L45">45</a>            887, 534, 361, 265, 206, 169, 143, 125, 111, 101, 94, 88, 83, 79, 76, 74, 72, 70, 69, 68,
<a class="jxr_linenumber" name="L46" href="#L46">46</a>            67, 67, 66, 66, 66, 66};
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  
<a class="jxr_linenumber" name="L48" href="#L48">48</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment">   * Generates values in a distribution equivalent to randomNonNegativeBigInteger</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment">   * but omitting zero.</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>    <strong class="jxr_keyword">static</strong> BigInteger randomPositiveBigInteger(<strong class="jxr_keyword">int</strong> numBits) {
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      BigInteger result;
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <strong class="jxr_keyword">do</strong> {
<a class="jxr_linenumber" name="L55" href="#L55">55</a>        result = randomNonNegativeBigInteger(numBits);
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      } <strong class="jxr_keyword">while</strong> (result.signum() == 0);
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      <strong class="jxr_keyword">return</strong> result;
<a class="jxr_linenumber" name="L58" href="#L58">58</a>    }
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">   * Generates a number in [0, 2^numBits) with an exponential distribution.</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">   * The floor of the log2 of the result is chosen uniformly at random in</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">   * [0, numBits), and then the result is chosen in that range uniformly at random.</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">   * Zero is treated as having log2 == 0.</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>    <strong class="jxr_keyword">static</strong> BigInteger randomNonNegativeBigInteger(<strong class="jxr_keyword">int</strong> numBits) {
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      <strong class="jxr_keyword">int</strong> digits = RANDOM_SOURCE.nextInt(numBits);
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      <strong class="jxr_keyword">if</strong> (digits == 0) {
<a class="jxr_linenumber" name="L69" href="#L69">69</a>        <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BigInteger(1, RANDOM_SOURCE);
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L71" href="#L71">71</a>        <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BigInteger(digits, RANDOM_SOURCE)
<a class="jxr_linenumber" name="L72" href="#L72">72</a>            .setBit(digits);
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      }
<a class="jxr_linenumber" name="L74" href="#L74">74</a>    }
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  
<a class="jxr_linenumber" name="L76" href="#L76">76</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment">   * Equivalent to calling randomPositiveBigInteger(numBits) and then flipping</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment">   * the sign with 50% probability.</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>    <strong class="jxr_keyword">static</strong> BigInteger randomNonZeroBigInteger(<strong class="jxr_keyword">int</strong> numBits) {
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      BigInteger result = randomPositiveBigInteger(numBits);
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      <strong class="jxr_keyword">return</strong> RANDOM_SOURCE.nextBoolean() ? result : result.negate();
<a class="jxr_linenumber" name="L83" href="#L83">83</a>    }
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  
<a class="jxr_linenumber" name="L85" href="#L85">85</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment">   * Chooses a number in (-2^numBits, 2^numBits) at random, with density</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment">   * concentrated in numbers of lower magnitude.</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>    <strong class="jxr_keyword">static</strong> BigInteger randomBigInteger(<strong class="jxr_keyword">int</strong> numBits) {
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      <strong class="jxr_keyword">while</strong> (<strong class="jxr_keyword">true</strong>) {
<a class="jxr_linenumber" name="L91" href="#L91">91</a>        <strong class="jxr_keyword">if</strong> (RANDOM_SOURCE.nextBoolean()) {
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          <strong class="jxr_keyword">return</strong> randomNonNegativeBigInteger(numBits);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>        }
<a class="jxr_linenumber" name="L94" href="#L94">94</a>        BigInteger neg = randomNonNegativeBigInteger(numBits).negate();
<a class="jxr_linenumber" name="L95" href="#L95">95</a>        <strong class="jxr_keyword">if</strong> (neg.signum() != 0) {
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          <strong class="jxr_keyword">return</strong> neg;
<a class="jxr_linenumber" name="L97" href="#L97">97</a>        }
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      }
<a class="jxr_linenumber" name="L99" href="#L99">99</a>    }
<a class="jxr_linenumber" name="L100" href="#L100">100</a> 
<a class="jxr_linenumber" name="L101" href="#L101">101</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment">   * Generates a number in [0, 2^numBits) with an exponential distribution.</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a> <em class="jxr_javadoccomment">   * The floor of the log2 of the absolute value of the result is chosen uniformly</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <em class="jxr_javadoccomment">   * at random in [0, numBits), and then the result is chosen from those possibilities</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a> <em class="jxr_javadoccomment">   * uniformly at random.</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment">   * Zero is treated as having log2 == 0.</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> randomDouble(<strong class="jxr_keyword">int</strong> maxExponent) {
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     <strong class="jxr_keyword">double</strong> result = RANDOM_SOURCE.nextDouble();
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     result = Math.scalb(result, RANDOM_SOURCE.nextInt(maxExponent + 1));
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     <strong class="jxr_keyword">return</strong> RANDOM_SOURCE.nextBoolean() ? result : -result;
<a class="jxr_linenumber" name="L113" href="#L113">113</a>   }
<a class="jxr_linenumber" name="L114" href="#L114">114</a> 
<a class="jxr_linenumber" name="L115" href="#L115">115</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <em class="jxr_javadoccomment">   * Returns a random integer between zero and {@code MAX_EXPONENT}.</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">int</strong> randomExponent() {
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     <strong class="jxr_keyword">return</strong> RANDOM_SOURCE.nextInt(MAX_EXPONENT + 1);
<a class="jxr_linenumber" name="L120" href="#L120">120</a>   }
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> randomPositiveDouble() {
<a class="jxr_linenumber" name="L123" href="#L123">123</a>     <strong class="jxr_keyword">return</strong> Math.exp(randomDouble(6));
<a class="jxr_linenumber" name="L124" href="#L124">124</a>   }
<a class="jxr_linenumber" name="L125" href="#L125">125</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
