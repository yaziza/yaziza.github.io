<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>JdkFutureAdaptersTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../apidocs/com/google/common/util/concurrent/JdkFutureAdaptersTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2009 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.util.concurrent;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkState;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.util.concurrent.Futures.immediateFuture;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.util.concurrent.MoreExecutors.directExecutor;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> java.util.concurrent.Executors.newCachedThreadPool;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> java.util.concurrent.TimeUnit.SECONDS;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.ClassSanityTester;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> com.google.common.util.concurrent.FuturesTest.ExecutorSpy;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> com.google.common.util.concurrent.FuturesTest.SingleCallListener;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> junit.framework.AssertionFailedError;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.CountDownLatch;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.ExecutorService;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.Future;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.SynchronousQueue;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.ThreadPoolExecutor;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.TimeUnit;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * Unit tests for {@link JdkFutureAdapters}.</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * @author Sven Mawson</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * @author Kurt Alfred Kluever</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../com/google/common/util/concurrent/JdkFutureAdaptersTest.html">JdkFutureAdaptersTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L47" href="#L47">47</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> String DATA1 = <span class="jxr_string">"data"</span>;
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  
<a class="jxr_linenumber" name="L49" href="#L49">49</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testListenInPoolThreadReturnsSameFuture() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      ListenableFuture&lt;String&gt; listenableFuture = immediateFuture(DATA1);
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      assertSame(listenableFuture, listenInPoolThread(listenableFuture));
<a class="jxr_linenumber" name="L52" href="#L52">52</a>    }
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  
<a class="jxr_linenumber" name="L54" href="#L54">54</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testListenInPoolThreadIgnoresExecutorWhenDelegateIsDone()
<a class="jxr_linenumber" name="L55" href="#L55">55</a>        <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      NonListenableSettableFuture&lt;String&gt; abstractFuture =
<a class="jxr_linenumber" name="L57" href="#L57">57</a>          NonListenableSettableFuture.create();
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      abstractFuture.set(DATA1);
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      <a href="../../../../../com/google/common/util/concurrent/FuturesTest.html">ExecutorSpy</a> spy = <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/util/concurrent/FuturesTest.html">ExecutorSpy</a>(directExecutor());
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      ListenableFuture&lt;String&gt; listenableFuture =
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          listenInPoolThread(abstractFuture, spy);
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      <a href="../../../../../com/google/common/util/concurrent/FuturesTest.html">SingleCallListener</a> singleCallListener = <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/util/concurrent/FuturesTest.html">SingleCallListener</a>();
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      singleCallListener.expectCall();
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      assertFalse(spy.wasExecuted);
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      assertFalse(singleCallListener.wasCalled());
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      assertTrue(listenableFuture.isDone()); <em class="jxr_comment">// We call AbstractFuture#set above.</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <em class="jxr_comment">// #addListener() will run the listener immediately because the Future is</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <em class="jxr_comment">// already finished (we explicitly set the result of it above).</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      listenableFuture.addListener(singleCallListener, directExecutor());
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      assertEquals(DATA1, listenableFuture.get());
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      <em class="jxr_comment">// 'spy' should have been ignored since 'abstractFuture' was done before</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      <em class="jxr_comment">// a listener was added.</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      assertFalse(spy.wasExecuted);
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      assertTrue(singleCallListener.wasCalled());
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      assertTrue(listenableFuture.isDone());
<a class="jxr_linenumber" name="L80" href="#L80">80</a>    }
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  
<a class="jxr_linenumber" name="L82" href="#L82">82</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testListenInPoolThreadUsesGivenExecutor() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      ExecutorService executorService = newCachedThreadPool(
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/util/concurrent/ThreadFactoryBuilder.html">ThreadFactoryBuilder</a>().setDaemon(<strong class="jxr_keyword">true</strong>).build());
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      NonListenableSettableFuture&lt;String&gt; abstractFuture =
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          NonListenableSettableFuture.create();
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      <a href="../../../../../com/google/common/util/concurrent/FuturesTest.html">ExecutorSpy</a> spy = <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/util/concurrent/FuturesTest.html">ExecutorSpy</a>(executorService);
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      ListenableFuture&lt;String&gt; listenableFuture =
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          listenInPoolThread(abstractFuture, spy);
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      <a href="../../../../../com/google/common/util/concurrent/FuturesTest.html">SingleCallListener</a> singleCallListener = <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/util/concurrent/FuturesTest.html">SingleCallListener</a>();
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      singleCallListener.expectCall();
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      assertFalse(spy.wasExecuted);
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      assertFalse(singleCallListener.wasCalled());
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      assertFalse(listenableFuture.isDone());
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      listenableFuture.addListener(singleCallListener, executorService);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      abstractFuture.set(DATA1);
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     assertEquals(DATA1, listenableFuture.get());
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     singleCallListener.waitForCall();
<a class="jxr_linenumber" name="L102" href="#L102">102</a> 
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     assertTrue(spy.wasExecuted);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     assertTrue(singleCallListener.wasCalled());
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     assertTrue(listenableFuture.isDone());
<a class="jxr_linenumber" name="L106" href="#L106">106</a>   }
<a class="jxr_linenumber" name="L107" href="#L107">107</a> 
<a class="jxr_linenumber" name="L108" href="#L108">108</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testListenInPoolThreadCustomExecutorInterrupted()
<a class="jxr_linenumber" name="L109" href="#L109">109</a>       <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     <strong class="jxr_keyword">final</strong> CountDownLatch submitSuccessful = <strong class="jxr_keyword">new</strong> CountDownLatch(1);
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     ExecutorService executorService = <strong class="jxr_keyword">new</strong> ThreadPoolExecutor(
<a class="jxr_linenumber" name="L112" href="#L112">112</a>         0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS,
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <strong class="jxr_keyword">new</strong> SynchronousQueue&lt;Runnable&gt;(),
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/util/concurrent/ThreadFactoryBuilder.html">ThreadFactoryBuilder</a>().setDaemon(<strong class="jxr_keyword">true</strong>).build()) {
<a class="jxr_linenumber" name="L115" href="#L115">115</a>       @Override
<a class="jxr_linenumber" name="L116" href="#L116">116</a>       <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">void</strong> beforeExecute(Thread t, Runnable r) {
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         submitSuccessful.countDown();
<a class="jxr_linenumber" name="L118" href="#L118">118</a>       }
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     };
<a class="jxr_linenumber" name="L120" href="#L120">120</a>     NonListenableSettableFuture&lt;String&gt; abstractFuture =
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         NonListenableSettableFuture.create();
<a class="jxr_linenumber" name="L122" href="#L122">122</a>     ListenableFuture&lt;String&gt; listenableFuture =
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         listenInPoolThread(abstractFuture, executorService);
<a class="jxr_linenumber" name="L124" href="#L124">124</a> 
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     <a href="../../../../../com/google/common/util/concurrent/FuturesTest.html">SingleCallListener</a> singleCallListener = <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/util/concurrent/FuturesTest.html">SingleCallListener</a>();
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     singleCallListener.expectCall();
<a class="jxr_linenumber" name="L127" href="#L127">127</a> 
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     assertFalse(singleCallListener.wasCalled());
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     assertFalse(listenableFuture.isDone());
<a class="jxr_linenumber" name="L130" href="#L130">130</a> 
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     listenableFuture.addListener(singleCallListener, directExecutor());
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a> <em class="jxr_comment">     * Don't shut down until the listenInPoolThread task has been accepted to</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a> <em class="jxr_comment">     * run. We want to see what happens when it's interrupted, not when it's</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a> <em class="jxr_comment">     * rejected.</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a> <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     submitSuccessful.await();
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     executorService.shutdownNow();
<a class="jxr_linenumber" name="L139" href="#L139">139</a>     abstractFuture.set(DATA1);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     assertEquals(DATA1, listenableFuture.get());
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     singleCallListener.waitForCall();
<a class="jxr_linenumber" name="L142" href="#L142">142</a> 
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     assertTrue(singleCallListener.wasCalled());
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     assertTrue(listenableFuture.isDone());
<a class="jxr_linenumber" name="L145" href="#L145">145</a>   }
<a class="jxr_linenumber" name="L146" href="#L146">146</a> 
<a class="jxr_linenumber" name="L147" href="#L147">147</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L148" href="#L148">148</a> <em class="jxr_javadoccomment">   * A Future that doesn't implement ListenableFuture, useful for testing</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a> <em class="jxr_javadoccomment">   * listenInPoolThread.</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> NonListenableSettableFuture&lt;V&gt;
<a class="jxr_linenumber" name="L152" href="#L152">152</a>       <strong class="jxr_keyword">extends</strong> ForwardingFuture&lt;V&gt; {
<a class="jxr_linenumber" name="L153" href="#L153">153</a>     <strong class="jxr_keyword">static</strong> &lt;V&gt; NonListenableSettableFuture&lt;V&gt; create() {
<a class="jxr_linenumber" name="L154" href="#L154">154</a>       <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> NonListenableSettableFuture&lt;V&gt;();
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     }
<a class="jxr_linenumber" name="L156" href="#L156">156</a> 
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     <strong class="jxr_keyword">final</strong> SettableFuture&lt;V&gt; delegate = SettableFuture.create();
<a class="jxr_linenumber" name="L158" href="#L158">158</a> 
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     @Override <strong class="jxr_keyword">protected</strong> Future&lt;V&gt; delegate() {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>       <strong class="jxr_keyword">return</strong> delegate;
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     }
<a class="jxr_linenumber" name="L162" href="#L162">162</a> 
<a class="jxr_linenumber" name="L163" href="#L163">163</a>     <strong class="jxr_keyword">void</strong> set(V value) {
<a class="jxr_linenumber" name="L164" href="#L164">164</a>       delegate.set(value);
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     }
<a class="jxr_linenumber" name="L166" href="#L166">166</a>   }
<a class="jxr_linenumber" name="L167" href="#L167">167</a> 
<a class="jxr_linenumber" name="L168" href="#L168">168</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> RuntimeExceptionThrowingFuture&lt;V&gt;
<a class="jxr_linenumber" name="L169" href="#L169">169</a>       <strong class="jxr_keyword">implements</strong> Future&lt;V&gt; {
<a class="jxr_linenumber" name="L170" href="#L170">170</a>     <strong class="jxr_keyword">final</strong> CountDownLatch allowGetToComplete = <strong class="jxr_keyword">new</strong> CountDownLatch(1);
<a class="jxr_linenumber" name="L171" href="#L171">171</a> 
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     @Override
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> cancel(<strong class="jxr_keyword">boolean</strong> mayInterruptIfRunning) {
<a class="jxr_linenumber" name="L174" href="#L174">174</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionFailedError();
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     }
<a class="jxr_linenumber" name="L176" href="#L176">176</a> 
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     @Override
<a class="jxr_linenumber" name="L178" href="#L178">178</a>     <strong class="jxr_keyword">public</strong> V get() <strong class="jxr_keyword">throws</strong> InterruptedException {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>       <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L180" href="#L180">180</a> <em class="jxr_comment">       * Wait a little to give us time to call addListener before the future's</em>
<a class="jxr_linenumber" name="L181" href="#L181">181</a> <em class="jxr_comment">       * value is set in addition to the call we'll make after then.</em>
<a class="jxr_linenumber" name="L182" href="#L182">182</a> <em class="jxr_comment">       */</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a>       allowGetToComplete.await(1, SECONDS);
<a class="jxr_linenumber" name="L184" href="#L184">184</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> RuntimeException(<span class="jxr_string">"expected, should be caught"</span>);
<a class="jxr_linenumber" name="L185" href="#L185">185</a>     }
<a class="jxr_linenumber" name="L186" href="#L186">186</a> 
<a class="jxr_linenumber" name="L187" href="#L187">187</a>     @Override
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     <strong class="jxr_keyword">public</strong> V get(<strong class="jxr_keyword">long</strong> timeout, <a href="../../../../../java/util/concurrent/TimeUnit.html">TimeUnit</a> unit) {
<a class="jxr_linenumber" name="L189" href="#L189">189</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionFailedError();
<a class="jxr_linenumber" name="L190" href="#L190">190</a>     }
<a class="jxr_linenumber" name="L191" href="#L191">191</a> 
<a class="jxr_linenumber" name="L192" href="#L192">192</a>     @Override
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> isCancelled() {
<a class="jxr_linenumber" name="L194" href="#L194">194</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionFailedError();
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     }
<a class="jxr_linenumber" name="L196" href="#L196">196</a> 
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     @Override
<a class="jxr_linenumber" name="L198" href="#L198">198</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> isDone() {
<a class="jxr_linenumber" name="L199" href="#L199">199</a>       <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L200" href="#L200">200</a> <em class="jxr_comment">       * If isDone is true during the call to listenInPoolThread,</em>
<a class="jxr_linenumber" name="L201" href="#L201">201</a> <em class="jxr_comment">       * listenInPoolThread doesn't start a thread. Make sure it's false the</em>
<a class="jxr_linenumber" name="L202" href="#L202">202</a> <em class="jxr_comment">       * first time through (and forever after, since no one else cares about</em>
<a class="jxr_linenumber" name="L203" href="#L203">203</a> <em class="jxr_comment">       * it).</em>
<a class="jxr_linenumber" name="L204" href="#L204">204</a> <em class="jxr_comment">       */</em>
<a class="jxr_linenumber" name="L205" href="#L205">205</a>       <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L206" href="#L206">206</a>     }
<a class="jxr_linenumber" name="L207" href="#L207">207</a>   }
<a class="jxr_linenumber" name="L208" href="#L208">208</a> 
<a class="jxr_linenumber" name="L209" href="#L209">209</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../com/google/common/util/concurrent/JdkFutureAdaptersTest.html">RecordingRunnable</a> <strong class="jxr_keyword">implements</strong> Runnable {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     <strong class="jxr_keyword">final</strong> CountDownLatch wasRun = <strong class="jxr_keyword">new</strong> CountDownLatch(1);
<a class="jxr_linenumber" name="L211" href="#L211">211</a> 
<a class="jxr_linenumber" name="L212" href="#L212">212</a>     <em class="jxr_comment">// synchronized so that checkState works as expected.</em>
<a class="jxr_linenumber" name="L213" href="#L213">213</a>     @Override
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">synchronized</strong> <strong class="jxr_keyword">void</strong> run() {
<a class="jxr_linenumber" name="L215" href="#L215">215</a>       checkState(wasRun.getCount() &gt; 0);
<a class="jxr_linenumber" name="L216" href="#L216">216</a>       wasRun.countDown();
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     }
<a class="jxr_linenumber" name="L218" href="#L218">218</a>   }
<a class="jxr_linenumber" name="L219" href="#L219">219</a> 
<a class="jxr_linenumber" name="L220" href="#L220">220</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testListenInPoolThreadRunsListenerAfterRuntimeException()
<a class="jxr_linenumber" name="L221" href="#L221">221</a>       <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L222" href="#L222">222</a>     RuntimeExceptionThrowingFuture&lt;String&gt; input =
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         <strong class="jxr_keyword">new</strong> RuntimeExceptionThrowingFuture&lt;String&gt;();
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L225" href="#L225">225</a> <em class="jxr_comment">     * The compiler recognizes that "input instanceof ListenableFuture" is</em>
<a class="jxr_linenumber" name="L226" href="#L226">226</a> <em class="jxr_comment">     * impossible. We want the test, though, in case that changes in the future,</em>
<a class="jxr_linenumber" name="L227" href="#L227">227</a> <em class="jxr_comment">     * so we use isInstance instead.</em>
<a class="jxr_linenumber" name="L228" href="#L228">228</a> <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     assertFalse(<span class="jxr_string">"Can't test the main listenInPoolThread path "</span>
<a class="jxr_linenumber" name="L230" href="#L230">230</a>         + <span class="jxr_string">"if the input is already a ListenableFuture"</span>,
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         ListenableFuture.<strong class="jxr_keyword">class</strong>.isInstance(input));
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     ListenableFuture&lt;String&gt; listenable = listenInPoolThread(input);
<a class="jxr_linenumber" name="L233" href="#L233">233</a>     <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L234" href="#L234">234</a> <em class="jxr_comment">     * This will occur before the waiting get() in the</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a> <em class="jxr_comment">     * listenInPoolThread-spawned thread completes:</em>
<a class="jxr_linenumber" name="L236" href="#L236">236</a> <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     <a href="../../../../../com/google/common/util/concurrent/JdkFutureAdaptersTest.html">RecordingRunnable</a> earlyListener = <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/util/concurrent/JdkFutureAdaptersTest.html">RecordingRunnable</a>();
<a class="jxr_linenumber" name="L238" href="#L238">238</a>     listenable.addListener(earlyListener, directExecutor());
<a class="jxr_linenumber" name="L239" href="#L239">239</a> 
<a class="jxr_linenumber" name="L240" href="#L240">240</a>     input.allowGetToComplete.countDown();
<a class="jxr_linenumber" name="L241" href="#L241">241</a>     <em class="jxr_comment">// Now give the get() thread time to finish:</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a>     assertTrue(earlyListener.wasRun.await(1, SECONDS));
<a class="jxr_linenumber" name="L243" href="#L243">243</a> 
<a class="jxr_linenumber" name="L244" href="#L244">244</a>     <em class="jxr_comment">// Now test an additional addListener call, which will be run in-thread:</em>
<a class="jxr_linenumber" name="L245" href="#L245">245</a>     <a href="../../../../../com/google/common/util/concurrent/JdkFutureAdaptersTest.html">RecordingRunnable</a> lateListener = <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/util/concurrent/JdkFutureAdaptersTest.html">RecordingRunnable</a>();
<a class="jxr_linenumber" name="L246" href="#L246">246</a>     listenable.addListener(lateListener, directExecutor());
<a class="jxr_linenumber" name="L247" href="#L247">247</a>     assertTrue(lateListener.wasRun.await(1, SECONDS));
<a class="jxr_linenumber" name="L248" href="#L248">248</a>   }
<a class="jxr_linenumber" name="L249" href="#L249">249</a> 
<a class="jxr_linenumber" name="L250" href="#L250">250</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAdapters_nullChecks() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../../com/google/common/testing/ClassSanityTester.html">ClassSanityTester</a>()
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         .forAllPublicStaticMethods(JdkFutureAdapters.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         .thatReturn(Future.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         .testNulls();
<a class="jxr_linenumber" name="L255" href="#L255">255</a>   }
<a class="jxr_linenumber" name="L256" href="#L256">256</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
