<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>ForwardingTestCase xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/collect/ForwardingTestCase.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2007 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.collect;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Function;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Joiner;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Array;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.InvocationHandler;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.InvocationTargetException;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Method;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Proxy;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> java.util.Collections;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> java.util.Iterator;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> java.util.Set;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * Base test case for testing the variety of forwarding classes.</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * @author Robert Konigsberg</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * @author Louis Wasserman</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/collect/ForwardingTestCase.html">ForwardingTestCase</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  
<a class="jxr_linenumber" name="L45" href="#L45">45</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> List&lt;String&gt; calls = <strong class="jxr_keyword">new</strong> ArrayList&lt;String&gt;();
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> called(String id) {
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      calls.add(id);
<a class="jxr_linenumber" name="L49" href="#L49">49</a>    }
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  
<a class="jxr_linenumber" name="L51" href="#L51">51</a>    <strong class="jxr_keyword">protected</strong> String getCalls() {
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      <strong class="jxr_keyword">return</strong> calls.toString();
<a class="jxr_linenumber" name="L53" href="#L53">53</a>    }
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  
<a class="jxr_linenumber" name="L55" href="#L55">55</a>    <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">boolean</strong> isCalled() {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      <strong class="jxr_keyword">return</strong> !calls.isEmpty();
<a class="jxr_linenumber" name="L57" href="#L57">57</a>    }
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  
<a class="jxr_linenumber" name="L59" href="#L59">59</a>    @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L60" href="#L60">60</a>    <strong class="jxr_keyword">protected</strong> &lt;T&gt; T createProxyInstance(Class&lt;T&gt; c) {
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_comment">     * This invocation handler only registers that a method was called,</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_comment">     * and then returns a bogus, but acceptable, value.</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      InvocationHandler handler = <strong class="jxr_keyword">new</strong> InvocationHandler() {
<a class="jxr_linenumber" name="L66" href="#L66">66</a>        @Override
<a class="jxr_linenumber" name="L67" href="#L67">67</a>        <strong class="jxr_keyword">public</strong> Object invoke(Object proxy, Method method, Object[] args)
<a class="jxr_linenumber" name="L68" href="#L68">68</a>            <strong class="jxr_keyword">throws</strong> Throwable {
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          called(asString(method));
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          <strong class="jxr_keyword">return</strong> getDefaultValue(method.getReturnType());
<a class="jxr_linenumber" name="L72" href="#L72">72</a>        }
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      };
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      <strong class="jxr_keyword">return</strong> (T) Proxy.newProxyInstance(c.getClassLoader(),
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          <strong class="jxr_keyword">new</strong> Class[] { c }, handler);
<a class="jxr_linenumber" name="L77" href="#L77">77</a>    }
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  
<a class="jxr_linenumber" name="L79" href="#L79">79</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/base/Joiner.html">Joiner</a> COMMA_JOINER = Joiner.on(<span class="jxr_string">","</span>);
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>    <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_comment">   * Returns string representation of a method.</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_comment">   *</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_comment">   * If the method takes no parameters, it returns the name (e.g.</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_comment">   * "isEmpty". If the method takes parameters, it returns the simple names</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_comment">   * of the parameters (e.g. "put(Object,Object)".)</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_comment">   */</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    <strong class="jxr_keyword">private</strong> String asString(Method method) {
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      String methodName = method.getName();
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      <strong class="jxr_keyword">if</strong> (parameterTypes.length == 0) {
<a class="jxr_linenumber" name="L93" href="#L93">93</a>        <strong class="jxr_keyword">return</strong> methodName;
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      }
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      Iterable&lt;String&gt; parameterNames = Iterables.transform(
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          Arrays.asList(parameterTypes),
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          <strong class="jxr_keyword">new</strong> Function&lt;Class&lt;?&gt;, String&gt;() {
<a class="jxr_linenumber" name="L99" href="#L99">99</a>            @Override
<a class="jxr_linenumber" name="L100" href="#L100">100</a>           <strong class="jxr_keyword">public</strong> String apply(Class&lt;?&gt; from) {
<a class="jxr_linenumber" name="L101" href="#L101">101</a>             <strong class="jxr_keyword">return</strong> from.getSimpleName();
<a class="jxr_linenumber" name="L102" href="#L102">102</a>           }
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     });
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     <strong class="jxr_keyword">return</strong> methodName + <span class="jxr_string">"("</span> + COMMA_JOINER.join(parameterNames) + <span class="jxr_string">")"</span>;
<a class="jxr_linenumber" name="L105" href="#L105">105</a>   }
<a class="jxr_linenumber" name="L106" href="#L106">106</a>   
<a class="jxr_linenumber" name="L107" href="#L107">107</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> Object getDefaultValue(Class&lt;?&gt; returnType) {
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     <strong class="jxr_keyword">if</strong> (returnType == <strong class="jxr_keyword">boolean</strong>.<strong class="jxr_keyword">class</strong> || returnType == Boolean.<strong class="jxr_keyword">class</strong>) {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>       <strong class="jxr_keyword">return</strong> Boolean.FALSE;
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (returnType == <strong class="jxr_keyword">int</strong>.<strong class="jxr_keyword">class</strong> || returnType == Integer.<strong class="jxr_keyword">class</strong>) {
<a class="jxr_linenumber" name="L111" href="#L111">111</a>       <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> ((returnType == Set.<strong class="jxr_keyword">class</strong>) || (returnType == Collection.<strong class="jxr_keyword">class</strong>)) {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>       <strong class="jxr_keyword">return</strong> Collections.emptySet();
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (returnType == Iterator.<strong class="jxr_keyword">class</strong>) {
<a class="jxr_linenumber" name="L115" href="#L115">115</a>       <strong class="jxr_keyword">return</strong> Iterators.emptyModifiableIterator();
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (returnType.isArray()) {
<a class="jxr_linenumber" name="L117" href="#L117">117</a>       <strong class="jxr_keyword">return</strong> Array.newInstance(returnType.getComponentType(), 0);
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (<span class="jxr_string">"java.util.function.Predicate"</span>.equals(returnType.getCanonicalName())
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         || (<span class="jxr_string">"java.util.function.Consumer"</span>.equals(returnType.getCanonicalName()))) {
<a class="jxr_linenumber" name="L120" href="#L120">120</a>       <em class="jxr_comment">// Generally, methods that accept java.util.function.* instances</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a>       <em class="jxr_comment">// don't like to get null values.  We generate them dynamically</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a>       <em class="jxr_comment">// using Proxy so that we can have Java 7 compliant code.</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a>       InvocationHandler handler = <strong class="jxr_keyword">new</strong> InvocationHandler() {
<a class="jxr_linenumber" name="L124" href="#L124">124</a>           @Override <strong class="jxr_keyword">public</strong> Object invoke(Object proxy, Method method,
<a class="jxr_linenumber" name="L125" href="#L125">125</a>               Object[] args) {
<a class="jxr_linenumber" name="L126" href="#L126">126</a>             <em class="jxr_comment">// Crude, but acceptable until we can use Java 8.  Other</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a>             <em class="jxr_comment">// methods have default implementations, and it is hard to</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a>             <em class="jxr_comment">// distinguish.</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a>             <strong class="jxr_keyword">if</strong> (<span class="jxr_string">"test"</span>.equals(method.getName())
<a class="jxr_linenumber" name="L130" href="#L130">130</a>                 || <span class="jxr_string">"accept"</span>.equals(method.getName())) {
<a class="jxr_linenumber" name="L131" href="#L131">131</a>               <strong class="jxr_keyword">return</strong> getDefaultValue(method.getReturnType());
<a class="jxr_linenumber" name="L132" href="#L132">132</a>             }
<a class="jxr_linenumber" name="L133" href="#L133">133</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalStateException(
<a class="jxr_linenumber" name="L134" href="#L134">134</a>                 <span class="jxr_string">"Unexpected "</span> + method + <span class="jxr_string">" invoked on "</span> + proxy);
<a class="jxr_linenumber" name="L135" href="#L135">135</a>           }
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         };
<a class="jxr_linenumber" name="L137" href="#L137">137</a>       <strong class="jxr_keyword">return</strong> Proxy.newProxyInstance(returnType.getClassLoader(),
<a class="jxr_linenumber" name="L138" href="#L138">138</a>           <strong class="jxr_keyword">new</strong> Class[] { returnType },
<a class="jxr_linenumber" name="L139" href="#L139">139</a>           handler);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>       <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     }
<a class="jxr_linenumber" name="L143" href="#L143">143</a>   }
<a class="jxr_linenumber" name="L144" href="#L144">144</a>   
<a class="jxr_linenumber" name="L145" href="#L145">145</a>   <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; <strong class="jxr_keyword">void</strong> callAllPublicMethods(Class&lt;T&gt; theClass, T object)
<a class="jxr_linenumber" name="L146" href="#L146">146</a>       <strong class="jxr_keyword">throws</strong> InvocationTargetException {
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     <strong class="jxr_keyword">for</strong> (Method method : theClass.getMethods()) {
<a class="jxr_linenumber" name="L148" href="#L148">148</a>       Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();
<a class="jxr_linenumber" name="L149" href="#L149">149</a>       Object[] parameters = <strong class="jxr_keyword">new</strong> Object[parameterTypes.length];
<a class="jxr_linenumber" name="L150" href="#L150">150</a>       <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; parameterTypes.length; i++) {
<a class="jxr_linenumber" name="L151" href="#L151">151</a>         parameters[i] = getDefaultValue(parameterTypes[i]);
<a class="jxr_linenumber" name="L152" href="#L152">152</a>       }
<a class="jxr_linenumber" name="L153" href="#L153">153</a>       <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L155" href="#L155">155</a>           method.invoke(object, parameters);
<a class="jxr_linenumber" name="L156" href="#L156">156</a>         } <strong class="jxr_keyword">catch</strong> (InvocationTargetException ex) {
<a class="jxr_linenumber" name="L157" href="#L157">157</a>           <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L158" href="#L158">158</a>             <strong class="jxr_keyword">throw</strong> ex.getCause();
<a class="jxr_linenumber" name="L159" href="#L159">159</a>           } <strong class="jxr_keyword">catch</strong> (UnsupportedOperationException unsupported) {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>             <em class="jxr_comment">// this is a legit exception</em>
<a class="jxr_linenumber" name="L161" href="#L161">161</a>           }
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         }
<a class="jxr_linenumber" name="L163" href="#L163">163</a>       } <strong class="jxr_keyword">catch</strong> (Throwable cause) {
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> InvocationTargetException(cause,
<a class="jxr_linenumber" name="L165" href="#L165">165</a>             method + <span class="jxr_string">" with args: "</span> + Arrays.toString(parameters));
<a class="jxr_linenumber" name="L166" href="#L166">166</a>       }
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     }
<a class="jxr_linenumber" name="L168" href="#L168">168</a>   }
<a class="jxr_linenumber" name="L169" href="#L169">169</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
