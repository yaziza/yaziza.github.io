<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>ChecksumHashFunctionTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/hash/ChecksumHashFunctionTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2012 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * in compliance with the License. You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software distributed under the License</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * or implied. See the License for the specific language governing permissions and limitations under</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * the License.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <strong class="jxr_keyword">package</strong> com.google.common.hash;
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.hash.Hashing.ChecksumType.ADLER_32;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.hash.Hashing.ChecksumType.CRC_32;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Supplier;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> java.util.zip.Checksum;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment"> * Tests for ChecksumHashFunction.</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * @author Colin Decker</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/hash/ChecksumHashFunctionTest.html">ChecksumHashFunctionTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  
<a class="jxr_linenumber" name="L33" href="#L33">33</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCrc32_equalsChecksumValue() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L34" href="#L34">34</a>      assertChecksum(CRC_32, <span class="jxr_string">""</span>);
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      assertChecksum(CRC_32, <span class="jxr_string">"Z"</span>);
<a class="jxr_linenumber" name="L36" href="#L36">36</a>      assertChecksum(CRC_32, <span class="jxr_string">"foobar"</span>);
<a class="jxr_linenumber" name="L37" href="#L37">37</a>    }
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  
<a class="jxr_linenumber" name="L39" href="#L39">39</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAdler32_equalsChecksumValue() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L40" href="#L40">40</a>      assertChecksum(ADLER_32, <span class="jxr_string">""</span>);
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      assertChecksum(ADLER_32, <span class="jxr_string">"Z"</span>);
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      assertChecksum(ADLER_32, <span class="jxr_string">"foobar"</span>);
<a class="jxr_linenumber" name="L43" href="#L43">43</a>    }
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  
<a class="jxr_linenumber" name="L45" href="#L45">45</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCrc32_knownValues() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      assertHash32(0x1C8600E3, CRC_32, <span class="jxr_string">"hell"</span>);
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      assertHash32(0x3610A686, CRC_32, <span class="jxr_string">"hello"</span>);
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      assertHash32(0xED81F9F6, CRC_32, <span class="jxr_string">"hello "</span>);
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      assertHash32(0x4850DDC2, CRC_32, <span class="jxr_string">"hello w"</span>);
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      assertHash32(0x7A2D6005, CRC_32, <span class="jxr_string">"hello wo"</span>);
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      assertHash32(0x1C192672, CRC_32, <span class="jxr_string">"hello wor"</span>);
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      assertHash32(0x414FA339, CRC_32, <span class="jxr_string">"The quick brown fox jumps over the lazy dog"</span>);
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      assertHash32(0x4400B5BC, CRC_32, <span class="jxr_string">"The quick brown fox jumps over the lazy cog"</span>);
<a class="jxr_linenumber" name="L54" href="#L54">54</a>    }
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  
<a class="jxr_linenumber" name="L56" href="#L56">56</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAdler32_knownValues() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      assertHash32(0x041701A6, ADLER_32, <span class="jxr_string">"hell"</span>);
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      assertHash32(0x062C0215, ADLER_32, <span class="jxr_string">"hello"</span>);
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      assertHash32(0x08610235, ADLER_32, <span class="jxr_string">"hello "</span>);
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      assertHash32(0x0B0D02AC, ADLER_32, <span class="jxr_string">"hello w"</span>);
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      assertHash32(0x0E28031B, ADLER_32, <span class="jxr_string">"hello wo"</span>);
<a class="jxr_linenumber" name="L62" href="#L62">62</a>      assertHash32(0x11B5038D, ADLER_32, <span class="jxr_string">"hello wor"</span>);
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      assertHash32(0x5BDC0FDA, ADLER_32, <span class="jxr_string">"The quick brown fox jumps over the lazy dog"</span>);
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      assertHash32(0x5BD90FD9, ADLER_32, <span class="jxr_string">"The quick brown fox jumps over the lazy cog"</span>);
<a class="jxr_linenumber" name="L65" href="#L65">65</a>    }
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  
<a class="jxr_linenumber" name="L67" href="#L67">67</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> assertChecksum(Supplier&lt;Checksum&gt; supplier, String input) {
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      byte[] bytes = HashTestUtils.ascii(input);
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      Checksum checksum = supplier.get();
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      checksum.update(bytes, 0, bytes.length);
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      <strong class="jxr_keyword">long</strong> value = checksum.getValue();
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      String toString = <span class="jxr_string">"name"</span>;
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> func = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/ChecksumHashFunction.html">ChecksumHashFunction</a>(supplier, 32, toString);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      assertEquals(toString, func.toString());
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      assertEquals(value, func.hashBytes(bytes).padToLong());
<a class="jxr_linenumber" name="L78" href="#L78">78</a>    }
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  
<a class="jxr_linenumber" name="L80" href="#L80">80</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> assertHash32(<strong class="jxr_keyword">int</strong> expected, Supplier&lt;Checksum&gt; supplier, String input) {
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      byte[] bytes = HashTestUtils.ascii(input);
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      String toString = <span class="jxr_string">"name"</span>;
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> func = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/ChecksumHashFunction.html">ChecksumHashFunction</a>(supplier, 32, toString);
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      assertEquals(expected, func.hashBytes(bytes).asInt());
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      assertEquals(toString, func.toString());
<a class="jxr_linenumber" name="L86" href="#L86">86</a>    }
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
