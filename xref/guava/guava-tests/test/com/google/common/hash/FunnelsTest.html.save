<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>FunnelsTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/hash/FunnelsTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2011 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.hash;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> org.mockito.Mockito.inOrder;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> org.mockito.Mockito.mock;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> org.mockito.Mockito.verify;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Charsets;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> com.google.common.hash.AbstractStreamingHashFunction.AbstractStreamingHasher;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.EqualsTester;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.SerializableTester;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.mockito.InOrder;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> java.io.OutputStream;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> java.nio.ByteBuffer;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> java.nio.charset.Charset;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * Tests for HashExtractors.</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * @author Dimitris Andreou</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/hash/FunnelsTest.html">FunnelsTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L43" href="#L43">43</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForBytes() {
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <a href="../../../../com/google/common/hash/PrimitiveSink.html">PrimitiveSink</a> primitiveSink = mock(PrimitiveSink.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      Funnels.byteArrayFunnel().funnel(<strong class="jxr_keyword">new</strong> byte[] { 4, 3, 2, 1 }, primitiveSink);
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      verify(primitiveSink).putBytes(<strong class="jxr_keyword">new</strong> byte[] { 4, 3, 2, 1 });
<a class="jxr_linenumber" name="L47" href="#L47">47</a>    }
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  
<a class="jxr_linenumber" name="L49" href="#L49">49</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForBytes_<strong class="jxr_keyword">null</strong>() {
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      assertNullsThrowException(Funnels.byteArrayFunnel());
<a class="jxr_linenumber" name="L51" href="#L51">51</a>    }
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  
<a class="jxr_linenumber" name="L53" href="#L53">53</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForStrings() {
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <a href="../../../../com/google/common/hash/PrimitiveSink.html">PrimitiveSink</a> primitiveSink = mock(PrimitiveSink.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      Funnels.unencodedCharsFunnel().funnel(<span class="jxr_string">"test"</span>, primitiveSink);
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      verify(primitiveSink).putUnencodedChars(<span class="jxr_string">"test"</span>);
<a class="jxr_linenumber" name="L57" href="#L57">57</a>    }
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  
<a class="jxr_linenumber" name="L59" href="#L59">59</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForStrings_<strong class="jxr_keyword">null</strong>() {
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      assertNullsThrowException(Funnels.unencodedCharsFunnel());
<a class="jxr_linenumber" name="L61" href="#L61">61</a>    }
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  
<a class="jxr_linenumber" name="L63" href="#L63">63</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForStringsCharset() {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      <strong class="jxr_keyword">for</strong> (Charset charset : Charset.availableCharsets().values()) {
<a class="jxr_linenumber" name="L65" href="#L65">65</a>        <a href="../../../../com/google/common/hash/PrimitiveSink.html">PrimitiveSink</a> primitiveSink = mock(PrimitiveSink.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L66" href="#L66">66</a>        Funnels.stringFunnel(charset).funnel(<span class="jxr_string">"test"</span>, primitiveSink);
<a class="jxr_linenumber" name="L67" href="#L67">67</a>        verify(primitiveSink).putString(<span class="jxr_string">"test"</span>, charset);
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      }
<a class="jxr_linenumber" name="L69" href="#L69">69</a>    }
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  
<a class="jxr_linenumber" name="L71" href="#L71">71</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForStringsCharset_<strong class="jxr_keyword">null</strong>() {
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      <strong class="jxr_keyword">for</strong> (Charset charset : Charset.availableCharsets().values()) {
<a class="jxr_linenumber" name="L73" href="#L73">73</a>        assertNullsThrowException(Funnels.stringFunnel(charset));
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      }
<a class="jxr_linenumber" name="L75" href="#L75">75</a>    }
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  
<a class="jxr_linenumber" name="L77" href="#L77">77</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForInts() {
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      Integer value = 1234;
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      <a href="../../../../com/google/common/hash/PrimitiveSink.html">PrimitiveSink</a> primitiveSink = mock(PrimitiveSink.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      Funnels.integerFunnel().funnel(value, primitiveSink);
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      verify(primitiveSink).putInt(1234);
<a class="jxr_linenumber" name="L82" href="#L82">82</a>    }
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  
<a class="jxr_linenumber" name="L84" href="#L84">84</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForInts_<strong class="jxr_keyword">null</strong>() {
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      assertNullsThrowException(Funnels.integerFunnel());
<a class="jxr_linenumber" name="L86" href="#L86">86</a>    }
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForLongs() {
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      Long value = 1234L;
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      <a href="../../../../com/google/common/hash/PrimitiveSink.html">PrimitiveSink</a> primitiveSink = mock(PrimitiveSink.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      Funnels.longFunnel().funnel(value, primitiveSink);
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      verify(primitiveSink).putLong(1234);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>    }
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  
<a class="jxr_linenumber" name="L95" href="#L95">95</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testForLongs_<strong class="jxr_keyword">null</strong>() {
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      assertNullsThrowException(Funnels.longFunnel());
<a class="jxr_linenumber" name="L97" href="#L97">97</a>    }
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  
<a class="jxr_linenumber" name="L99" href="#L99">99</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSequential() {
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     Funnel&lt;Object&gt; elementFunnel = mock(Funnel.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     <a href="../../../../com/google/common/hash/PrimitiveSink.html">PrimitiveSink</a> primitiveSink = mock(PrimitiveSink.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     Funnel&lt;Iterable&lt;? <strong class="jxr_keyword">extends</strong> Object&gt;&gt; sequential = Funnels.sequentialFunnel(elementFunnel);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     sequential.funnel(Arrays.asList(<span class="jxr_string">"foo"</span>, <span class="jxr_string">"bar"</span>, <span class="jxr_string">"baz"</span>, <span class="jxr_string">"quux"</span>), primitiveSink);
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     InOrder inOrder = inOrder(elementFunnel);
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     inOrder.verify(elementFunnel).funnel(<span class="jxr_string">"foo"</span>, primitiveSink);
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     inOrder.verify(elementFunnel).funnel(<span class="jxr_string">"bar"</span>, primitiveSink);
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     inOrder.verify(elementFunnel).funnel(<span class="jxr_string">"baz"</span>, primitiveSink);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     inOrder.verify(elementFunnel).funnel(<span class="jxr_string">"quux"</span>, primitiveSink);
<a class="jxr_linenumber" name="L110" href="#L110">110</a>   }
<a class="jxr_linenumber" name="L111" href="#L111">111</a> 
<a class="jxr_linenumber" name="L112" href="#L112">112</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> assertNullsThrowException(Funnel&lt;?&gt; funnel) {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     <a href="../../../../com/google/common/hash/PrimitiveSink.html">PrimitiveSink</a> primitiveSink = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/AbstractStreamingHashFunction.html">AbstractStreamingHasher</a>(4, 4) {
<a class="jxr_linenumber" name="L114" href="#L114">114</a>       @Override <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> makeHash() { <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> UnsupportedOperationException(); }
<a class="jxr_linenumber" name="L115" href="#L115">115</a> 
<a class="jxr_linenumber" name="L116" href="#L116">116</a>       @Override <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">void</strong> process(ByteBuffer bb) {
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         <strong class="jxr_keyword">while</strong> (bb.hasRemaining()) {
<a class="jxr_linenumber" name="L118" href="#L118">118</a>           bb.get();
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         }
<a class="jxr_linenumber" name="L120" href="#L120">120</a>       }
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     };
<a class="jxr_linenumber" name="L122" href="#L122">122</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L123" href="#L123">123</a>       funnel.funnel(<strong class="jxr_keyword">null</strong>, primitiveSink);
<a class="jxr_linenumber" name="L124" href="#L124">124</a>       fail();
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException ok) {}
<a class="jxr_linenumber" name="L126" href="#L126">126</a>   }
<a class="jxr_linenumber" name="L127" href="#L127">127</a> 
<a class="jxr_linenumber" name="L128" href="#L128">128</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAsOutputStream() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     <a href="../../../../com/google/common/hash/PrimitiveSink.html">PrimitiveSink</a> sink = mock(PrimitiveSink.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     OutputStream out = Funnels.asOutputStream(sink);
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     byte[] bytes = { 1, 2, 3, 4 };
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     out.write(255);
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     out.write(bytes);
<a class="jxr_linenumber" name="L134" href="#L134">134</a>     out.write(bytes, 1, 2);
<a class="jxr_linenumber" name="L135" href="#L135">135</a>     verify(sink).putByte((byte) 255);
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     verify(sink).putBytes(bytes);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     verify(sink).putBytes(bytes, 1, 2);
<a class="jxr_linenumber" name="L138" href="#L138">138</a>   }
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSerialization() {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     assertSame(
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         Funnels.byteArrayFunnel(),
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         SerializableTester.reserialize(Funnels.byteArrayFunnel()));
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     assertSame(
<a class="jxr_linenumber" name="L145" href="#L145">145</a>         Funnels.integerFunnel(),
<a class="jxr_linenumber" name="L146" href="#L146">146</a>         SerializableTester.reserialize(Funnels.integerFunnel()));
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     assertSame(
<a class="jxr_linenumber" name="L148" href="#L148">148</a>         Funnels.longFunnel(),
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         SerializableTester.reserialize(Funnels.longFunnel()));
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     assertSame(
<a class="jxr_linenumber" name="L151" href="#L151">151</a>         Funnels.unencodedCharsFunnel(),
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         SerializableTester.reserialize(Funnels.unencodedCharsFunnel()));
<a class="jxr_linenumber" name="L153" href="#L153">153</a>     assertEquals(
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         Funnels.sequentialFunnel(Funnels.integerFunnel()),
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         SerializableTester.reserialize(Funnels.sequentialFunnel(Funnels.integerFunnel())));
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     assertEquals(
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         Funnels.stringFunnel(Charsets.US_ASCII),
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         SerializableTester.reserialize(Funnels.stringFunnel(Charsets.US_ASCII)));
<a class="jxr_linenumber" name="L159" href="#L159">159</a>   }
<a class="jxr_linenumber" name="L160" href="#L160">160</a> 
<a class="jxr_linenumber" name="L161" href="#L161">161</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEquals() {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>      <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L163" href="#L163">163</a>        .addEqualityGroup(Funnels.byteArrayFunnel())
<a class="jxr_linenumber" name="L164" href="#L164">164</a>        .addEqualityGroup(Funnels.integerFunnel())
<a class="jxr_linenumber" name="L165" href="#L165">165</a>        .addEqualityGroup(Funnels.longFunnel())
<a class="jxr_linenumber" name="L166" href="#L166">166</a>        .addEqualityGroup(Funnels.unencodedCharsFunnel())
<a class="jxr_linenumber" name="L167" href="#L167">167</a>        .addEqualityGroup(Funnels.stringFunnel(Charsets.UTF_8))
<a class="jxr_linenumber" name="L168" href="#L168">168</a>        .addEqualityGroup(Funnels.stringFunnel(Charsets.US_ASCII))
<a class="jxr_linenumber" name="L169" href="#L169">169</a>        .addEqualityGroup(Funnels.sequentialFunnel(Funnels.integerFunnel()),
<a class="jxr_linenumber" name="L170" href="#L170">170</a>            SerializableTester.reserialize(Funnels.sequentialFunnel(
<a class="jxr_linenumber" name="L171" href="#L171">171</a>                Funnels.integerFunnel())))
<a class="jxr_linenumber" name="L172" href="#L172">172</a>        .addEqualityGroup(Funnels.sequentialFunnel(Funnels.longFunnel()))
<a class="jxr_linenumber" name="L173" href="#L173">173</a>        .testEquals();
<a class="jxr_linenumber" name="L174" href="#L174">174</a>   }
<a class="jxr_linenumber" name="L175" href="#L175">175</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
