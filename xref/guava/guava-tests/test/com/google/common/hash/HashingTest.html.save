<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>HashingTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/hash/HashingTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2011 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.hash;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.hash.Hashing.ConcatenatedHashFunction;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.hash.Hashing.goodFastHash;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Charsets;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableList;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableTable;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Lists;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Table.Cell;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> com.google.common.primitives.Ints;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.EqualsTester;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> com.google.common.testing.NullPointerTester;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> com.google.common.util.concurrent.AtomicLongMap;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Method;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Modifier;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> java.nio.ByteBuffer;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> java.util.Collections;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">import</strong> java.util.Random;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * Unit tests for {@link Hashing}.</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * @author Dimitris Andreou</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * @author Kurt Alfred Kluever</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/hash/HashingTest.html">HashingTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L48" href="#L48">48</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMd5() {
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      HashTestUtils.checkAvalanche(Hashing.md5(), 100, 0.4);
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      HashTestUtils.checkNo2BitCharacteristics(Hashing.md5());
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      HashTestUtils.checkNoFunnels(Hashing.md5());
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      HashTestUtils.assertInvariants(Hashing.md5());
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      assertEquals(<span class="jxr_string">"Hashing.md5()"</span>, Hashing.md5().toString());
<a class="jxr_linenumber" name="L54" href="#L54">54</a>    }
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  
<a class="jxr_linenumber" name="L56" href="#L56">56</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSha1() {
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      HashTestUtils.checkAvalanche(Hashing.sha1(), 100, 0.4);
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      HashTestUtils.checkNo2BitCharacteristics(Hashing.sha1());
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      HashTestUtils.checkNoFunnels(Hashing.sha1());
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      HashTestUtils.assertInvariants(Hashing.sha1());
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      assertEquals(<span class="jxr_string">"Hashing.sha1()"</span>, Hashing.sha1().toString());
<a class="jxr_linenumber" name="L62" href="#L62">62</a>    }
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  
<a class="jxr_linenumber" name="L64" href="#L64">64</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSha256() {
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      HashTestUtils.checkAvalanche(Hashing.sha256(), 100, 0.4);
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      HashTestUtils.checkNo2BitCharacteristics(Hashing.sha256());
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      HashTestUtils.checkNoFunnels(Hashing.sha256());
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      HashTestUtils.assertInvariants(Hashing.sha256());
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      assertEquals(<span class="jxr_string">"Hashing.sha256()"</span>, Hashing.sha256().toString());
<a class="jxr_linenumber" name="L70" href="#L70">70</a>    }
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  
<a class="jxr_linenumber" name="L72" href="#L72">72</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSha512() {
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      HashTestUtils.checkAvalanche(Hashing.sha512(), 100, 0.4);
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      HashTestUtils.checkNo2BitCharacteristics(Hashing.sha512());
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      HashTestUtils.checkNoFunnels(Hashing.sha512());
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      HashTestUtils.assertInvariants(Hashing.sha512());
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      assertEquals(<span class="jxr_string">"Hashing.sha512()"</span>, Hashing.sha512().toString());
<a class="jxr_linenumber" name="L78" href="#L78">78</a>    }
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  
<a class="jxr_linenumber" name="L80" href="#L80">80</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCrc32() {
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      HashTestUtils.assertInvariants(Hashing.crc32());
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      assertEquals(<span class="jxr_string">"Hashing.crc32()"</span>, Hashing.crc32().toString());
<a class="jxr_linenumber" name="L83" href="#L83">83</a>    }
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  
<a class="jxr_linenumber" name="L85" href="#L85">85</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAdler32() {
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      HashTestUtils.assertInvariants(Hashing.adler32());
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      assertEquals(<span class="jxr_string">"Hashing.adler32()"</span>, Hashing.adler32().toString());
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    }
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  
<a class="jxr_linenumber" name="L90" href="#L90">90</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMurmur3_128() {
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      HashTestUtils.check2BitAvalanche(Hashing.murmur3_128(), 250, 0.20);
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      HashTestUtils.checkAvalanche(Hashing.murmur3_128(), 250, 0.17);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>      HashTestUtils.checkNo2BitCharacteristics(Hashing.murmur3_128());
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      HashTestUtils.checkNoFunnels(Hashing.murmur3_128());
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      HashTestUtils.assertInvariants(Hashing.murmur3_128());
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      assertEquals(<span class="jxr_string">"Hashing.murmur3_128(0)"</span>, Hashing.murmur3_128().toString());
<a class="jxr_linenumber" name="L97" href="#L97">97</a>    }
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  
<a class="jxr_linenumber" name="L99" href="#L99">99</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMurmur3_32() {
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     HashTestUtils.check2BitAvalanche(Hashing.murmur3_32(), 250, 0.20);
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     HashTestUtils.checkAvalanche(Hashing.murmur3_32(), 250, 0.17);
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     HashTestUtils.checkNo2BitCharacteristics(Hashing.murmur3_32());
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     HashTestUtils.checkNoFunnels(Hashing.murmur3_32());
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     HashTestUtils.assertInvariants(Hashing.murmur3_32());
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     assertEquals(<span class="jxr_string">"Hashing.murmur3_32(0)"</span>, Hashing.murmur3_32().toString());
<a class="jxr_linenumber" name="L106" href="#L106">106</a>   }
<a class="jxr_linenumber" name="L107" href="#L107">107</a> 
<a class="jxr_linenumber" name="L108" href="#L108">108</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSipHash24() {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     HashTestUtils.check2BitAvalanche(Hashing.sipHash24(), 250, 0.14);
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     HashTestUtils.checkAvalanche(Hashing.sipHash24(), 250, 0.10);
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     HashTestUtils.checkNo2BitCharacteristics(Hashing.sipHash24());
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     HashTestUtils.checkNoFunnels(Hashing.sipHash24());
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     HashTestUtils.assertInvariants(Hashing.sipHash24());
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     assertEquals(<span class="jxr_string">"Hashing.sipHash24(506097522914230528, 1084818905618843912)"</span>,
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         Hashing.sipHash24().toString());
<a class="jxr_linenumber" name="L116" href="#L116">116</a>   }
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGoodFastHash() {
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt; 200; i += 17) {
<a class="jxr_linenumber" name="L120" href="#L120">120</a>       <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hasher = Hashing.goodFastHash(i);
<a class="jxr_linenumber" name="L121" href="#L121">121</a>       assertTrue(hasher.bits() &gt;= i);
<a class="jxr_linenumber" name="L122" href="#L122">122</a>       HashTestUtils.assertInvariants(hasher);
<a class="jxr_linenumber" name="L123" href="#L123">123</a>     }
<a class="jxr_linenumber" name="L124" href="#L124">124</a>   }
<a class="jxr_linenumber" name="L125" href="#L125">125</a> 
<a class="jxr_linenumber" name="L126" href="#L126">126</a>   <em class="jxr_comment">// goodFastHash(32) uses Murmur3_32. Use the same epsilon bounds.</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGoodFastHash32() {
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     HashTestUtils.check2BitAvalanche(Hashing.goodFastHash(32), 250, 0.20);
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     HashTestUtils.checkAvalanche(Hashing.goodFastHash(32), 250, 0.17);
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     HashTestUtils.checkNo2BitCharacteristics(Hashing.goodFastHash(32));
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     HashTestUtils.checkNoFunnels(Hashing.goodFastHash(32));
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     HashTestUtils.assertInvariants(Hashing.goodFastHash(32));
<a class="jxr_linenumber" name="L133" href="#L133">133</a>   }
<a class="jxr_linenumber" name="L134" href="#L134">134</a> 
<a class="jxr_linenumber" name="L135" href="#L135">135</a>   <em class="jxr_comment">// goodFastHash(128) uses Murmur3_128. Use the same epsilon bounds.</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGoodFastHash128() {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     HashTestUtils.check2BitAvalanche(Hashing.goodFastHash(128), 250, 0.20);
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     HashTestUtils.checkAvalanche(Hashing.goodFastHash(128), 250, 0.17);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>     HashTestUtils.checkNo2BitCharacteristics(Hashing.goodFastHash(128));
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     HashTestUtils.checkNoFunnels(Hashing.goodFastHash(128));
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     HashTestUtils.assertInvariants(Hashing.goodFastHash(128));
<a class="jxr_linenumber" name="L142" href="#L142">142</a>   }
<a class="jxr_linenumber" name="L143" href="#L143">143</a> 
<a class="jxr_linenumber" name="L144" href="#L144">144</a>   <em class="jxr_comment">// goodFastHash(256) uses Murmur3_128. Use the same epsilon bounds.</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGoodFastHash256() {
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     HashTestUtils.check2BitAvalanche(Hashing.goodFastHash(256), 250, 0.20);
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     HashTestUtils.checkAvalanche(Hashing.goodFastHash(256), 250, 0.17);
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     HashTestUtils.checkNo2BitCharacteristics(Hashing.goodFastHash(256));
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     HashTestUtils.checkNoFunnels(Hashing.goodFastHash(256));
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     HashTestUtils.assertInvariants(Hashing.goodFastHash(256));
<a class="jxr_linenumber" name="L151" href="#L151">151</a>   }
<a class="jxr_linenumber" name="L152" href="#L152">152</a> 
<a class="jxr_linenumber" name="L153" href="#L153">153</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConsistentHash_correctness() {
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     <strong class="jxr_keyword">long</strong>[] interestingValues = { -1, 0, 1, 2, Long.MAX_VALUE, Long.MIN_VALUE };
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">long</strong> h : interestingValues) {
<a class="jxr_linenumber" name="L156" href="#L156">156</a>       checkConsistentHashCorrectness(h);
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     }
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     Random r = <strong class="jxr_keyword">new</strong> Random(7);
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 20; i++) {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>       checkConsistentHashCorrectness(r.nextLong());
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     }
<a class="jxr_linenumber" name="L162" href="#L162">162</a>   }
<a class="jxr_linenumber" name="L163" href="#L163">163</a> 
<a class="jxr_linenumber" name="L164" href="#L164">164</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkConsistentHashCorrectness(<strong class="jxr_keyword">long</strong> hashCode) {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     <strong class="jxr_keyword">int</strong> last = 0;
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> shards = 1; shards &lt;= 100000; shards++) {
<a class="jxr_linenumber" name="L167" href="#L167">167</a>       <strong class="jxr_keyword">int</strong> b = Hashing.consistentHash(hashCode, shards);
<a class="jxr_linenumber" name="L168" href="#L168">168</a>       <strong class="jxr_keyword">if</strong> (b != last) {
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         assertEquals(shards - 1, b);
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         last = b;
<a class="jxr_linenumber" name="L171" href="#L171">171</a>       }
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     }
<a class="jxr_linenumber" name="L173" href="#L173">173</a>   }
<a class="jxr_linenumber" name="L174" href="#L174">174</a> 
<a class="jxr_linenumber" name="L175" href="#L175">175</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConsistentHash_probabilities() {
<a class="jxr_linenumber" name="L176" href="#L176">176</a>     AtomicLongMap&lt;Integer&gt; map = AtomicLongMap.create();
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     Random r = <strong class="jxr_keyword">new</strong> Random(9);
<a class="jxr_linenumber" name="L178" href="#L178">178</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; ITERS; i++) {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>       countRemaps(r.nextLong(), map);
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     }
<a class="jxr_linenumber" name="L181" href="#L181">181</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> shard = 2; shard &lt;= MAX_SHARDS; shard++) {
<a class="jxr_linenumber" name="L182" href="#L182">182</a>       <em class="jxr_comment">// Rough: don't exceed 1.2x the expected number of remaps by more than 20</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a>       assertTrue(map.get(shard) &lt;= 1.2 * ITERS / shard + 20);
<a class="jxr_linenumber" name="L184" href="#L184">184</a>     }
<a class="jxr_linenumber" name="L185" href="#L185">185</a>   }
<a class="jxr_linenumber" name="L186" href="#L186">186</a> 
<a class="jxr_linenumber" name="L187" href="#L187">187</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> countRemaps(<strong class="jxr_keyword">long</strong> h, AtomicLongMap&lt;Integer&gt; map) {
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     <strong class="jxr_keyword">int</strong> last = 0;
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> shards = 2; shards &lt;= MAX_SHARDS; shards++) {
<a class="jxr_linenumber" name="L190" href="#L190">190</a>       <strong class="jxr_keyword">int</strong> chosen = Hashing.consistentHash(h, shards);
<a class="jxr_linenumber" name="L191" href="#L191">191</a>       <strong class="jxr_keyword">if</strong> (chosen != last) {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         map.incrementAndGet(shards);
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         last = chosen;
<a class="jxr_linenumber" name="L194" href="#L194">194</a>       }
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     }
<a class="jxr_linenumber" name="L196" href="#L196">196</a>   }
<a class="jxr_linenumber" name="L197" href="#L197">197</a> 
<a class="jxr_linenumber" name="L198" href="#L198">198</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> ITERS = 10000;
<a class="jxr_linenumber" name="L199" href="#L199">199</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> MAX_SHARDS = 500;
<a class="jxr_linenumber" name="L200" href="#L200">200</a> 
<a class="jxr_linenumber" name="L201" href="#L201">201</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConsistentHash_outOfRange() {
<a class="jxr_linenumber" name="L202" href="#L202">202</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L203" href="#L203">203</a>       Hashing.consistentHash(5L, 0);
<a class="jxr_linenumber" name="L204" href="#L204">204</a>       fail();
<a class="jxr_linenumber" name="L205" href="#L205">205</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L206" href="#L206">206</a>     }
<a class="jxr_linenumber" name="L207" href="#L207">207</a>   }
<a class="jxr_linenumber" name="L208" href="#L208">208</a> 
<a class="jxr_linenumber" name="L209" href="#L209">209</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConsistentHash_ofHashCode() {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     checkSameResult(HashCode.fromLong(1), 1);
<a class="jxr_linenumber" name="L211" href="#L211">211</a>     checkSameResult(HashCode.fromLong(0x9999999999999999L), 0x9999999999999999L);
<a class="jxr_linenumber" name="L212" href="#L212">212</a>     checkSameResult(HashCode.fromInt(0x99999999), 0x0000000099999999L);
<a class="jxr_linenumber" name="L213" href="#L213">213</a>   }
<a class="jxr_linenumber" name="L214" href="#L214">214</a> 
<a class="jxr_linenumber" name="L215" href="#L215">215</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> checkSameResult(<a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> hashCode, <strong class="jxr_keyword">long</strong> equivLong) {
<a class="jxr_linenumber" name="L216" href="#L216">216</a>     assertEquals(Hashing.consistentHash(equivLong, 5555), Hashing.consistentHash(hashCode, 5555));
<a class="jxr_linenumber" name="L217" href="#L217">217</a>   }
<a class="jxr_linenumber" name="L218" href="#L218">218</a> 
<a class="jxr_linenumber" name="L219" href="#L219">219</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L220" href="#L220">220</a> <em class="jxr_javadoccomment">   * Check a few "golden" values to see that implementations across languages</em>
<a class="jxr_linenumber" name="L221" href="#L221">221</a> <em class="jxr_javadoccomment">   * are equivalent.</em>
<a class="jxr_linenumber" name="L222" href="#L222">222</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L223" href="#L223">223</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConsistentHash_linearCongruentialGeneratorCompatibility() {
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     <strong class="jxr_keyword">int</strong>[] golden100 =
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         { 0, 55, 62, 8, 45, 59, 86, 97, 82, 59,
<a class="jxr_linenumber" name="L226" href="#L226">226</a>           73, 37, 17, 56, 86, 21, 90, 37, 38, 83 };
<a class="jxr_linenumber" name="L227" href="#L227">227</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; golden100.length; i++) {
<a class="jxr_linenumber" name="L228" href="#L228">228</a>       assertEquals(golden100[i], Hashing.consistentHash(i, 100));
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     }
<a class="jxr_linenumber" name="L230" href="#L230">230</a>     assertEquals(6, Hashing.consistentHash(10863919174838991L, 11));
<a class="jxr_linenumber" name="L231" href="#L231">231</a>     assertEquals(3, Hashing.consistentHash(2016238256797177309L, 11));
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     assertEquals(5, Hashing.consistentHash(1673758223894951030L, 11));
<a class="jxr_linenumber" name="L233" href="#L233">233</a>     assertEquals(80343, Hashing.consistentHash(2, 100001));
<a class="jxr_linenumber" name="L234" href="#L234">234</a>     assertEquals(22152, Hashing.consistentHash(2201, 100001));
<a class="jxr_linenumber" name="L235" href="#L235">235</a>     assertEquals(15018, Hashing.consistentHash(2202, 100001));
<a class="jxr_linenumber" name="L236" href="#L236">236</a>   }
<a class="jxr_linenumber" name="L237" href="#L237">237</a> 
<a class="jxr_linenumber" name="L238" href="#L238">238</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> MAX_PERCENT_SPREAD = 0.5;
<a class="jxr_linenumber" name="L239" href="#L239">239</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> RANDOM_SEED = 177L;
<a class="jxr_linenumber" name="L240" href="#L240">240</a> 
<a class="jxr_linenumber" name="L241" href="#L241">241</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCombineOrdered_empty() {
<a class="jxr_linenumber" name="L242" href="#L242">242</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L243" href="#L243">243</a>       Hashing.combineOrdered(Collections.&lt;HashCode&gt;emptySet());
<a class="jxr_linenumber" name="L244" href="#L244">244</a>       fail();
<a class="jxr_linenumber" name="L245" href="#L245">245</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L246" href="#L246">246</a>     }
<a class="jxr_linenumber" name="L247" href="#L247">247</a>   }
<a class="jxr_linenumber" name="L248" href="#L248">248</a> 
<a class="jxr_linenumber" name="L249" href="#L249">249</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCombineOrdered_differentBitLengths() {
<a class="jxr_linenumber" name="L250" href="#L250">250</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L251" href="#L251">251</a>       Hashing.combineOrdered(ImmutableList.of(HashCode.fromInt(32), HashCode.fromLong(32L)));
<a class="jxr_linenumber" name="L252" href="#L252">252</a>       fail();
<a class="jxr_linenumber" name="L253" href="#L253">253</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L254" href="#L254">254</a>     }
<a class="jxr_linenumber" name="L255" href="#L255">255</a>   }
<a class="jxr_linenumber" name="L256" href="#L256">256</a> 
<a class="jxr_linenumber" name="L257" href="#L257">257</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCombineOrdered() {
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> hash31 = HashCode.fromInt(31);
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> hash32 = HashCode.fromInt(32);
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     assertEquals(hash32, Hashing.combineOrdered(ImmutableList.of(hash32)));
<a class="jxr_linenumber" name="L261" href="#L261">261</a>     assertEquals(HashCode.fromBytes(<strong class="jxr_keyword">new</strong> byte[] { (byte) 0x80, 0, 0, 0 }),
<a class="jxr_linenumber" name="L262" href="#L262">262</a>         Hashing.combineOrdered(ImmutableList.of(hash32, hash32)));
<a class="jxr_linenumber" name="L263" href="#L263">263</a>     assertEquals(HashCode.fromBytes(<strong class="jxr_keyword">new</strong> byte[] { (byte) 0xa0, 0, 0, 0 }),
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         Hashing.combineOrdered(ImmutableList.of(hash32, hash32, hash32)));
<a class="jxr_linenumber" name="L265" href="#L265">265</a>     assertFalse(
<a class="jxr_linenumber" name="L266" href="#L266">266</a>         Hashing.combineOrdered(ImmutableList.of(hash31, hash32)).equals(
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         Hashing.combineOrdered(ImmutableList.of(hash32, hash31))));
<a class="jxr_linenumber" name="L268" href="#L268">268</a>   }
<a class="jxr_linenumber" name="L269" href="#L269">269</a> 
<a class="jxr_linenumber" name="L270" href="#L270">270</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCombineOrdered_randomHashCodes() {
<a class="jxr_linenumber" name="L271" href="#L271">271</a>     Random random = <strong class="jxr_keyword">new</strong> Random(7);
<a class="jxr_linenumber" name="L272" href="#L272">272</a>     List&lt;HashCode&gt; hashCodes = Lists.newArrayList();
<a class="jxr_linenumber" name="L273" href="#L273">273</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 10; i++) {
<a class="jxr_linenumber" name="L274" href="#L274">274</a>       hashCodes.add(HashCode.fromLong(random.nextLong()));
<a class="jxr_linenumber" name="L275" href="#L275">275</a>     }
<a class="jxr_linenumber" name="L276" href="#L276">276</a>     <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> hashCode1 = Hashing.combineOrdered(hashCodes);
<a class="jxr_linenumber" name="L277" href="#L277">277</a>     Collections.shuffle(hashCodes, random);
<a class="jxr_linenumber" name="L278" href="#L278">278</a>     <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> hashCode2 = Hashing.combineOrdered(hashCodes);
<a class="jxr_linenumber" name="L279" href="#L279">279</a> 
<a class="jxr_linenumber" name="L280" href="#L280">280</a>     assertFalse(hashCode1.equals(hashCode2));
<a class="jxr_linenumber" name="L281" href="#L281">281</a>   }
<a class="jxr_linenumber" name="L282" href="#L282">282</a> 
<a class="jxr_linenumber" name="L283" href="#L283">283</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCombineUnordered_empty() {
<a class="jxr_linenumber" name="L284" href="#L284">284</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L285" href="#L285">285</a>       Hashing.combineUnordered(Collections.&lt;HashCode&gt;emptySet());
<a class="jxr_linenumber" name="L286" href="#L286">286</a>       fail();
<a class="jxr_linenumber" name="L287" href="#L287">287</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L288" href="#L288">288</a>     }
<a class="jxr_linenumber" name="L289" href="#L289">289</a>   }
<a class="jxr_linenumber" name="L290" href="#L290">290</a> 
<a class="jxr_linenumber" name="L291" href="#L291">291</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCombineUnordered_differentBitLengths() {
<a class="jxr_linenumber" name="L292" href="#L292">292</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L293" href="#L293">293</a>       Hashing.combineUnordered(ImmutableList.of(HashCode.fromInt(32), HashCode.fromLong(32L)));
<a class="jxr_linenumber" name="L294" href="#L294">294</a>       fail();
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException expected) {
<a class="jxr_linenumber" name="L296" href="#L296">296</a>     }
<a class="jxr_linenumber" name="L297" href="#L297">297</a>   }
<a class="jxr_linenumber" name="L298" href="#L298">298</a> 
<a class="jxr_linenumber" name="L299" href="#L299">299</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCombineUnordered() {
<a class="jxr_linenumber" name="L300" href="#L300">300</a>     <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> hash31 = HashCode.fromInt(31);
<a class="jxr_linenumber" name="L301" href="#L301">301</a>     <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> hash32 = HashCode.fromInt(32);
<a class="jxr_linenumber" name="L302" href="#L302">302</a>     assertEquals(hash32, Hashing.combineUnordered(ImmutableList.of(hash32)));
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     assertEquals(HashCode.fromInt(64), Hashing.combineUnordered(ImmutableList.of(hash32, hash32)));
<a class="jxr_linenumber" name="L304" href="#L304">304</a>     assertEquals(HashCode.fromInt(96),
<a class="jxr_linenumber" name="L305" href="#L305">305</a>         Hashing.combineUnordered(ImmutableList.of(hash32, hash32, hash32)));
<a class="jxr_linenumber" name="L306" href="#L306">306</a>     assertEquals(
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         Hashing.combineUnordered(ImmutableList.of(hash31, hash32)),
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         Hashing.combineUnordered(ImmutableList.of(hash32, hash31)));
<a class="jxr_linenumber" name="L309" href="#L309">309</a>   }
<a class="jxr_linenumber" name="L310" href="#L310">310</a> 
<a class="jxr_linenumber" name="L311" href="#L311">311</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCombineUnordered_randomHashCodes() {
<a class="jxr_linenumber" name="L312" href="#L312">312</a>     Random random = <strong class="jxr_keyword">new</strong> Random(RANDOM_SEED);
<a class="jxr_linenumber" name="L313" href="#L313">313</a>     List&lt;HashCode&gt; hashCodes = Lists.newArrayList();
<a class="jxr_linenumber" name="L314" href="#L314">314</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 10; i++) {
<a class="jxr_linenumber" name="L315" href="#L315">315</a>       hashCodes.add(HashCode.fromLong(random.nextLong()));
<a class="jxr_linenumber" name="L316" href="#L316">316</a>     }
<a class="jxr_linenumber" name="L317" href="#L317">317</a>     <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> hashCode1 = Hashing.combineUnordered(hashCodes);
<a class="jxr_linenumber" name="L318" href="#L318">318</a>     Collections.shuffle(hashCodes);
<a class="jxr_linenumber" name="L319" href="#L319">319</a>     <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> hashCode2 = Hashing.combineUnordered(hashCodes);
<a class="jxr_linenumber" name="L320" href="#L320">320</a> 
<a class="jxr_linenumber" name="L321" href="#L321">321</a>     assertEquals(hashCode1, hashCode2);
<a class="jxr_linenumber" name="L322" href="#L322">322</a>   }
<a class="jxr_linenumber" name="L323" href="#L323">323</a> 
<a class="jxr_linenumber" name="L324" href="#L324">324</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConcatenatedHashFunction_equals() {
<a class="jxr_linenumber" name="L325" href="#L325">325</a>     assertEquals(
<a class="jxr_linenumber" name="L326" href="#L326">326</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/Hashing.html">ConcatenatedHashFunction</a>(Hashing.md5()),
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/Hashing.html">ConcatenatedHashFunction</a>(Hashing.md5()));
<a class="jxr_linenumber" name="L328" href="#L328">328</a>     assertEquals(
<a class="jxr_linenumber" name="L329" href="#L329">329</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/Hashing.html">ConcatenatedHashFunction</a>(Hashing.md5(), Hashing.murmur3_32()),
<a class="jxr_linenumber" name="L330" href="#L330">330</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/Hashing.html">ConcatenatedHashFunction</a>(Hashing.md5(), Hashing.murmur3_32()));
<a class="jxr_linenumber" name="L331" href="#L331">331</a>   }
<a class="jxr_linenumber" name="L332" href="#L332">332</a> 
<a class="jxr_linenumber" name="L333" href="#L333">333</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConcatenatedHashFunction_bits() {
<a class="jxr_linenumber" name="L334" href="#L334">334</a>     assertEquals(Hashing.md5().bits(),
<a class="jxr_linenumber" name="L335" href="#L335">335</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/Hashing.html">ConcatenatedHashFunction</a>(Hashing.md5()).bits());
<a class="jxr_linenumber" name="L336" href="#L336">336</a>     assertEquals(Hashing.md5().bits() + Hashing.murmur3_32().bits(),
<a class="jxr_linenumber" name="L337" href="#L337">337</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/Hashing.html">ConcatenatedHashFunction</a>(Hashing.md5(), Hashing.murmur3_32()).bits());
<a class="jxr_linenumber" name="L338" href="#L338">338</a>     assertEquals(Hashing.md5().bits() + Hashing.murmur3_32().bits() + Hashing.murmur3_128().bits(),
<a class="jxr_linenumber" name="L339" href="#L339">339</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/Hashing.html">ConcatenatedHashFunction</a>(
<a class="jxr_linenumber" name="L340" href="#L340">340</a>             Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128()).bits());
<a class="jxr_linenumber" name="L341" href="#L341">341</a>   }
<a class="jxr_linenumber" name="L342" href="#L342">342</a> 
<a class="jxr_linenumber" name="L343" href="#L343">343</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConcatenatedHashFunction_makeHash() {
<a class="jxr_linenumber" name="L344" href="#L344">344</a>     byte[] md5Hash = Hashing.md5().hashLong(42L).asBytes();
<a class="jxr_linenumber" name="L345" href="#L345">345</a>     byte[] murmur3Hash = Hashing.murmur3_32().hashLong(42L).asBytes();
<a class="jxr_linenumber" name="L346" href="#L346">346</a>     byte[] combined = <strong class="jxr_keyword">new</strong> byte[md5Hash.length + murmur3Hash.length];
<a class="jxr_linenumber" name="L347" href="#L347">347</a>     ByteBuffer buffer = ByteBuffer.wrap(combined);
<a class="jxr_linenumber" name="L348" href="#L348">348</a>     buffer.put(md5Hash);
<a class="jxr_linenumber" name="L349" href="#L349">349</a>     buffer.put(murmur3Hash);
<a class="jxr_linenumber" name="L350" href="#L350">350</a> 
<a class="jxr_linenumber" name="L351" href="#L351">351</a>     assertEquals(HashCode.fromBytes(combined),
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/hash/Hashing.html">ConcatenatedHashFunction</a>(Hashing.md5(), Hashing.murmur3_32()).hashLong(42L));
<a class="jxr_linenumber" name="L353" href="#L353">353</a>   }
<a class="jxr_linenumber" name="L354" href="#L354">354</a> 
<a class="jxr_linenumber" name="L355" href="#L355">355</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testHashIntReverseBytesVsHashBytesIntsToByteArray() {
<a class="jxr_linenumber" name="L356" href="#L356">356</a>     <strong class="jxr_keyword">int</strong> input = 42;
<a class="jxr_linenumber" name="L357" href="#L357">357</a>     assertEquals(
<a class="jxr_linenumber" name="L358" href="#L358">358</a>         Hashing.md5().hashBytes(Ints.toByteArray(input)),
<a class="jxr_linenumber" name="L359" href="#L359">359</a>         Hashing.md5().hashInt(Integer.reverseBytes(input)));
<a class="jxr_linenumber" name="L360" href="#L360">360</a>   }
<a class="jxr_linenumber" name="L361" href="#L361">361</a> 
<a class="jxr_linenumber" name="L362" href="#L362">362</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testHashIntVsForLoop() {
<a class="jxr_linenumber" name="L363" href="#L363">363</a>     <strong class="jxr_keyword">int</strong> input = 42;
<a class="jxr_linenumber" name="L364" href="#L364">364</a>     <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> expected = Hashing.md5().hashInt(input);
<a class="jxr_linenumber" name="L365" href="#L365">365</a> 
<a class="jxr_linenumber" name="L366" href="#L366">366</a>     <a href="../../../../com/google/common/hash/Hasher.html">Hasher</a> hasher = Hashing.md5().newHasher();
<a class="jxr_linenumber" name="L367" href="#L367">367</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 32; i += 8) {
<a class="jxr_linenumber" name="L368" href="#L368">368</a>       hasher.putByte((byte) (input &gt;&gt; i));
<a class="jxr_linenumber" name="L369" href="#L369">369</a>     }
<a class="jxr_linenumber" name="L370" href="#L370">370</a>     <a href="../../../../com/google/common/hash/HashCode.html">HashCode</a> actual = hasher.hash();
<a class="jxr_linenumber" name="L371" href="#L371">371</a> 
<a class="jxr_linenumber" name="L372" href="#L372">372</a>     assertEquals(expected, actual);
<a class="jxr_linenumber" name="L373" href="#L373">373</a>   }
<a class="jxr_linenumber" name="L374" href="#L374">374</a> 
<a class="jxr_linenumber" name="L375" href="#L375">375</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> String EMPTY_STRING = <span class="jxr_string">""</span>;
<a class="jxr_linenumber" name="L376" href="#L376">376</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> String TQBFJOTLD = <span class="jxr_string">"The quick brown fox jumps over the lazy dog"</span>;
<a class="jxr_linenumber" name="L377" href="#L377">377</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> String TQBFJOTLDP = <span class="jxr_string">"The quick brown fox jumps over the lazy dog."</span>;
<a class="jxr_linenumber" name="L378" href="#L378">378</a> 
<a class="jxr_linenumber" name="L379" href="#L379">379</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ImmutableTable&lt;HashFunction, String, String&gt; KNOWN_HASHES =
<a class="jxr_linenumber" name="L380" href="#L380">380</a>       ImmutableTable.&lt;HashFunction, String, String&gt;builder()
<a class="jxr_linenumber" name="L381" href="#L381">381</a>           .put(Hashing.adler32(), EMPTY_STRING, <span class="jxr_string">"01000000"</span>)
<a class="jxr_linenumber" name="L382" href="#L382">382</a>           .put(Hashing.adler32(), TQBFJOTLD, <span class="jxr_string">"da0fdc5b"</span>)
<a class="jxr_linenumber" name="L383" href="#L383">383</a>           .put(Hashing.adler32(), TQBFJOTLDP, <span class="jxr_string">"0810e46b"</span>)
<a class="jxr_linenumber" name="L384" href="#L384">384</a>           .put(Hashing.md5(), EMPTY_STRING, <span class="jxr_string">"d41d8cd98f00b204e9800998ecf8427e"</span>)
<a class="jxr_linenumber" name="L385" href="#L385">385</a>           .put(Hashing.md5(), TQBFJOTLD, <span class="jxr_string">"9e107d9d372bb6826bd81d3542a419d6"</span>)
<a class="jxr_linenumber" name="L386" href="#L386">386</a>           .put(Hashing.md5(), TQBFJOTLDP, <span class="jxr_string">"e4d909c290d0fb1ca068ffaddf22cbd0"</span>)
<a class="jxr_linenumber" name="L387" href="#L387">387</a>           .put(Hashing.murmur3_128(), EMPTY_STRING, <span class="jxr_string">"00000000000000000000000000000000"</span>)
<a class="jxr_linenumber" name="L388" href="#L388">388</a>           .put(Hashing.murmur3_128(), TQBFJOTLD, <span class="jxr_string">"6c1b07bc7bbc4be347939ac4a93c437a"</span>)
<a class="jxr_linenumber" name="L389" href="#L389">389</a>           .put(Hashing.murmur3_128(), TQBFJOTLDP, <span class="jxr_string">"c902e99e1f4899cde7b68789a3a15d69"</span>)
<a class="jxr_linenumber" name="L390" href="#L390">390</a>           .put(Hashing.murmur3_32(), EMPTY_STRING, <span class="jxr_string">"00000000"</span>)
<a class="jxr_linenumber" name="L391" href="#L391">391</a>           .put(Hashing.murmur3_32(), TQBFJOTLD, <span class="jxr_string">"23f74f2e"</span>)
<a class="jxr_linenumber" name="L392" href="#L392">392</a>           .put(Hashing.murmur3_32(), TQBFJOTLDP, <span class="jxr_string">"fc8bc4d5"</span>)
<a class="jxr_linenumber" name="L393" href="#L393">393</a>           .put(Hashing.sha1(), EMPTY_STRING, <span class="jxr_string">"da39a3ee5e6b4b0d3255bfef95601890afd80709"</span>)
<a class="jxr_linenumber" name="L394" href="#L394">394</a>           .put(Hashing.sha1(), TQBFJOTLD, <span class="jxr_string">"2fd4e1c67a2d28fced849ee1bb76e7391b93eb12"</span>)
<a class="jxr_linenumber" name="L395" href="#L395">395</a>           .put(Hashing.sha1(), TQBFJOTLDP, <span class="jxr_string">"408d94384216f890ff7a0c3528e8bed1e0b01621"</span>)
<a class="jxr_linenumber" name="L396" href="#L396">396</a>           .put(Hashing.sha256(), EMPTY_STRING,
<a class="jxr_linenumber" name="L397" href="#L397">397</a>                <span class="jxr_string">"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"</span>)
<a class="jxr_linenumber" name="L398" href="#L398">398</a>           .put(Hashing.sha256(), TQBFJOTLD,
<a class="jxr_linenumber" name="L399" href="#L399">399</a>                <span class="jxr_string">"d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"</span>)
<a class="jxr_linenumber" name="L400" href="#L400">400</a>           .put(Hashing.sha256(), TQBFJOTLDP,
<a class="jxr_linenumber" name="L401" href="#L401">401</a>                <span class="jxr_string">"ef537f25c895bfa782526529a9b63d97aa631564d5d789c2b765448c8635fb6c"</span>)
<a class="jxr_linenumber" name="L402" href="#L402">402</a>           .put(Hashing.sha512(), EMPTY_STRING,
<a class="jxr_linenumber" name="L403" href="#L403">403</a>                <span class="jxr_string">"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"</span> +
<a class="jxr_linenumber" name="L404" href="#L404">404</a>                <span class="jxr_string">"47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"</span>)
<a class="jxr_linenumber" name="L405" href="#L405">405</a>           .put(Hashing.sha512(), TQBFJOTLD,
<a class="jxr_linenumber" name="L406" href="#L406">406</a>                <span class="jxr_string">"07e547d9586f6a73f73fbac0435ed76951218fb7d0c8d788a309d785436bbb64"</span> +
<a class="jxr_linenumber" name="L407" href="#L407">407</a>                <span class="jxr_string">"2e93a252a954f23912547d1e8a3b5ed6e1bfd7097821233fa0538f3db854fee6"</span>)
<a class="jxr_linenumber" name="L408" href="#L408">408</a>           .put(Hashing.sha512(), TQBFJOTLDP,
<a class="jxr_linenumber" name="L409" href="#L409">409</a>                <span class="jxr_string">"91ea1245f20d46ae9a037a989f54f1f790f0a47607eeb8a14d12890cea77a1bb"</span> +
<a class="jxr_linenumber" name="L410" href="#L410">410</a>                <span class="jxr_string">"c6c7ed9cf205e67b7f2b8fd4c7dfd3a7a8617e45f3c463d481c7e586c39ac1ed"</span>)
<a class="jxr_linenumber" name="L411" href="#L411">411</a>           .put(Hashing.crc32(), EMPTY_STRING, <span class="jxr_string">"00000000"</span>)
<a class="jxr_linenumber" name="L412" href="#L412">412</a>           .put(Hashing.crc32(), TQBFJOTLD, <span class="jxr_string">"39a34f41"</span>)
<a class="jxr_linenumber" name="L413" href="#L413">413</a>           .put(Hashing.crc32(), TQBFJOTLDP, <span class="jxr_string">"e9259051"</span>)
<a class="jxr_linenumber" name="L414" href="#L414">414</a>           .put(Hashing.sipHash24(), EMPTY_STRING, <span class="jxr_string">"310e0edd47db6f72"</span>)
<a class="jxr_linenumber" name="L415" href="#L415">415</a>           .put(Hashing.sipHash24(), TQBFJOTLD, <span class="jxr_string">"e46f1fdc05612752"</span>)
<a class="jxr_linenumber" name="L416" href="#L416">416</a>           .put(Hashing.sipHash24(), TQBFJOTLDP, <span class="jxr_string">"9b602581fce4d4f8"</span>)
<a class="jxr_linenumber" name="L417" href="#L417">417</a>           .put(Hashing.crc32c(), EMPTY_STRING, <span class="jxr_string">"00000000"</span>)
<a class="jxr_linenumber" name="L418" href="#L418">418</a>           .put(Hashing.crc32c(), TQBFJOTLD, <span class="jxr_string">"04046222"</span>)
<a class="jxr_linenumber" name="L419" href="#L419">419</a>           .put(Hashing.crc32c(), TQBFJOTLDP, <span class="jxr_string">"b3970019"</span>)
<a class="jxr_linenumber" name="L420" href="#L420">420</a>           .build();
<a class="jxr_linenumber" name="L421" href="#L421">421</a> 
<a class="jxr_linenumber" name="L422" href="#L422">422</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAllHashFunctionsHaveKnownHashes() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L423" href="#L423">423</a>     <strong class="jxr_keyword">for</strong> (Method method : Hashing.<strong class="jxr_keyword">class</strong>.getDeclaredMethods()) {
<a class="jxr_linenumber" name="L424" href="#L424">424</a>       <strong class="jxr_keyword">if</strong> (method.getReturnType().equals(HashFunction.<strong class="jxr_keyword">class</strong>) <em class="jxr_comment">// must return HashFunction</em>
<a class="jxr_linenumber" name="L425" href="#L425">425</a>           &amp;&amp; Modifier.isPublic(method.getModifiers()) <em class="jxr_comment">// only the public methods</em>
<a class="jxr_linenumber" name="L426" href="#L426">426</a>           &amp;&amp; method.getParameterTypes().length == 0) { <em class="jxr_comment">// only the seed-less grapes^W hash functions</em>
<a class="jxr_linenumber" name="L427" href="#L427">427</a>         <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction = (HashFunction) method.invoke(Hashing.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L428" href="#L428">428</a>         assertTrue(<span class="jxr_string">"There should be at least 3 entries in KNOWN_HASHES for "</span> + hashFunction,
<a class="jxr_linenumber" name="L429" href="#L429">429</a>             KNOWN_HASHES.row(hashFunction).size() &gt;= 3);
<a class="jxr_linenumber" name="L430" href="#L430">430</a>       }
<a class="jxr_linenumber" name="L431" href="#L431">431</a>     }
<a class="jxr_linenumber" name="L432" href="#L432">432</a>   }
<a class="jxr_linenumber" name="L433" href="#L433">433</a> 
<a class="jxr_linenumber" name="L434" href="#L434">434</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testKnownUtf8Hashing() {
<a class="jxr_linenumber" name="L435" href="#L435">435</a>     <strong class="jxr_keyword">for</strong> (Cell&lt;HashFunction, String, String&gt; cell : KNOWN_HASHES.cellSet()) {
<a class="jxr_linenumber" name="L436" href="#L436">436</a>       <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> func = cell.getRowKey();
<a class="jxr_linenumber" name="L437" href="#L437">437</a>       String input = cell.getColumnKey();
<a class="jxr_linenumber" name="L438" href="#L438">438</a>       String expected = cell.getValue();
<a class="jxr_linenumber" name="L439" href="#L439">439</a>       assertEquals(
<a class="jxr_linenumber" name="L440" href="#L440">440</a>           String.format(<span class="jxr_string">"Known hash for hash(%s, UTF_8) failed"</span>, input),
<a class="jxr_linenumber" name="L441" href="#L441">441</a>           expected,
<a class="jxr_linenumber" name="L442" href="#L442">442</a>           func.hashString(input, Charsets.UTF_8).toString());
<a class="jxr_linenumber" name="L443" href="#L443">443</a>     }
<a class="jxr_linenumber" name="L444" href="#L444">444</a>   }
<a class="jxr_linenumber" name="L445" href="#L445">445</a> 
<a class="jxr_linenumber" name="L446" href="#L446">446</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNullPointers() {
<a class="jxr_linenumber" name="L447" href="#L447">447</a>     <a href="../../../../com/google/common/testing/NullPointerTester.html">NullPointerTester</a> tester = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/NullPointerTester.html">NullPointerTester</a>()
<a class="jxr_linenumber" name="L448" href="#L448">448</a>         .setDefault(HashCode.<strong class="jxr_keyword">class</strong>, HashCode.fromLong(0));
<a class="jxr_linenumber" name="L449" href="#L449">449</a>     tester.testAllPublicStaticMethods(Hashing.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L450" href="#L450">450</a>   }
<a class="jxr_linenumber" name="L451" href="#L451">451</a> 
<a class="jxr_linenumber" name="L452" href="#L452">452</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSeedlessHashFunctionEquals() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L453" href="#L453">453</a>     assertSeedlessHashFunctionEquals(Hashing.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L454" href="#L454">454</a>   }
<a class="jxr_linenumber" name="L455" href="#L455">455</a> 
<a class="jxr_linenumber" name="L456" href="#L456">456</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSeededHashFunctionEquals() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L457" href="#L457">457</a>     assertSeededHashFunctionEquals(Hashing.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L458" href="#L458">458</a>   }
<a class="jxr_linenumber" name="L459" href="#L459">459</a> 
<a class="jxr_linenumber" name="L460" href="#L460">460</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L461" href="#L461">461</a> <em class="jxr_javadoccomment">   * Tests equality of {@link Hashing#goodFastHash} instances. This test must be separate from</em>
<a class="jxr_linenumber" name="L462" href="#L462">462</a> <em class="jxr_javadoccomment">   * {@link #testSeededHashFunctionEquals} because the parameter to {@code goodFastHash} is a size,</em>
<a class="jxr_linenumber" name="L463" href="#L463">463</a> <em class="jxr_javadoccomment">   * not a seed, and because that size is rounded up. Thus, {@code goodFastHash} instances with</em>
<a class="jxr_linenumber" name="L464" href="#L464">464</a> <em class="jxr_javadoccomment">   * different parameters can be equal. That fact is a problem for {@code</em>
<a class="jxr_linenumber" name="L465" href="#L465">465</a> <em class="jxr_javadoccomment">   * testSeededHashFunctionEquals}.</em>
<a class="jxr_linenumber" name="L466" href="#L466">466</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L467" href="#L467">467</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGoodFastHashEquals() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L468" href="#L468">468</a>     <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction1a = goodFastHash(1);
<a class="jxr_linenumber" name="L469" href="#L469">469</a>     <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction1b = goodFastHash(32);
<a class="jxr_linenumber" name="L470" href="#L470">470</a>     <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction2a = goodFastHash(33);
<a class="jxr_linenumber" name="L471" href="#L471">471</a>     <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction2b = goodFastHash(128);
<a class="jxr_linenumber" name="L472" href="#L472">472</a>     <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction3a = goodFastHash(129);
<a class="jxr_linenumber" name="L473" href="#L473">473</a>     <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction3b = goodFastHash(256);
<a class="jxr_linenumber" name="L474" href="#L474">474</a>     <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction4a = goodFastHash(257);
<a class="jxr_linenumber" name="L475" href="#L475">475</a>     <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction4b = goodFastHash(384);
<a class="jxr_linenumber" name="L476" href="#L476">476</a> 
<a class="jxr_linenumber" name="L477" href="#L477">477</a>     <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L478" href="#L478">478</a>         .addEqualityGroup(hashFunction1a, hashFunction1b)
<a class="jxr_linenumber" name="L479" href="#L479">479</a>         .addEqualityGroup(hashFunction2a, hashFunction2b)
<a class="jxr_linenumber" name="L480" href="#L480">480</a>         .addEqualityGroup(hashFunction3a, hashFunction3b)
<a class="jxr_linenumber" name="L481" href="#L481">481</a>         .addEqualityGroup(hashFunction4a, hashFunction4b)
<a class="jxr_linenumber" name="L482" href="#L482">482</a>         .testEquals();
<a class="jxr_linenumber" name="L483" href="#L483">483</a> 
<a class="jxr_linenumber" name="L484" href="#L484">484</a>     assertEquals(hashFunction1a.toString(), hashFunction1b.toString());
<a class="jxr_linenumber" name="L485" href="#L485">485</a>     assertEquals(hashFunction2a.toString(), hashFunction2b.toString());
<a class="jxr_linenumber" name="L486" href="#L486">486</a>     assertEquals(hashFunction3a.toString(), hashFunction3b.toString());
<a class="jxr_linenumber" name="L487" href="#L487">487</a>     assertEquals(hashFunction4a.toString(), hashFunction4b.toString());
<a class="jxr_linenumber" name="L488" href="#L488">488</a>   }
<a class="jxr_linenumber" name="L489" href="#L489">489</a> 
<a class="jxr_linenumber" name="L490" href="#L490">490</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> assertSeedlessHashFunctionEquals(Class&lt;?&gt; clazz) <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L491" href="#L491">491</a>     <strong class="jxr_keyword">for</strong> (Method method : clazz.getDeclaredMethods()) {
<a class="jxr_linenumber" name="L492" href="#L492">492</a>       <strong class="jxr_keyword">if</strong> (method.getReturnType().equals(HashFunction.<strong class="jxr_keyword">class</strong>) <em class="jxr_comment">// must return HashFunction</em>
<a class="jxr_linenumber" name="L493" href="#L493">493</a>           &amp;&amp; Modifier.isPublic(method.getModifiers()) <em class="jxr_comment">// only the public methods</em>
<a class="jxr_linenumber" name="L494" href="#L494">494</a>           &amp;&amp; method.getParameterTypes().length == 0) { <em class="jxr_comment">// only the seed-less hash functions</em>
<a class="jxr_linenumber" name="L495" href="#L495">495</a>         <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction1a = (HashFunction) method.invoke(clazz);
<a class="jxr_linenumber" name="L496" href="#L496">496</a>         <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction1b = (HashFunction) method.invoke(clazz);
<a class="jxr_linenumber" name="L497" href="#L497">497</a> 
<a class="jxr_linenumber" name="L498" href="#L498">498</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L499" href="#L499">499</a>             .addEqualityGroup(hashFunction1a, hashFunction1b)
<a class="jxr_linenumber" name="L500" href="#L500">500</a>             .testEquals();
<a class="jxr_linenumber" name="L501" href="#L501">501</a> 
<a class="jxr_linenumber" name="L502" href="#L502">502</a>         <em class="jxr_comment">// Make sure we're returning not only equal instances, but constants.</em>
<a class="jxr_linenumber" name="L503" href="#L503">503</a>         assertSame(hashFunction1a, hashFunction1b);
<a class="jxr_linenumber" name="L504" href="#L504">504</a> 
<a class="jxr_linenumber" name="L505" href="#L505">505</a>         assertEquals(hashFunction1a.toString(), hashFunction1b.toString());
<a class="jxr_linenumber" name="L506" href="#L506">506</a>       }
<a class="jxr_linenumber" name="L507" href="#L507">507</a>     }
<a class="jxr_linenumber" name="L508" href="#L508">508</a>   }
<a class="jxr_linenumber" name="L509" href="#L509">509</a> 
<a class="jxr_linenumber" name="L510" href="#L510">510</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> assertSeededHashFunctionEquals(Class&lt;?&gt; clazz) <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L511" href="#L511">511</a>     Random random = <strong class="jxr_keyword">new</strong> Random(RANDOM_SEED);
<a class="jxr_linenumber" name="L512" href="#L512">512</a>     <strong class="jxr_keyword">for</strong> (Method method : clazz.getDeclaredMethods()) {
<a class="jxr_linenumber" name="L513" href="#L513">513</a>       <strong class="jxr_keyword">if</strong> (method.getReturnType().equals(HashFunction.<strong class="jxr_keyword">class</strong>) <em class="jxr_comment">// must return HashFunction</em>
<a class="jxr_linenumber" name="L514" href="#L514">514</a>           &amp;&amp; Modifier.isPublic(method.getModifiers()) <em class="jxr_comment">// only the public methods</em>
<a class="jxr_linenumber" name="L515" href="#L515">515</a>           &amp;&amp; method.getParameterTypes().length != 0 <em class="jxr_comment">// only the seeded hash functions</em>
<a class="jxr_linenumber" name="L516" href="#L516">516</a>           &amp;&amp; !method.getName().equals(<span class="jxr_string">"goodFastHash"</span>)) { <em class="jxr_comment">// tested in testGoodFastHashEquals</em>
<a class="jxr_linenumber" name="L517" href="#L517">517</a>         Object[] params1 = <strong class="jxr_keyword">new</strong> Object[method.getParameterTypes().length];
<a class="jxr_linenumber" name="L518" href="#L518">518</a>         Object[] params2 = <strong class="jxr_keyword">new</strong> Object[method.getParameterTypes().length];
<a class="jxr_linenumber" name="L519" href="#L519">519</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; params1.length; i++) {
<a class="jxr_linenumber" name="L520" href="#L520">520</a>           <strong class="jxr_keyword">if</strong> (method.getParameterTypes()[i] == <strong class="jxr_keyword">int</strong>.<strong class="jxr_keyword">class</strong>) {
<a class="jxr_linenumber" name="L521" href="#L521">521</a>             params1[i] = random.nextInt();
<a class="jxr_linenumber" name="L522" href="#L522">522</a>             params2[i] = random.nextInt();
<a class="jxr_linenumber" name="L523" href="#L523">523</a>           } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (method.getParameterTypes()[i] == <strong class="jxr_keyword">long</strong>.<strong class="jxr_keyword">class</strong>) {
<a class="jxr_linenumber" name="L524" href="#L524">524</a>             params1[i] = random.nextLong();
<a class="jxr_linenumber" name="L525" href="#L525">525</a>             params2[i] = random.nextLong();
<a class="jxr_linenumber" name="L526" href="#L526">526</a>           } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L527" href="#L527">527</a>             fail(<span class="jxr_string">"Unable to create a random parameter for "</span> + method.getParameterTypes()[i]);
<a class="jxr_linenumber" name="L528" href="#L528">528</a>           }
<a class="jxr_linenumber" name="L529" href="#L529">529</a>         }
<a class="jxr_linenumber" name="L530" href="#L530">530</a>         <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction1a = (HashFunction) method.invoke(clazz, params1);
<a class="jxr_linenumber" name="L531" href="#L531">531</a>         <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction1b = (HashFunction) method.invoke(clazz, params1);
<a class="jxr_linenumber" name="L532" href="#L532">532</a>         <a href="../../../../com/google/common/hash/HashFunction.html">HashFunction</a> hashFunction2 = (HashFunction) method.invoke(clazz, params2);
<a class="jxr_linenumber" name="L533" href="#L533">533</a> 
<a class="jxr_linenumber" name="L534" href="#L534">534</a>         <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/EqualsTester.html">EqualsTester</a>()
<a class="jxr_linenumber" name="L535" href="#L535">535</a>             .addEqualityGroup(hashFunction1a, hashFunction1b)
<a class="jxr_linenumber" name="L536" href="#L536">536</a>             .addEqualityGroup(hashFunction2)
<a class="jxr_linenumber" name="L537" href="#L537">537</a>             .testEquals();
<a class="jxr_linenumber" name="L538" href="#L538">538</a> 
<a class="jxr_linenumber" name="L539" href="#L539">539</a>         assertEquals(hashFunction1a.toString(), hashFunction1b.toString());
<a class="jxr_linenumber" name="L540" href="#L540">540</a>       }
<a class="jxr_linenumber" name="L541" href="#L541">541</a>     }
<a class="jxr_linenumber" name="L542" href="#L542">542</a>   }
<a class="jxr_linenumber" name="L543" href="#L543">543</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
