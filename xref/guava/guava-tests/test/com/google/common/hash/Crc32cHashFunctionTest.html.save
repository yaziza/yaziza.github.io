<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Crc32cHashFunctionTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/hash/Crc32cHashFunctionTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2011 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * in compliance with the License. You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software distributed under the License</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * or implied. See the License for the specific language governing permissions and limitations under</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * the License.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <strong class="jxr_keyword">package</strong> com.google.common.hash;
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Charsets.UTF_8;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <em class="jxr_javadoccomment"> * Unit tests for {@link Crc32c}. Known test values are from RFC 3720, Section B.4.</em>
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <em class="jxr_javadoccomment"> * @author Patrick Costello</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment"> * @author Kurt Alfred Kluever</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/hash/Crc32cHashFunctionTest.html">Crc32cHashFunctionTest</a> <strong class="jxr_keyword">extends</strong> TestCase {
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  
<a class="jxr_linenumber" name="L31" href="#L31">31</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testZeros() {
<a class="jxr_linenumber" name="L32" href="#L32">32</a>      <em class="jxr_comment">// Test 32 byte array of 0x00.</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>      byte[] zeros = <strong class="jxr_keyword">new</strong> byte[32];
<a class="jxr_linenumber" name="L34" href="#L34">34</a>      Arrays.fill(zeros, (byte) 0x00);
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      assertCrc(0x8a9136aa, zeros);
<a class="jxr_linenumber" name="L36" href="#L36">36</a>    }
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  
<a class="jxr_linenumber" name="L38" href="#L38">38</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testFull() {
<a class="jxr_linenumber" name="L39" href="#L39">39</a>      <em class="jxr_comment">// Test 32 byte array of 0xFF.</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>      byte[] fulls = <strong class="jxr_keyword">new</strong> byte[32];
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      Arrays.fill(fulls, (byte) 0xFF);
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      assertCrc(0x62a8ab43, fulls);
<a class="jxr_linenumber" name="L43" href="#L43">43</a>    }
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  
<a class="jxr_linenumber" name="L45" href="#L45">45</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAscending() {
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      <em class="jxr_comment">// Test 32 byte arrays of ascending.</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      byte[] ascending = <strong class="jxr_keyword">new</strong> byte[32];
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 32; i++) {
<a class="jxr_linenumber" name="L49" href="#L49">49</a>        ascending[i] = (byte) i;
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      }
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      assertCrc(0x46dd794e, ascending);
<a class="jxr_linenumber" name="L52" href="#L52">52</a>    }
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  
<a class="jxr_linenumber" name="L54" href="#L54">54</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDescending() {
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      <em class="jxr_comment">// Test 32 byte arrays of descending.</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      byte[] descending = <strong class="jxr_keyword">new</strong> byte[32];
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 32; i++) {
<a class="jxr_linenumber" name="L58" href="#L58">58</a>        descending[i] = (byte) (31 - i);
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      }
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      assertCrc(0x113fdb5c, descending);
<a class="jxr_linenumber" name="L61" href="#L61">61</a>    }
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  
<a class="jxr_linenumber" name="L63" href="#L63">63</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testScsiReadCommad() {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      <em class="jxr_comment">// Test SCSI read command.</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      byte[] scsiReadCommand = <strong class="jxr_keyword">new</strong> byte[] {
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          0x01, (byte) 0xc0, 0x00, 0x00,
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          0x00, 0x00, 0x00, 0x00,
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          0x00, 0x00, 0x00, 0x00,
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          0x00, 0x00, 0x00, 0x00,
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          0x14, 0x00, 0x00, 0x00,
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          0x00, 0x00, 0x04, 0x00,
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          0x00, 0x00, 0x00, 0x14,
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          0x00, 0x00, 0x00, 0x18,
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          0x28, 0x00, 0x00, 0x00,
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          0x00, 0x00, 0x00, 0x00,
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          0x02, 0x00, 0x00, 0x00,
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          0x00, 0x00, 0x00, 0x00 };
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      assertCrc(0xd9963a56, scsiReadCommand);
<a class="jxr_linenumber" name="L79" href="#L79">79</a>    }
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>    <em class="jxr_comment">// Known values from http://www.evanjones.ca/crc32c.html</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSomeOtherKnownValues() {
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      assertCrc(0x22620404, <span class="jxr_string">"The quick brown fox jumps over the lazy dog"</span>.getBytes(UTF_8));
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      assertCrc(0xE3069283, <span class="jxr_string">"123456789"</span>.getBytes(UTF_8));
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      assertCrc(0xf3dbd4fe, <span class="jxr_string">"1234567890"</span>.getBytes(UTF_8));
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      assertCrc(0xBFE92A83, <span class="jxr_string">"23456789"</span>.getBytes(UTF_8));
<a class="jxr_linenumber" name="L87" href="#L87">87</a>    }
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  
<a class="jxr_linenumber" name="L89" href="#L89">89</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment">   * Verfies that the crc of an array of byte data matches the expected value.</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment">   * @param expectedCrc the expected crc value.</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment">   * @param data the data to run the checksum on.</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> assertCrc(<strong class="jxr_keyword">int</strong> expectedCrc, byte[] data) {
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      <strong class="jxr_keyword">int</strong> actualCrc = Hashing.crc32c().hashBytes(data).asInt();
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      assertEquals(expectedCrc, actualCrc);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>    }
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  
<a class="jxr_linenumber" name="L100" href="#L100">100</a>   <em class="jxr_comment">// From RFC 3720, Section 12.1, the polynomial generator is 0x11EDC6F41.</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a>   <em class="jxr_comment">// We calculate the constant below by:</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a>   <em class="jxr_comment">//   1. Omitting the most significant bit (because it's always 1). =&gt; 0x1EDC6F41</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a>   <em class="jxr_comment">//   2. Flipping the bits of the constant so we can process a byte at a time. =&gt; 0x82F63B78</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> CRC32C_GENERATOR = 0x1EDC6F41;  <em class="jxr_comment">// 0x11EDC6F41</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> CRC32C_GENERATOR_FLIPPED = Integer.reverse(CRC32C_GENERATOR);
<a class="jxr_linenumber" name="L106" href="#L106">106</a> 
<a class="jxr_linenumber" name="L107" href="#L107">107</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCrc32cLookupTable() {
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     <em class="jxr_comment">// See Hacker's Delight 2nd Edition, Figure 14-7.</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     <strong class="jxr_keyword">int</strong>[] expected = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[256];
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; expected.length; i++) {
<a class="jxr_linenumber" name="L111" href="#L111">111</a>       <strong class="jxr_keyword">int</strong> crc = i;
<a class="jxr_linenumber" name="L112" href="#L112">112</a>       <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 7; j &gt;= 0; j--) {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <strong class="jxr_keyword">int</strong> mask = -(crc &amp; 1);
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         crc = ((crc &gt;&gt;&gt; 1) ^ (CRC32C_GENERATOR_FLIPPED &amp; mask));
<a class="jxr_linenumber" name="L115" href="#L115">115</a>       }
<a class="jxr_linenumber" name="L116" href="#L116">116</a>       expected[i] = crc;
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     }
<a class="jxr_linenumber" name="L118" href="#L118">118</a> 
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     <strong class="jxr_keyword">int</strong>[] actual = Crc32cHashFunction.Crc32cHasher.CRC_TABLE;
<a class="jxr_linenumber" name="L120" href="#L120">120</a>     assertTrue(
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         <span class="jxr_string">"Expected: \n"</span> + Arrays.toString(expected) + <span class="jxr_string">"\nActual:\n"</span> + Arrays.toString(actual),
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         Arrays.equals(expected, actual));
<a class="jxr_linenumber" name="L123" href="#L123">123</a>   }
<a class="jxr_linenumber" name="L124" href="#L124">124</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
