<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>MockFutureListener xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../../apidocs/com/google/common/util/concurrent/testing/MockFutureListener.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2008 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License"); you may not</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * use this file except in compliance with the License.  You may obtain a copy</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * License for the specific language governing permissions and limitations under</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.util.concurrent.testing;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.util.concurrent.MoreExecutors.directExecutor;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.Beta;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.common.util.concurrent.ListenableFuture;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> junit.framework.Assert;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.CountDownLatch;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.ExecutionException;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.TimeUnit;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * A simple mock implementation of {@code Runnable} that can be used for</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * testing ListenableFutures.</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * @author Nishant Thakkar</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * @since 10.0</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  @Beta
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../com/google/common/util/concurrent/testing/MockFutureListener.html">MockFutureListener</a> <strong class="jxr_keyword">implements</strong> Runnable {
<a class="jxr_linenumber" name="L39" href="#L39">39</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> CountDownLatch countDownLatch;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> ListenableFuture&lt;?&gt; future;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  
<a class="jxr_linenumber" name="L42" href="#L42">42</a>    <strong class="jxr_keyword">public</strong> <a href="../../../../../../com/google/common/util/concurrent/testing/MockFutureListener.html">MockFutureListener</a>(ListenableFuture&lt;?&gt; future) {
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <strong class="jxr_keyword">this</strong>.countDownLatch = <strong class="jxr_keyword">new</strong> CountDownLatch(1);
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <strong class="jxr_keyword">this</strong>.future = future;
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      future.addListener(<strong class="jxr_keyword">this</strong>, directExecutor());
<a class="jxr_linenumber" name="L47" href="#L47">47</a>    }
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  
<a class="jxr_linenumber" name="L49" href="#L49">49</a>    @Override
<a class="jxr_linenumber" name="L50" href="#L50">50</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> run() {
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      countDownLatch.countDown();
<a class="jxr_linenumber" name="L52" href="#L52">52</a>    }
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  
<a class="jxr_linenumber" name="L54" href="#L54">54</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">   * Verify that the listener completes in a reasonable amount of time, and</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment">   * Asserts that the future returns the expected data.</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment">   * @throws Throwable if the listener isn't called or if it resulted in a</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment">   *     throwable or if the result doesn't match the expected value.</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> assertSuccess(Object expectedData) <strong class="jxr_keyword">throws</strong> Throwable {
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      <em class="jxr_comment">// Verify that the listener executed in a reasonable amount of time.</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>      Assert.assertTrue(countDownLatch.await(1L, TimeUnit.SECONDS));
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L65" href="#L65">65</a>        Assert.assertEquals(expectedData, future.get());
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      } <strong class="jxr_keyword">catch</strong> (ExecutionException e) {
<a class="jxr_linenumber" name="L67" href="#L67">67</a>        <strong class="jxr_keyword">throw</strong> e.getCause();
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      }
<a class="jxr_linenumber" name="L69" href="#L69">69</a>    }
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  
<a class="jxr_linenumber" name="L71" href="#L71">71</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment">   * Verify that the listener completes in a reasonable amount of time, and</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">   * Asserts that the future throws an {@code ExecutableException} and that the</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">   * cause of the {@code ExecutableException} is {@code expectedCause}.</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> assertException(Throwable expectedCause) <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      <em class="jxr_comment">// Verify that the listener executed in a reasonable amount of time.</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      Assert.assertTrue(countDownLatch.await(1L, TimeUnit.SECONDS));
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L81" href="#L81">81</a>        future.get();
<a class="jxr_linenumber" name="L82" href="#L82">82</a>        Assert.fail(<span class="jxr_string">"This call was supposed to throw an ExecutionException"</span>);
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      } <strong class="jxr_keyword">catch</strong> (ExecutionException expected) {
<a class="jxr_linenumber" name="L84" href="#L84">84</a>        Assert.assertSame(expectedCause, expected.getCause());
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      }
<a class="jxr_linenumber" name="L86" href="#L86">86</a>    }
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> assertTimeout() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      <em class="jxr_comment">// Verify that the listener does not get called in a reasonable amount of</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      <em class="jxr_comment">// time.</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      Assert.assertFalse(countDownLatch.await(1L, TimeUnit.SECONDS));
<a class="jxr_linenumber" name="L92" href="#L92">92</a>    }
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
