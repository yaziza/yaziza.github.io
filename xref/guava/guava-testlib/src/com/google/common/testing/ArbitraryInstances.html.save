<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>ArbitraryInstances xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/testing/ArbitraryInstances.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2012 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.testing;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkArgument;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.Beta;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.CharMatcher;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Charsets;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Defaults;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Equivalence;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Joiner;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Optional;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Predicate;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Predicates;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Splitter;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Stopwatch;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> com.google.common.base.Ticker;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.BiMap;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ClassToInstanceMap;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableBiMap;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableClassToInstanceMap;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableCollection;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableList;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableListMultimap;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableMap;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableMultimap;
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableMultiset;
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableSet;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableSetMultimap;
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableSortedMap;
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableSortedMultiset;
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableSortedSet;
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ImmutableTable;
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Iterators;
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.ListMultimap;
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.MapConstraint;
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.MapConstraints;
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.MapDifference;
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Maps;
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Multimap;
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Multimaps;
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Multiset;
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Ordering;
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.PeekingIterator;
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Range;
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.RowSortedTable;
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.SetMultimap;
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Sets;
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.SortedMapDifference;
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.SortedMultiset;
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.SortedSetMultimap;
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Table;
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.Tables;
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.TreeBasedTable;
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.TreeMultimap;
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <strong class="jxr_keyword">import</strong> com.google.common.io.ByteSink;
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <strong class="jxr_keyword">import</strong> com.google.common.io.ByteSource;
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <strong class="jxr_keyword">import</strong> com.google.common.io.ByteStreams;
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <strong class="jxr_keyword">import</strong> com.google.common.io.CharSink;
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <strong class="jxr_keyword">import</strong> com.google.common.io.CharSource;
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <strong class="jxr_keyword">import</strong> com.google.common.primitives.Primitives;
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <strong class="jxr_keyword">import</strong> com.google.common.primitives.UnsignedInteger;
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <strong class="jxr_keyword">import</strong> com.google.common.primitives.UnsignedLong;
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <strong class="jxr_keyword">import</strong> java.io.ByteArrayInputStream;
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <strong class="jxr_keyword">import</strong> java.io.ByteArrayOutputStream;
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <strong class="jxr_keyword">import</strong> java.io.File;
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <strong class="jxr_keyword">import</strong> java.io.InputStream;
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <strong class="jxr_keyword">import</strong> java.io.OutputStream;
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <strong class="jxr_keyword">import</strong> java.io.PrintStream;
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <strong class="jxr_keyword">import</strong> java.io.PrintWriter;
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <strong class="jxr_keyword">import</strong> java.io.Reader;
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <strong class="jxr_keyword">import</strong> java.io.Serializable;
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <strong class="jxr_keyword">import</strong> java.io.StringReader;
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <strong class="jxr_keyword">import</strong> java.io.StringWriter;
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <strong class="jxr_keyword">import</strong> java.io.Writer;
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.AnnotatedElement;
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Array;
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Constructor;
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Field;
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.GenericDeclaration;
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.InvocationTargetException;
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Modifier;
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Type;
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <strong class="jxr_keyword">import</strong> java.math.BigDecimal;
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <strong class="jxr_keyword">import</strong> java.math.BigInteger;
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <strong class="jxr_keyword">import</strong> java.nio.Buffer;
<a class="jxr_linenumber" name="L103" href="#L103">103</a> <strong class="jxr_keyword">import</strong> java.nio.ByteBuffer;
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <strong class="jxr_keyword">import</strong> java.nio.CharBuffer;
<a class="jxr_linenumber" name="L105" href="#L105">105</a> <strong class="jxr_keyword">import</strong> java.nio.DoubleBuffer;
<a class="jxr_linenumber" name="L106" href="#L106">106</a> <strong class="jxr_keyword">import</strong> java.nio.FloatBuffer;
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <strong class="jxr_keyword">import</strong> java.nio.IntBuffer;
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <strong class="jxr_keyword">import</strong> java.nio.LongBuffer;
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <strong class="jxr_keyword">import</strong> java.nio.ShortBuffer;
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <strong class="jxr_keyword">import</strong> java.nio.charset.Charset;
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <strong class="jxr_keyword">import</strong> java.util.ArrayDeque;
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <strong class="jxr_keyword">import</strong> java.util.Comparator;
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <strong class="jxr_keyword">import</strong> java.util.Currency;
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <strong class="jxr_keyword">import</strong> java.util.Deque;
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <strong class="jxr_keyword">import</strong> java.util.Iterator;
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <strong class="jxr_keyword">import</strong> java.util.ListIterator;
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <strong class="jxr_keyword">import</strong> java.util.Locale;
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <strong class="jxr_keyword">import</strong> java.util.Map;
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <strong class="jxr_keyword">import</strong> java.util.NavigableMap;
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <strong class="jxr_keyword">import</strong> java.util.NavigableSet;
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <strong class="jxr_keyword">import</strong> java.util.Queue;
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <strong class="jxr_keyword">import</strong> java.util.Random;
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <strong class="jxr_keyword">import</strong> java.util.Set;
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <strong class="jxr_keyword">import</strong> java.util.SortedMap;
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <strong class="jxr_keyword">import</strong> java.util.SortedSet;
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.BlockingDeque;
<a class="jxr_linenumber" name="L130" href="#L130">130</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.BlockingQueue;
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.ConcurrentHashMap;
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.ConcurrentMap;
<a class="jxr_linenumber" name="L133" href="#L133">133</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.ConcurrentNavigableMap;
<a class="jxr_linenumber" name="L134" href="#L134">134</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.ConcurrentSkipListMap;
<a class="jxr_linenumber" name="L135" href="#L135">135</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.CountDownLatch;
<a class="jxr_linenumber" name="L136" href="#L136">136</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.Executor;
<a class="jxr_linenumber" name="L137" href="#L137">137</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.LinkedBlockingDeque;
<a class="jxr_linenumber" name="L138" href="#L138">138</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.ScheduledThreadPoolExecutor;
<a class="jxr_linenumber" name="L139" href="#L139">139</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.ThreadFactory;
<a class="jxr_linenumber" name="L140" href="#L140">140</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.ThreadPoolExecutor;
<a class="jxr_linenumber" name="L141" href="#L141">141</a> <strong class="jxr_keyword">import</strong> java.util.concurrent.TimeUnit;
<a class="jxr_linenumber" name="L142" href="#L142">142</a> <strong class="jxr_keyword">import</strong> java.util.logging.Level;
<a class="jxr_linenumber" name="L143" href="#L143">143</a> <strong class="jxr_keyword">import</strong> java.util.logging.Logger;
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <strong class="jxr_keyword">import</strong> java.util.regex.MatchResult;
<a class="jxr_linenumber" name="L145" href="#L145">145</a> <strong class="jxr_keyword">import</strong> java.util.regex.Matcher;
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <strong class="jxr_keyword">import</strong> java.util.regex.Pattern;
<a class="jxr_linenumber" name="L147" href="#L147">147</a> 
<a class="jxr_linenumber" name="L148" href="#L148">148</a> <strong class="jxr_keyword">import</strong> javax.annotation.Nullable;
<a class="jxr_linenumber" name="L149" href="#L149">149</a> 
<a class="jxr_linenumber" name="L150" href="#L150">150</a> <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a> <em class="jxr_javadoccomment"> * Supplies an arbitrary "default" instance for a wide range of types, often useful in testing</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment"> * utilities.</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment"> * </em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment"> * &lt;p&gt;Covers arrays, enums and common types defined in {@code java.lang}, {@code java.lang.reflect},</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment"> * {@code java.io}, {@code java.nio}, {@code java.math}, {@code java.util}, {@code</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment"> * java.util.concurrent}, {@code java.util.regex}, {@code com.google.common.base}, {@code</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a> <em class="jxr_javadoccomment"> * com.google.common.collect} and {@code com.google.common.primitives}. In addition, if the type</em>
<a class="jxr_linenumber" name="L158" href="#L158">158</a> <em class="jxr_javadoccomment"> * exposes at least one public static final constant of the same type, one of the constants will be</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a> <em class="jxr_javadoccomment"> * used; or if the class exposes a public parameter-less constructor then it will be "new"d and</em>
<a class="jxr_linenumber" name="L160" href="#L160">160</a> <em class="jxr_javadoccomment"> * returned.</em>
<a class="jxr_linenumber" name="L161" href="#L161">161</a> <em class="jxr_javadoccomment"> * </em>
<a class="jxr_linenumber" name="L162" href="#L162">162</a> <em class="jxr_javadoccomment"> * &lt;p&gt;All default instances returned by {@link #get} are generics-safe. Clients won't get type</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a> <em class="jxr_javadoccomment"> * errors for using {@code get(Comparator.class)} as a {@code Comparator&lt;Foo&gt;}, for example.</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a> <em class="jxr_javadoccomment"> * Immutable empty instances are returned for collection types; {@code ""} for string;</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a> <em class="jxr_javadoccomment"> * {@code 0} for number types; reasonable default instance for other stateless types. For mutable</em>
<a class="jxr_linenumber" name="L166" href="#L166">166</a> <em class="jxr_javadoccomment"> * types, a fresh instance is created each time {@code get()} is called.</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a> <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a> <em class="jxr_javadoccomment"> * @author Kevin Bourrillion</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a> <em class="jxr_javadoccomment"> * @author Ben Yu</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a> <em class="jxr_javadoccomment"> * @since 12.0</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a> <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a> @Beta
<a class="jxr_linenumber" name="L173" href="#L173">173</a> <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">ArbitraryInstances</a> {
<a class="jxr_linenumber" name="L174" href="#L174">174</a> 
<a class="jxr_linenumber" name="L175" href="#L175">175</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> Ordering&lt;Field&gt; BY_FIELD_NAME = <strong class="jxr_keyword">new</strong> Ordering&lt;Field&gt;() {
<a class="jxr_linenumber" name="L176" href="#L176">176</a>     @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> compare(Field left, Field right) {
<a class="jxr_linenumber" name="L177" href="#L177">177</a>       <strong class="jxr_keyword">return</strong> left.getName().compareTo(right.getName());
<a class="jxr_linenumber" name="L178" href="#L178">178</a>     }
<a class="jxr_linenumber" name="L179" href="#L179">179</a>   };
<a class="jxr_linenumber" name="L180" href="#L180">180</a> 
<a class="jxr_linenumber" name="L181" href="#L181">181</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L182" href="#L182">182</a> <em class="jxr_javadoccomment">   * Returns a new {@code MatchResult} that corresponds to a successful match. Apache Harmony (used</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a> <em class="jxr_javadoccomment">   * in Android) requires a successful match in order to generate a {@code MatchResult}:</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a> <em class="jxr_javadoccomment">   * <a href="http://goo.gl/5VQFm" target="alexandria_uri">http://goo.gl/5VQFm</a>C</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L186" href="#L186">186</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> MatchResult newMatchResult() {
<a class="jxr_linenumber" name="L187" href="#L187">187</a>     Matcher matcher = Pattern.compile(<span class="jxr_string">"."</span>).matcher(<span class="jxr_string">"X"</span>);
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     matcher.find();
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     <strong class="jxr_keyword">return</strong> matcher.toMatchResult();
<a class="jxr_linenumber" name="L190" href="#L190">190</a>   }
<a class="jxr_linenumber" name="L191" href="#L191">191</a> 
<a class="jxr_linenumber" name="L192" href="#L192">192</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ClassToInstanceMap&lt;Object&gt; DEFAULTS = ImmutableClassToInstanceMap.builder()
<a class="jxr_linenumber" name="L193" href="#L193">193</a>       <em class="jxr_comment">// primitives</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a>       .put(Object.<strong class="jxr_keyword">class</strong>, <span class="jxr_string">""</span>)
<a class="jxr_linenumber" name="L195" href="#L195">195</a>       .put(Number.<strong class="jxr_keyword">class</strong>, 0)
<a class="jxr_linenumber" name="L196" href="#L196">196</a>       .put(UnsignedInteger.<strong class="jxr_keyword">class</strong>, UnsignedInteger.ZERO)
<a class="jxr_linenumber" name="L197" href="#L197">197</a>       .put(UnsignedLong.<strong class="jxr_keyword">class</strong>, UnsignedLong.ZERO)
<a class="jxr_linenumber" name="L198" href="#L198">198</a>       .put(BigInteger.<strong class="jxr_keyword">class</strong>, BigInteger.ZERO)
<a class="jxr_linenumber" name="L199" href="#L199">199</a>       .put(BigDecimal.<strong class="jxr_keyword">class</strong>, BigDecimal.ZERO)
<a class="jxr_linenumber" name="L200" href="#L200">200</a>       .put(CharSequence.<strong class="jxr_keyword">class</strong>, <span class="jxr_string">""</span>)
<a class="jxr_linenumber" name="L201" href="#L201">201</a>       .put(String.<strong class="jxr_keyword">class</strong>, <span class="jxr_string">""</span>)
<a class="jxr_linenumber" name="L202" href="#L202">202</a>       .put(Pattern.<strong class="jxr_keyword">class</strong>, Pattern.compile(<span class="jxr_string">""</span>))
<a class="jxr_linenumber" name="L203" href="#L203">203</a>       .put(MatchResult.<strong class="jxr_keyword">class</strong>, newMatchResult())
<a class="jxr_linenumber" name="L204" href="#L204">204</a>       .put(TimeUnit.<strong class="jxr_keyword">class</strong>, TimeUnit.SECONDS)
<a class="jxr_linenumber" name="L205" href="#L205">205</a>       .put(Charset.<strong class="jxr_keyword">class</strong>, Charsets.UTF_8)
<a class="jxr_linenumber" name="L206" href="#L206">206</a>       .put(Currency.<strong class="jxr_keyword">class</strong>, Currency.getInstance(Locale.US))
<a class="jxr_linenumber" name="L207" href="#L207">207</a>       .put(Locale.<strong class="jxr_keyword">class</strong>, Locale.US)
<a class="jxr_linenumber" name="L208" href="#L208">208</a>       <em class="jxr_comment">// common.base</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a>       .put(CharMatcher.<strong class="jxr_keyword">class</strong>, CharMatcher.NONE)
<a class="jxr_linenumber" name="L210" href="#L210">210</a>       .put(Joiner.<strong class="jxr_keyword">class</strong>, Joiner.on(','))
<a class="jxr_linenumber" name="L211" href="#L211">211</a>       .put(Splitter.<strong class="jxr_keyword">class</strong>, Splitter.on(','))
<a class="jxr_linenumber" name="L212" href="#L212">212</a>       .put(Optional.<strong class="jxr_keyword">class</strong>, Optional.absent())
<a class="jxr_linenumber" name="L213" href="#L213">213</a>       .put(Predicate.<strong class="jxr_keyword">class</strong>, Predicates.alwaysTrue())
<a class="jxr_linenumber" name="L214" href="#L214">214</a>       .put(Equivalence.<strong class="jxr_keyword">class</strong>, Equivalence.equals())
<a class="jxr_linenumber" name="L215" href="#L215">215</a>       .put(Ticker.<strong class="jxr_keyword">class</strong>, Ticker.systemTicker())
<a class="jxr_linenumber" name="L216" href="#L216">216</a>       .put(Stopwatch.<strong class="jxr_keyword">class</strong>, Stopwatch.createUnstarted())
<a class="jxr_linenumber" name="L217" href="#L217">217</a>       <em class="jxr_comment">// io types</em>
<a class="jxr_linenumber" name="L218" href="#L218">218</a>       .put(InputStream.<strong class="jxr_keyword">class</strong>, <strong class="jxr_keyword">new</strong> ByteArrayInputStream(<strong class="jxr_keyword">new</strong> byte[0]))
<a class="jxr_linenumber" name="L219" href="#L219">219</a>       .put(ByteArrayInputStream.<strong class="jxr_keyword">class</strong>, <strong class="jxr_keyword">new</strong> ByteArrayInputStream(<strong class="jxr_keyword">new</strong> byte[0]))
<a class="jxr_linenumber" name="L220" href="#L220">220</a>       .put(Readable.<strong class="jxr_keyword">class</strong>, <strong class="jxr_keyword">new</strong> StringReader(<span class="jxr_string">""</span>))
<a class="jxr_linenumber" name="L221" href="#L221">221</a>       .put(Reader.<strong class="jxr_keyword">class</strong>, <strong class="jxr_keyword">new</strong> StringReader(<span class="jxr_string">""</span>))
<a class="jxr_linenumber" name="L222" href="#L222">222</a>       .put(StringReader.<strong class="jxr_keyword">class</strong>, <strong class="jxr_keyword">new</strong> StringReader(<span class="jxr_string">""</span>))
<a class="jxr_linenumber" name="L223" href="#L223">223</a>       .put(Buffer.<strong class="jxr_keyword">class</strong>, ByteBuffer.allocate(0))
<a class="jxr_linenumber" name="L224" href="#L224">224</a>       .put(CharBuffer.<strong class="jxr_keyword">class</strong>, CharBuffer.allocate(0))
<a class="jxr_linenumber" name="L225" href="#L225">225</a>       .put(ByteBuffer.<strong class="jxr_keyword">class</strong>, ByteBuffer.allocate(0))
<a class="jxr_linenumber" name="L226" href="#L226">226</a>       .put(ShortBuffer.<strong class="jxr_keyword">class</strong>, ShortBuffer.allocate(0))
<a class="jxr_linenumber" name="L227" href="#L227">227</a>       .put(IntBuffer.<strong class="jxr_keyword">class</strong>, IntBuffer.allocate(0))
<a class="jxr_linenumber" name="L228" href="#L228">228</a>       .put(LongBuffer.<strong class="jxr_keyword">class</strong>, LongBuffer.allocate(0))
<a class="jxr_linenumber" name="L229" href="#L229">229</a>       .put(FloatBuffer.<strong class="jxr_keyword">class</strong>, FloatBuffer.allocate(0))
<a class="jxr_linenumber" name="L230" href="#L230">230</a>       .put(DoubleBuffer.<strong class="jxr_keyword">class</strong>, DoubleBuffer.allocate(0))
<a class="jxr_linenumber" name="L231" href="#L231">231</a>       .put(File.<strong class="jxr_keyword">class</strong>, <strong class="jxr_keyword">new</strong> File(<span class="jxr_string">""</span>))
<a class="jxr_linenumber" name="L232" href="#L232">232</a>       .put(ByteSource.<strong class="jxr_keyword">class</strong>, ByteSource.empty())
<a class="jxr_linenumber" name="L233" href="#L233">233</a>       .put(CharSource.<strong class="jxr_keyword">class</strong>, CharSource.empty())
<a class="jxr_linenumber" name="L234" href="#L234">234</a>       .put(ByteSink.<strong class="jxr_keyword">class</strong>, NullByteSink.INSTANCE)
<a class="jxr_linenumber" name="L235" href="#L235">235</a>       .put(CharSink.<strong class="jxr_keyword">class</strong>, NullByteSink.INSTANCE.asCharSink(Charsets.UTF_8))
<a class="jxr_linenumber" name="L236" href="#L236">236</a>       <em class="jxr_comment">// All collections are immutable empty. So safe for any type parameter.</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a>       .put(Iterator.<strong class="jxr_keyword">class</strong>, ImmutableSet.of().iterator())
<a class="jxr_linenumber" name="L238" href="#L238">238</a>       .put(PeekingIterator.<strong class="jxr_keyword">class</strong>, Iterators.peekingIterator(Iterators.emptyIterator()))
<a class="jxr_linenumber" name="L239" href="#L239">239</a>       .put(ListIterator.<strong class="jxr_keyword">class</strong>, ImmutableList.of().listIterator())
<a class="jxr_linenumber" name="L240" href="#L240">240</a>       .put(Iterable.<strong class="jxr_keyword">class</strong>, ImmutableSet.of())
<a class="jxr_linenumber" name="L241" href="#L241">241</a>       .put(Collection.<strong class="jxr_keyword">class</strong>, ImmutableList.of())
<a class="jxr_linenumber" name="L242" href="#L242">242</a>       .put(ImmutableCollection.<strong class="jxr_keyword">class</strong>, ImmutableList.of())
<a class="jxr_linenumber" name="L243" href="#L243">243</a>       .put(List.<strong class="jxr_keyword">class</strong>, ImmutableList.of())
<a class="jxr_linenumber" name="L244" href="#L244">244</a>       .put(ImmutableList.<strong class="jxr_keyword">class</strong>, ImmutableList.of())
<a class="jxr_linenumber" name="L245" href="#L245">245</a>       .put(Set.<strong class="jxr_keyword">class</strong>, ImmutableSet.of())
<a class="jxr_linenumber" name="L246" href="#L246">246</a>       .put(ImmutableSet.<strong class="jxr_keyword">class</strong>, ImmutableSet.of())
<a class="jxr_linenumber" name="L247" href="#L247">247</a>       .put(SortedSet.<strong class="jxr_keyword">class</strong>, ImmutableSortedSet.of())
<a class="jxr_linenumber" name="L248" href="#L248">248</a>       .put(ImmutableSortedSet.<strong class="jxr_keyword">class</strong>, ImmutableSortedSet.of())
<a class="jxr_linenumber" name="L249" href="#L249">249</a>       .put(NavigableSet.<strong class="jxr_keyword">class</strong>, Sets.unmodifiableNavigableSet(Sets.newTreeSet()))
<a class="jxr_linenumber" name="L250" href="#L250">250</a>       .put(Map.<strong class="jxr_keyword">class</strong>, ImmutableMap.of())
<a class="jxr_linenumber" name="L251" href="#L251">251</a>       .put(ImmutableMap.<strong class="jxr_keyword">class</strong>, ImmutableMap.of())
<a class="jxr_linenumber" name="L252" href="#L252">252</a>       .put(SortedMap.<strong class="jxr_keyword">class</strong>, ImmutableSortedMap.of())
<a class="jxr_linenumber" name="L253" href="#L253">253</a>       .put(ImmutableSortedMap.<strong class="jxr_keyword">class</strong>, ImmutableSortedMap.of())
<a class="jxr_linenumber" name="L254" href="#L254">254</a>       .put(NavigableMap.<strong class="jxr_keyword">class</strong>, Maps.unmodifiableNavigableMap(Maps.newTreeMap()))
<a class="jxr_linenumber" name="L255" href="#L255">255</a>       .put(Multimap.<strong class="jxr_keyword">class</strong>, ImmutableMultimap.of())
<a class="jxr_linenumber" name="L256" href="#L256">256</a>       .put(ImmutableMultimap.<strong class="jxr_keyword">class</strong>, ImmutableMultimap.of())
<a class="jxr_linenumber" name="L257" href="#L257">257</a>       .put(ListMultimap.<strong class="jxr_keyword">class</strong>, ImmutableListMultimap.of())
<a class="jxr_linenumber" name="L258" href="#L258">258</a>       .put(ImmutableListMultimap.<strong class="jxr_keyword">class</strong>, ImmutableListMultimap.of())
<a class="jxr_linenumber" name="L259" href="#L259">259</a>       .put(SetMultimap.<strong class="jxr_keyword">class</strong>, ImmutableSetMultimap.of())
<a class="jxr_linenumber" name="L260" href="#L260">260</a>       .put(ImmutableSetMultimap.<strong class="jxr_keyword">class</strong>, ImmutableSetMultimap.of())
<a class="jxr_linenumber" name="L261" href="#L261">261</a>       .put(SortedSetMultimap.<strong class="jxr_keyword">class</strong>, Multimaps.unmodifiableSortedSetMultimap(TreeMultimap.create()))
<a class="jxr_linenumber" name="L262" href="#L262">262</a>       .put(Multiset.<strong class="jxr_keyword">class</strong>, ImmutableMultiset.of())
<a class="jxr_linenumber" name="L263" href="#L263">263</a>       .put(ImmutableMultiset.<strong class="jxr_keyword">class</strong>, ImmutableMultiset.of())
<a class="jxr_linenumber" name="L264" href="#L264">264</a>       .put(SortedMultiset.<strong class="jxr_keyword">class</strong>, ImmutableSortedMultiset.of())
<a class="jxr_linenumber" name="L265" href="#L265">265</a>       .put(ImmutableSortedMultiset.<strong class="jxr_keyword">class</strong>, ImmutableSortedMultiset.of())
<a class="jxr_linenumber" name="L266" href="#L266">266</a>       .put(BiMap.<strong class="jxr_keyword">class</strong>, ImmutableBiMap.of())
<a class="jxr_linenumber" name="L267" href="#L267">267</a>       .put(ImmutableBiMap.<strong class="jxr_keyword">class</strong>, ImmutableBiMap.of())
<a class="jxr_linenumber" name="L268" href="#L268">268</a>       .put(Table.<strong class="jxr_keyword">class</strong>, ImmutableTable.of())
<a class="jxr_linenumber" name="L269" href="#L269">269</a>       .put(ImmutableTable.<strong class="jxr_keyword">class</strong>, ImmutableTable.of())
<a class="jxr_linenumber" name="L270" href="#L270">270</a>       .put(RowSortedTable.<strong class="jxr_keyword">class</strong>, Tables.unmodifiableRowSortedTable(TreeBasedTable.create()))
<a class="jxr_linenumber" name="L271" href="#L271">271</a>       .put(ClassToInstanceMap.<strong class="jxr_keyword">class</strong>, ImmutableClassToInstanceMap.builder().build())
<a class="jxr_linenumber" name="L272" href="#L272">272</a>       .put(ImmutableClassToInstanceMap.<strong class="jxr_keyword">class</strong>, ImmutableClassToInstanceMap.builder().build())
<a class="jxr_linenumber" name="L273" href="#L273">273</a>       .put(Comparable.<strong class="jxr_keyword">class</strong>, ByToString.INSTANCE)
<a class="jxr_linenumber" name="L274" href="#L274">274</a>       .put(Comparator.<strong class="jxr_keyword">class</strong>, AlwaysEqual.INSTANCE)
<a class="jxr_linenumber" name="L275" href="#L275">275</a>       .put(Ordering.<strong class="jxr_keyword">class</strong>, AlwaysEqual.INSTANCE)
<a class="jxr_linenumber" name="L276" href="#L276">276</a>       .put(Range.<strong class="jxr_keyword">class</strong>, Range.all())
<a class="jxr_linenumber" name="L277" href="#L277">277</a>       .put(MapConstraint.<strong class="jxr_keyword">class</strong>, MapConstraints.notNull())
<a class="jxr_linenumber" name="L278" href="#L278">278</a>       .put(MapDifference.<strong class="jxr_keyword">class</strong>, Maps.difference(ImmutableMap.of(), ImmutableMap.of()))
<a class="jxr_linenumber" name="L279" href="#L279">279</a>       .put(SortedMapDifference.<strong class="jxr_keyword">class</strong>,
<a class="jxr_linenumber" name="L280" href="#L280">280</a>           Maps.difference(ImmutableSortedMap.of(), ImmutableSortedMap.of()))
<a class="jxr_linenumber" name="L281" href="#L281">281</a>       <em class="jxr_comment">// reflect</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a>       .put(AnnotatedElement.<strong class="jxr_keyword">class</strong>, Object.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L283" href="#L283">283</a>       .put(GenericDeclaration.<strong class="jxr_keyword">class</strong>, Object.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L284" href="#L284">284</a>       .put(Type.<strong class="jxr_keyword">class</strong>, Object.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L285" href="#L285">285</a>       .build();
<a class="jxr_linenumber" name="L286" href="#L286">286</a> 
<a class="jxr_linenumber" name="L287" href="#L287">287</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L288" href="#L288">288</a> <em class="jxr_javadoccomment">   * type -&gt; implementation. Inherently mutable interfaces and abstract classes are mapped to their</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> <em class="jxr_javadoccomment">   * default implementations and are "new"d upon get().</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L291" href="#L291">291</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> ConcurrentMap&lt;Class&lt;?&gt;, Class&lt;?&gt;&gt; implementations = Maps.newConcurrentMap();
<a class="jxr_linenumber" name="L292" href="#L292">292</a> 
<a class="jxr_linenumber" name="L293" href="#L293">293</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; <strong class="jxr_keyword">void</strong> setImplementation(Class&lt;T&gt; type, Class&lt;? <strong class="jxr_keyword">extends</strong> T&gt; implementation) {
<a class="jxr_linenumber" name="L294" href="#L294">294</a>     checkArgument(type != implementation, <span class="jxr_string">"Don't register %s to itself!"</span>, type);
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     checkArgument(!DEFAULTS.containsKey(type),
<a class="jxr_linenumber" name="L296" href="#L296">296</a>         <span class="jxr_string">"A default value was already registered for %s"</span>, type);
<a class="jxr_linenumber" name="L297" href="#L297">297</a>     checkArgument(implementations.put(type, implementation) == <strong class="jxr_keyword">null</strong>,
<a class="jxr_linenumber" name="L298" href="#L298">298</a>         <span class="jxr_string">"Implementation for %s was already registered"</span>, type);
<a class="jxr_linenumber" name="L299" href="#L299">299</a>   }
<a class="jxr_linenumber" name="L300" href="#L300">300</a> 
<a class="jxr_linenumber" name="L301" href="#L301">301</a>   <strong class="jxr_keyword">static</strong> {
<a class="jxr_linenumber" name="L302" href="#L302">302</a>     setImplementation(Appendable.<strong class="jxr_keyword">class</strong>, StringBuilder.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     setImplementation(BlockingQueue.<strong class="jxr_keyword">class</strong>, LinkedBlockingDeque.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L304" href="#L304">304</a>     setImplementation(BlockingDeque.<strong class="jxr_keyword">class</strong>, LinkedBlockingDeque.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L305" href="#L305">305</a>     setImplementation(ConcurrentMap.<strong class="jxr_keyword">class</strong>, ConcurrentHashMap.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L306" href="#L306">306</a>     setImplementation(ConcurrentNavigableMap.<strong class="jxr_keyword">class</strong>, ConcurrentSkipListMap.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L307" href="#L307">307</a>     setImplementation(CountDownLatch.<strong class="jxr_keyword">class</strong>, Dummies.DummyCountDownLatch.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L308" href="#L308">308</a>     setImplementation(Deque.<strong class="jxr_keyword">class</strong>, ArrayDeque.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L309" href="#L309">309</a>     setImplementation(OutputStream.<strong class="jxr_keyword">class</strong>, ByteArrayOutputStream.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L310" href="#L310">310</a>     setImplementation(PrintStream.<strong class="jxr_keyword">class</strong>, Dummies.InMemoryPrintStream.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L311" href="#L311">311</a>     setImplementation(PrintWriter.<strong class="jxr_keyword">class</strong>, Dummies.InMemoryPrintWriter.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L312" href="#L312">312</a>     setImplementation(Queue.<strong class="jxr_keyword">class</strong>, ArrayDeque.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L313" href="#L313">313</a>     setImplementation(Random.<strong class="jxr_keyword">class</strong>, Dummies.DeterministicRandom.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L314" href="#L314">314</a>     setImplementation(ScheduledThreadPoolExecutor.<strong class="jxr_keyword">class</strong>,
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         Dummies.DummyScheduledThreadPoolExecutor.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L316" href="#L316">316</a>     setImplementation(ThreadPoolExecutor.<strong class="jxr_keyword">class</strong>, Dummies.DummyScheduledThreadPoolExecutor.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L317" href="#L317">317</a>     setImplementation(Writer.<strong class="jxr_keyword">class</strong>, StringWriter.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L318" href="#L318">318</a>     setImplementation(Runnable.<strong class="jxr_keyword">class</strong>, Dummies.DummyRunnable.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L319" href="#L319">319</a>     setImplementation(ThreadFactory.<strong class="jxr_keyword">class</strong>, Dummies.DummyThreadFactory.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L320" href="#L320">320</a>     setImplementation(Executor.<strong class="jxr_keyword">class</strong>, Dummies.DummyExecutor.<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L321" href="#L321">321</a>   }
<a class="jxr_linenumber" name="L322" href="#L322">322</a> 
<a class="jxr_linenumber" name="L323" href="#L323">323</a>   @SuppressWarnings(<span class="jxr_string">"unchecked"</span>) <em class="jxr_comment">// it's a subtype map</em>
<a class="jxr_linenumber" name="L324" href="#L324">324</a>   @Nullable
<a class="jxr_linenumber" name="L325" href="#L325">325</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Class&lt;? <strong class="jxr_keyword">extends</strong> T&gt; getImplementation(Class&lt;T&gt; type) {
<a class="jxr_linenumber" name="L326" href="#L326">326</a>     <strong class="jxr_keyword">return</strong> (Class&lt;? <strong class="jxr_keyword">extends</strong> T&gt;) implementations.get(type);
<a class="jxr_linenumber" name="L327" href="#L327">327</a>   }
<a class="jxr_linenumber" name="L328" href="#L328">328</a> 
<a class="jxr_linenumber" name="L329" href="#L329">329</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> Logger logger = Logger.getLogger(ArbitraryInstances.<strong class="jxr_keyword">class</strong>.getName());
<a class="jxr_linenumber" name="L330" href="#L330">330</a> 
<a class="jxr_linenumber" name="L331" href="#L331">331</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L332" href="#L332">332</a> <em class="jxr_javadoccomment">   * Returns an arbitrary instance for {@code type}, or {@code null} if no arbitrary instance can</em>
<a class="jxr_linenumber" name="L333" href="#L333">333</a> <em class="jxr_javadoccomment">   * be determined.</em>
<a class="jxr_linenumber" name="L334" href="#L334">334</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L335" href="#L335">335</a>   @Nullable <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T get(Class&lt;T&gt; type) {
<a class="jxr_linenumber" name="L336" href="#L336">336</a>     T defaultValue = DEFAULTS.getInstance(type);
<a class="jxr_linenumber" name="L337" href="#L337">337</a>     <strong class="jxr_keyword">if</strong> (defaultValue != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L338" href="#L338">338</a>       <strong class="jxr_keyword">return</strong> defaultValue;
<a class="jxr_linenumber" name="L339" href="#L339">339</a>     }
<a class="jxr_linenumber" name="L340" href="#L340">340</a>     Class&lt;? <strong class="jxr_keyword">extends</strong> T&gt; implementation = getImplementation(type);
<a class="jxr_linenumber" name="L341" href="#L341">341</a>     <strong class="jxr_keyword">if</strong> (implementation != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L342" href="#L342">342</a>       <strong class="jxr_keyword">return</strong> get(implementation);
<a class="jxr_linenumber" name="L343" href="#L343">343</a>     }
<a class="jxr_linenumber" name="L344" href="#L344">344</a>     <strong class="jxr_keyword">if</strong> (type.isEnum()) {
<a class="jxr_linenumber" name="L345" href="#L345">345</a>       T[] enumConstants = type.getEnumConstants();
<a class="jxr_linenumber" name="L346" href="#L346">346</a>       <strong class="jxr_keyword">return</strong> (enumConstants.length == 0)
<a class="jxr_linenumber" name="L347" href="#L347">347</a>           ? <strong class="jxr_keyword">null</strong>
<a class="jxr_linenumber" name="L348" href="#L348">348</a>           : enumConstants[0];
<a class="jxr_linenumber" name="L349" href="#L349">349</a>     }
<a class="jxr_linenumber" name="L350" href="#L350">350</a>     <strong class="jxr_keyword">if</strong> (type.isArray()) {
<a class="jxr_linenumber" name="L351" href="#L351">351</a>       <strong class="jxr_keyword">return</strong> createEmptyArray(type);
<a class="jxr_linenumber" name="L352" href="#L352">352</a>     }
<a class="jxr_linenumber" name="L353" href="#L353">353</a>     T jvmDefault = Defaults.defaultValue(Primitives.unwrap(type));
<a class="jxr_linenumber" name="L354" href="#L354">354</a>     <strong class="jxr_keyword">if</strong> (jvmDefault != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L355" href="#L355">355</a>       <strong class="jxr_keyword">return</strong> jvmDefault;
<a class="jxr_linenumber" name="L356" href="#L356">356</a>     }
<a class="jxr_linenumber" name="L357" href="#L357">357</a>     <strong class="jxr_keyword">if</strong> (Modifier.isAbstract(type.getModifiers()) || !Modifier.isPublic(type.getModifiers())) {
<a class="jxr_linenumber" name="L358" href="#L358">358</a>       <strong class="jxr_keyword">return</strong> arbitraryConstantInstanceOrNull(type);
<a class="jxr_linenumber" name="L359" href="#L359">359</a>     }
<a class="jxr_linenumber" name="L360" href="#L360">360</a>     <strong class="jxr_keyword">final</strong> Constructor&lt;T&gt; constructor;
<a class="jxr_linenumber" name="L361" href="#L361">361</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L362" href="#L362">362</a>       constructor = type.getConstructor();
<a class="jxr_linenumber" name="L363" href="#L363">363</a>     } <strong class="jxr_keyword">catch</strong> (NoSuchMethodException e) {
<a class="jxr_linenumber" name="L364" href="#L364">364</a>       <strong class="jxr_keyword">return</strong> arbitraryConstantInstanceOrNull(type);
<a class="jxr_linenumber" name="L365" href="#L365">365</a>     }
<a class="jxr_linenumber" name="L366" href="#L366">366</a>     constructor.setAccessible(<strong class="jxr_keyword">true</strong>); <em class="jxr_comment">// accessibility check is too slow</em>
<a class="jxr_linenumber" name="L367" href="#L367">367</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L368" href="#L368">368</a>       <strong class="jxr_keyword">return</strong> constructor.newInstance();
<a class="jxr_linenumber" name="L369" href="#L369">369</a>     } <strong class="jxr_keyword">catch</strong> (InstantiationException impossible) {
<a class="jxr_linenumber" name="L370" href="#L370">370</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionError(impossible);
<a class="jxr_linenumber" name="L371" href="#L371">371</a>     } <strong class="jxr_keyword">catch</strong> (IllegalAccessException impossible) {
<a class="jxr_linenumber" name="L372" href="#L372">372</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionError(impossible);
<a class="jxr_linenumber" name="L373" href="#L373">373</a>     } <strong class="jxr_keyword">catch</strong> (InvocationTargetException e) {
<a class="jxr_linenumber" name="L374" href="#L374">374</a>       logger.log(Level.WARNING, <span class="jxr_string">"Exception while invoking default constructor."</span>, e.getCause());
<a class="jxr_linenumber" name="L375" href="#L375">375</a>       <strong class="jxr_keyword">return</strong> arbitraryConstantInstanceOrNull(type);
<a class="jxr_linenumber" name="L376" href="#L376">376</a>     }
<a class="jxr_linenumber" name="L377" href="#L377">377</a>   }
<a class="jxr_linenumber" name="L378" href="#L378">378</a> 
<a class="jxr_linenumber" name="L379" href="#L379">379</a>   @Nullable <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T arbitraryConstantInstanceOrNull(Class&lt;T&gt; type) {
<a class="jxr_linenumber" name="L380" href="#L380">380</a>     Field[] fields = type.getDeclaredFields();
<a class="jxr_linenumber" name="L381" href="#L381">381</a>     Arrays.sort(fields, BY_FIELD_NAME);
<a class="jxr_linenumber" name="L382" href="#L382">382</a>     <strong class="jxr_keyword">for</strong> (Field field : fields) {
<a class="jxr_linenumber" name="L383" href="#L383">383</a>       <strong class="jxr_keyword">if</strong> (Modifier.isPublic(field.getModifiers())
<a class="jxr_linenumber" name="L384" href="#L384">384</a>           &amp;&amp; Modifier.isStatic(field.getModifiers())
<a class="jxr_linenumber" name="L385" href="#L385">385</a>           &amp;&amp; Modifier.isFinal(field.getModifiers())) {
<a class="jxr_linenumber" name="L386" href="#L386">386</a>         <strong class="jxr_keyword">if</strong> (field.getGenericType() == field.getType()
<a class="jxr_linenumber" name="L387" href="#L387">387</a>             &amp;&amp; type.isAssignableFrom(field.getType())) {
<a class="jxr_linenumber" name="L388" href="#L388">388</a>           field.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L389" href="#L389">389</a>           <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L390" href="#L390">390</a>             T constant = type.<strong class="jxr_keyword">cast</strong>(field.get(<strong class="jxr_keyword">null</strong>));
<a class="jxr_linenumber" name="L391" href="#L391">391</a>             <strong class="jxr_keyword">if</strong> (constant != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L392" href="#L392">392</a>               <strong class="jxr_keyword">return</strong> constant;
<a class="jxr_linenumber" name="L393" href="#L393">393</a>             }
<a class="jxr_linenumber" name="L394" href="#L394">394</a>           } <strong class="jxr_keyword">catch</strong> (IllegalAccessException impossible) {
<a class="jxr_linenumber" name="L395" href="#L395">395</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionError(impossible);
<a class="jxr_linenumber" name="L396" href="#L396">396</a>           }
<a class="jxr_linenumber" name="L397" href="#L397">397</a>         }
<a class="jxr_linenumber" name="L398" href="#L398">398</a>       }
<a class="jxr_linenumber" name="L399" href="#L399">399</a>     }
<a class="jxr_linenumber" name="L400" href="#L400">400</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L401" href="#L401">401</a>   }
<a class="jxr_linenumber" name="L402" href="#L402">402</a> 
<a class="jxr_linenumber" name="L403" href="#L403">403</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; T createEmptyArray(Class&lt;T&gt; arrayType) {
<a class="jxr_linenumber" name="L404" href="#L404">404</a>     <strong class="jxr_keyword">return</strong> arrayType.<strong class="jxr_keyword">cast</strong>(Array.newInstance(arrayType.getComponentType(), 0));
<a class="jxr_linenumber" name="L405" href="#L405">405</a>   }
<a class="jxr_linenumber" name="L406" href="#L406">406</a> 
<a class="jxr_linenumber" name="L407" href="#L407">407</a>   <em class="jxr_comment">// Internal implementations of some classes, with public default constructor that get() needs.</em>
<a class="jxr_linenumber" name="L408" href="#L408">408</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">Dummies</a> {
<a class="jxr_linenumber" name="L409" href="#L409">409</a> 
<a class="jxr_linenumber" name="L410" href="#L410">410</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">InMemoryPrintStream</a> <strong class="jxr_keyword">extends</strong> PrintStream {
<a class="jxr_linenumber" name="L411" href="#L411">411</a>       <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">InMemoryPrintStream</a>() {
<a class="jxr_linenumber" name="L412" href="#L412">412</a>         <strong class="jxr_keyword">super</strong>(<strong class="jxr_keyword">new</strong> ByteArrayOutputStream());
<a class="jxr_linenumber" name="L413" href="#L413">413</a>       }
<a class="jxr_linenumber" name="L414" href="#L414">414</a>     }
<a class="jxr_linenumber" name="L415" href="#L415">415</a> 
<a class="jxr_linenumber" name="L416" href="#L416">416</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">InMemoryPrintWriter</a> <strong class="jxr_keyword">extends</strong> PrintWriter {
<a class="jxr_linenumber" name="L417" href="#L417">417</a>       <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">InMemoryPrintWriter</a>() {
<a class="jxr_linenumber" name="L418" href="#L418">418</a>         <strong class="jxr_keyword">super</strong>(<strong class="jxr_keyword">new</strong> StringWriter());
<a class="jxr_linenumber" name="L419" href="#L419">419</a>       }
<a class="jxr_linenumber" name="L420" href="#L420">420</a>     }
<a class="jxr_linenumber" name="L421" href="#L421">421</a> 
<a class="jxr_linenumber" name="L422" href="#L422">422</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">DeterministicRandom</a> <strong class="jxr_keyword">extends</strong> Random {
<a class="jxr_linenumber" name="L423" href="#L423">423</a>       @SuppressWarnings(<span class="jxr_string">"unused"</span>) <em class="jxr_comment">// invoked by reflection</em>
<a class="jxr_linenumber" name="L424" href="#L424">424</a>       <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">DeterministicRandom</a>() {
<a class="jxr_linenumber" name="L425" href="#L425">425</a>         <strong class="jxr_keyword">super</strong>(0);
<a class="jxr_linenumber" name="L426" href="#L426">426</a>       }
<a class="jxr_linenumber" name="L427" href="#L427">427</a>     }
<a class="jxr_linenumber" name="L428" href="#L428">428</a> 
<a class="jxr_linenumber" name="L429" href="#L429">429</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">DummyScheduledThreadPoolExecutor</a> <strong class="jxr_keyword">extends</strong> ScheduledThreadPoolExecutor {
<a class="jxr_linenumber" name="L430" href="#L430">430</a>       <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">DummyScheduledThreadPoolExecutor</a>() {
<a class="jxr_linenumber" name="L431" href="#L431">431</a>         <strong class="jxr_keyword">super</strong>(1);
<a class="jxr_linenumber" name="L432" href="#L432">432</a>       }
<a class="jxr_linenumber" name="L433" href="#L433">433</a>     }
<a class="jxr_linenumber" name="L434" href="#L434">434</a> 
<a class="jxr_linenumber" name="L435" href="#L435">435</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">DummyCountDownLatch</a> <strong class="jxr_keyword">extends</strong> CountDownLatch {
<a class="jxr_linenumber" name="L436" href="#L436">436</a>       <strong class="jxr_keyword">public</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">DummyCountDownLatch</a>() {
<a class="jxr_linenumber" name="L437" href="#L437">437</a>         <strong class="jxr_keyword">super</strong>(0);
<a class="jxr_linenumber" name="L438" href="#L438">438</a>       }
<a class="jxr_linenumber" name="L439" href="#L439">439</a>     }
<a class="jxr_linenumber" name="L440" href="#L440">440</a> 
<a class="jxr_linenumber" name="L441" href="#L441">441</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">DummyRunnable</a> <strong class="jxr_keyword">implements</strong> Runnable, Serializable {
<a class="jxr_linenumber" name="L442" href="#L442">442</a>       @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> run() {}
<a class="jxr_linenumber" name="L443" href="#L443">443</a>     }
<a class="jxr_linenumber" name="L444" href="#L444">444</a> 
<a class="jxr_linenumber" name="L445" href="#L445">445</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">DummyThreadFactory</a> <strong class="jxr_keyword">implements</strong> ThreadFactory, Serializable {
<a class="jxr_linenumber" name="L446" href="#L446">446</a>       @Override <strong class="jxr_keyword">public</strong> Thread newThread(Runnable r) {
<a class="jxr_linenumber" name="L447" href="#L447">447</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Thread(r);
<a class="jxr_linenumber" name="L448" href="#L448">448</a>       }
<a class="jxr_linenumber" name="L449" href="#L449">449</a>     }
<a class="jxr_linenumber" name="L450" href="#L450">450</a> 
<a class="jxr_linenumber" name="L451" href="#L451">451</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">DummyExecutor</a> <strong class="jxr_keyword">implements</strong> Executor, Serializable {
<a class="jxr_linenumber" name="L452" href="#L452">452</a>       @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> execute(Runnable command) {}
<a class="jxr_linenumber" name="L453" href="#L453">453</a>     }
<a class="jxr_linenumber" name="L454" href="#L454">454</a>   }
<a class="jxr_linenumber" name="L455" href="#L455">455</a> 
<a class="jxr_linenumber" name="L456" href="#L456">456</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">NullByteSink</a> <strong class="jxr_keyword">extends</strong> <a href="../../../../com/google/common/io/ByteSink.html">ByteSink</a> <strong class="jxr_keyword">implements</strong> Serializable {
<a class="jxr_linenumber" name="L457" href="#L457">457</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">NullByteSink</a> INSTANCE = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">NullByteSink</a>();
<a class="jxr_linenumber" name="L458" href="#L458">458</a> 
<a class="jxr_linenumber" name="L459" href="#L459">459</a>     @Override <strong class="jxr_keyword">public</strong> OutputStream openStream() {
<a class="jxr_linenumber" name="L460" href="#L460">460</a>       <strong class="jxr_keyword">return</strong> ByteStreams.nullOutputStream();
<a class="jxr_linenumber" name="L461" href="#L461">461</a>     }
<a class="jxr_linenumber" name="L462" href="#L462">462</a>   }
<a class="jxr_linenumber" name="L463" href="#L463">463</a> 
<a class="jxr_linenumber" name="L464" href="#L464">464</a>   <em class="jxr_comment">// Compare by toString() to satisfy 2 properties:</em>
<a class="jxr_linenumber" name="L465" href="#L465">465</a>   <em class="jxr_comment">// 1. compareTo(null) should throw NullPointerException</em>
<a class="jxr_linenumber" name="L466" href="#L466">466</a>   <em class="jxr_comment">// 2. the order is deterministic and easy to understand, for debugging purpose.</em>
<a class="jxr_linenumber" name="L467" href="#L467">467</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">ByToString</a> <strong class="jxr_keyword">implements</strong> Comparable&lt;Object&gt;, Serializable {
<a class="jxr_linenumber" name="L468" href="#L468">468</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">ByToString</a> INSTANCE = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">ByToString</a>();
<a class="jxr_linenumber" name="L469" href="#L469">469</a> 
<a class="jxr_linenumber" name="L470" href="#L470">470</a>     @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> compareTo(Object o) {
<a class="jxr_linenumber" name="L471" href="#L471">471</a>       <strong class="jxr_keyword">return</strong> toString().compareTo(o.toString());
<a class="jxr_linenumber" name="L472" href="#L472">472</a>     }
<a class="jxr_linenumber" name="L473" href="#L473">473</a> 
<a class="jxr_linenumber" name="L474" href="#L474">474</a>     @Override <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L475" href="#L475">475</a>       <strong class="jxr_keyword">return</strong> <span class="jxr_string">"BY_TO_STRING"</span>;
<a class="jxr_linenumber" name="L476" href="#L476">476</a>     }
<a class="jxr_linenumber" name="L477" href="#L477">477</a> 
<a class="jxr_linenumber" name="L478" href="#L478">478</a>     <strong class="jxr_keyword">private</strong> Object readResolve() {
<a class="jxr_linenumber" name="L479" href="#L479">479</a>       <strong class="jxr_keyword">return</strong> INSTANCE;
<a class="jxr_linenumber" name="L480" href="#L480">480</a>     }
<a class="jxr_linenumber" name="L481" href="#L481">481</a>   }
<a class="jxr_linenumber" name="L482" href="#L482">482</a> 
<a class="jxr_linenumber" name="L483" href="#L483">483</a>   <em class="jxr_comment">// Always equal is a valid total ordering. And it works for any Object.</em>
<a class="jxr_linenumber" name="L484" href="#L484">484</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">AlwaysEqual</a> <strong class="jxr_keyword">extends</strong> Ordering&lt;Object&gt; <strong class="jxr_keyword">implements</strong> Serializable {
<a class="jxr_linenumber" name="L485" href="#L485">485</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">AlwaysEqual</a> INSTANCE = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">AlwaysEqual</a>();
<a class="jxr_linenumber" name="L486" href="#L486">486</a> 
<a class="jxr_linenumber" name="L487" href="#L487">487</a>     @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> compare(Object o1, Object o2) {
<a class="jxr_linenumber" name="L488" href="#L488">488</a>       <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L489" href="#L489">489</a>     }
<a class="jxr_linenumber" name="L490" href="#L490">490</a> 
<a class="jxr_linenumber" name="L491" href="#L491">491</a>     @Override <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L492" href="#L492">492</a>       <strong class="jxr_keyword">return</strong> <span class="jxr_string">"ALWAYS_EQUAL"</span>;
<a class="jxr_linenumber" name="L493" href="#L493">493</a>     }
<a class="jxr_linenumber" name="L494" href="#L494">494</a> 
<a class="jxr_linenumber" name="L495" href="#L495">495</a>     <strong class="jxr_keyword">private</strong> Object readResolve() {
<a class="jxr_linenumber" name="L496" href="#L496">496</a>       <strong class="jxr_keyword">return</strong> INSTANCE;
<a class="jxr_linenumber" name="L497" href="#L497">497</a>     }
<a class="jxr_linenumber" name="L498" href="#L498">498</a>   }
<a class="jxr_linenumber" name="L499" href="#L499">499</a> 
<a class="jxr_linenumber" name="L500" href="#L500">500</a>   <strong class="jxr_keyword">private</strong> <a href="../../../../com/google/common/testing/ArbitraryInstances.html">ArbitraryInstances</a>() {}
<a class="jxr_linenumber" name="L501" href="#L501">501</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
