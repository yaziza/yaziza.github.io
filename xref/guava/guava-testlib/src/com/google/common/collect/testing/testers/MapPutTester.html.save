<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>MapPutTester xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../../apidocs/com/google/common/collect/testing/testers/MapPutTester.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2007 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.collect.testing.testers;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.collect.testing.features.CollectionSize.ZERO;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.collect.testing.features.MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtIncompatible;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.testing.AbstractMapTester;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.testing.Helpers;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.testing.features.CollectionSize;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> com.google.common.collect.testing.features.MapFeature;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Method;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> java.util.ConcurrentModificationException;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> java.util.Iterator;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> java.util.Map;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> java.util.Map.Entry;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * A generic JUnit test which tests {@code put} operations on a map. Can't be</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * invoked directly; please see</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * @author Chris Povirk</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * @author Kevin Bourrillion</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  @SuppressWarnings(<span class="jxr_string">"unchecked"</span>) <em class="jxr_comment">// too many "unchecked generic array creations"</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  @GwtCompatible(emulated = <strong class="jxr_keyword">true</strong>)
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> MapPutTester&lt;K, V&gt; <strong class="jxr_keyword">extends</strong> AbstractMapTester&lt;K, V&gt; {
<a class="jxr_linenumber" name="L49" href="#L49">49</a>    <strong class="jxr_keyword">private</strong> Entry&lt;K, V&gt; nullKeyEntry;
<a class="jxr_linenumber" name="L50" href="#L50">50</a>    <strong class="jxr_keyword">private</strong> Entry&lt;K, V&gt; nullValueEntry;
<a class="jxr_linenumber" name="L51" href="#L51">51</a>    <strong class="jxr_keyword">private</strong> Entry&lt;K, V&gt; nullKeyValueEntry;
<a class="jxr_linenumber" name="L52" href="#L52">52</a>    <strong class="jxr_keyword">private</strong> Entry&lt;K, V&gt; presentKeyNullValueEntry;
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  
<a class="jxr_linenumber" name="L54" href="#L54">54</a>    @Override <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> setUp() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      <strong class="jxr_keyword">super</strong>.setUp();
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      nullKeyEntry = entry(<strong class="jxr_keyword">null</strong>, samples.e3.getValue());
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      nullValueEntry = entry(samples.e3.getKey(), <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      nullKeyValueEntry = entry(<strong class="jxr_keyword">null</strong>, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      presentKeyNullValueEntry = entry(samples.e0.getKey(), <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L60" href="#L60">60</a>    }
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  
<a class="jxr_linenumber" name="L62" href="#L62">62</a>    @MapFeature.Require(SUPPORTS_PUT)
<a class="jxr_linenumber" name="L63" href="#L63">63</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_supportedNotPresent() {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      assertNull(<span class="jxr_string">"put(notPresent, value) should return null"</span>, put(samples.e3));
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      expectAdded(samples.e3);
<a class="jxr_linenumber" name="L66" href="#L66">66</a>    }
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  
<a class="jxr_linenumber" name="L68" href="#L68">68</a>    @MapFeature.Require({FAILS_FAST_ON_CONCURRENT_MODIFICATION, SUPPORTS_PUT})
<a class="jxr_linenumber" name="L69" href="#L69">69</a>    @CollectionSize.Require(absent = ZERO)
<a class="jxr_linenumber" name="L70" href="#L70">70</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPutAbsentConcurrentWithEntrySetIteration() {
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L72" href="#L72">72</a>        Iterator&lt;Entry&lt;K, V&gt;&gt; iterator = getMap().entrySet().iterator();
<a class="jxr_linenumber" name="L73" href="#L73">73</a>        put(samples.e3);
<a class="jxr_linenumber" name="L74" href="#L74">74</a>        iterator.next();
<a class="jxr_linenumber" name="L75" href="#L75">75</a>        fail(<span class="jxr_string">"Expected ConcurrentModificationException"</span>);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      } <strong class="jxr_keyword">catch</strong> (ConcurrentModificationException expected) {
<a class="jxr_linenumber" name="L77" href="#L77">77</a>        <em class="jxr_comment">// success</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      }
<a class="jxr_linenumber" name="L79" href="#L79">79</a>    }
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>    @MapFeature.Require({FAILS_FAST_ON_CONCURRENT_MODIFICATION, SUPPORTS_PUT})
<a class="jxr_linenumber" name="L82" href="#L82">82</a>    @CollectionSize.Require(absent = ZERO)
<a class="jxr_linenumber" name="L83" href="#L83">83</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPutAbsentConcurrentWithKeySetIteration() {
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L85" href="#L85">85</a>        Iterator&lt;K&gt; iterator = getMap().keySet().iterator();
<a class="jxr_linenumber" name="L86" href="#L86">86</a>        put(samples.e3);
<a class="jxr_linenumber" name="L87" href="#L87">87</a>        iterator.next();
<a class="jxr_linenumber" name="L88" href="#L88">88</a>        fail(<span class="jxr_string">"Expected ConcurrentModificationException"</span>);
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      } <strong class="jxr_keyword">catch</strong> (ConcurrentModificationException expected) {
<a class="jxr_linenumber" name="L90" href="#L90">90</a>        <em class="jxr_comment">// success</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      }
<a class="jxr_linenumber" name="L92" href="#L92">92</a>    }
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  
<a class="jxr_linenumber" name="L94" href="#L94">94</a>    @MapFeature.Require({FAILS_FAST_ON_CONCURRENT_MODIFICATION, SUPPORTS_PUT})
<a class="jxr_linenumber" name="L95" href="#L95">95</a>    @CollectionSize.Require(absent = ZERO)
<a class="jxr_linenumber" name="L96" href="#L96">96</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPutAbsentConcurrentWithValueIteration() {
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>        Iterator&lt;V&gt; iterator = getMap().values().iterator();
<a class="jxr_linenumber" name="L99" href="#L99">99</a>        put(samples.e3);
<a class="jxr_linenumber" name="L100" href="#L100">100</a>       iterator.next();
<a class="jxr_linenumber" name="L101" href="#L101">101</a>       fail(<span class="jxr_string">"Expected ConcurrentModificationException"</span>);
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     } <strong class="jxr_keyword">catch</strong> (ConcurrentModificationException expected) {
<a class="jxr_linenumber" name="L103" href="#L103">103</a>       <em class="jxr_comment">// success</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     }
<a class="jxr_linenumber" name="L105" href="#L105">105</a>   }
<a class="jxr_linenumber" name="L106" href="#L106">106</a> 
<a class="jxr_linenumber" name="L107" href="#L107">107</a>   @MapFeature.Require(absent = SUPPORTS_PUT)
<a class="jxr_linenumber" name="L108" href="#L108">108</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_unsupportedNotPresent() {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L110" href="#L110">110</a>       put(samples.e3);
<a class="jxr_linenumber" name="L111" href="#L111">111</a>       fail(<span class="jxr_string">"put(notPresent, value) should throw"</span>);
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     } <strong class="jxr_keyword">catch</strong> (UnsupportedOperationException expected) {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     }
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     expectUnchanged();
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     expectMissing(samples.e3);
<a class="jxr_linenumber" name="L116" href="#L116">116</a>   }
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>   @MapFeature.Require(absent = SUPPORTS_PUT)
<a class="jxr_linenumber" name="L119" href="#L119">119</a>   @CollectionSize.Require(absent = ZERO)
<a class="jxr_linenumber" name="L120" href="#L120">120</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_unsupportedPresentExistingValue() {
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L122" href="#L122">122</a>       assertEquals(<span class="jxr_string">"put(present, existingValue) should return present or throw"</span>,
<a class="jxr_linenumber" name="L123" href="#L123">123</a>           samples.e0.getValue(), put(samples.e0));
<a class="jxr_linenumber" name="L124" href="#L124">124</a>     } <strong class="jxr_keyword">catch</strong> (UnsupportedOperationException tolerated) {
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     }
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     expectUnchanged();
<a class="jxr_linenumber" name="L127" href="#L127">127</a>   }
<a class="jxr_linenumber" name="L128" href="#L128">128</a> 
<a class="jxr_linenumber" name="L129" href="#L129">129</a>   @MapFeature.Require(absent = SUPPORTS_PUT)
<a class="jxr_linenumber" name="L130" href="#L130">130</a>   @CollectionSize.Require(absent = ZERO)
<a class="jxr_linenumber" name="L131" href="#L131">131</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_unsupportedPresentDifferentValue() {
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L133" href="#L133">133</a>       getMap().put(samples.e0.getKey(), samples.e3.getValue());
<a class="jxr_linenumber" name="L134" href="#L134">134</a>       fail(<span class="jxr_string">"put(present, differentValue) should throw"</span>);
<a class="jxr_linenumber" name="L135" href="#L135">135</a>     } <strong class="jxr_keyword">catch</strong> (UnsupportedOperationException expected) {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     }
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     expectUnchanged();
<a class="jxr_linenumber" name="L138" href="#L138">138</a>   }
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>   @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_KEYS})
<a class="jxr_linenumber" name="L141" href="#L141">141</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_nullKeySupportedNotPresent() {
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     assertNull(<span class="jxr_string">"put(null, value) should return null"</span>, put(nullKeyEntry));
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     expectAdded(nullKeyEntry);
<a class="jxr_linenumber" name="L144" href="#L144">144</a>   }
<a class="jxr_linenumber" name="L145" href="#L145">145</a> 
<a class="jxr_linenumber" name="L146" href="#L146">146</a>   @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_KEYS})
<a class="jxr_linenumber" name="L147" href="#L147">147</a>   @CollectionSize.Require(absent = ZERO)
<a class="jxr_linenumber" name="L148" href="#L148">148</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_nullKeySupportedPresent() {
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     Entry&lt;K, V&gt; newEntry = entry(<strong class="jxr_keyword">null</strong>, samples.e3.getValue());
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     initMapWithNullKey();
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     assertEquals(<span class="jxr_string">"put(present, value) should return the associated value"</span>,
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         getValueForNullKey(), put(newEntry));
<a class="jxr_linenumber" name="L153" href="#L153">153</a> 
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     Entry&lt;K, V&gt;[] expected = createArrayWithNullKey();
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     expected[getNullLocation()] = newEntry;
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     expectContents(expected);
<a class="jxr_linenumber" name="L157" href="#L157">157</a>   }
<a class="jxr_linenumber" name="L158" href="#L158">158</a> 
<a class="jxr_linenumber" name="L159" href="#L159">159</a>   @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_KEYS)
<a class="jxr_linenumber" name="L160" href="#L160">160</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_nullKeyUnsupported() {
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>       put(nullKeyEntry);
<a class="jxr_linenumber" name="L163" href="#L163">163</a>       fail(<span class="jxr_string">"put(null, value) should throw"</span>);
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException expected) {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     }
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     expectUnchanged();
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     expectNullKeyMissingWhenNullKeysUnsupported(
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         <span class="jxr_string">"Should not contain null key after unsupported put(null, value)"</span>);
<a class="jxr_linenumber" name="L169" href="#L169">169</a>   }
<a class="jxr_linenumber" name="L170" href="#L170">170</a> 
<a class="jxr_linenumber" name="L171" href="#L171">171</a>   @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})
<a class="jxr_linenumber" name="L172" href="#L172">172</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_nullValueSupported() {
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     assertNull(<span class="jxr_string">"put(key, null) should return null"</span>, put(nullValueEntry));
<a class="jxr_linenumber" name="L174" href="#L174">174</a>     expectAdded(nullValueEntry);
<a class="jxr_linenumber" name="L175" href="#L175">175</a>   }
<a class="jxr_linenumber" name="L176" href="#L176">176</a> 
<a class="jxr_linenumber" name="L177" href="#L177">177</a>   @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_VALUES)
<a class="jxr_linenumber" name="L178" href="#L178">178</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_nullValueUnsupported() {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L180" href="#L180">180</a>       put(nullValueEntry);
<a class="jxr_linenumber" name="L181" href="#L181">181</a>       fail(<span class="jxr_string">"put(key, null) should throw"</span>);
<a class="jxr_linenumber" name="L182" href="#L182">182</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException expected) {
<a class="jxr_linenumber" name="L183" href="#L183">183</a>     }
<a class="jxr_linenumber" name="L184" href="#L184">184</a>     expectUnchanged();
<a class="jxr_linenumber" name="L185" href="#L185">185</a>     expectNullValueMissingWhenNullValuesUnsupported(
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         <span class="jxr_string">"Should not contain null value after unsupported put(key, null)"</span>);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>   }
<a class="jxr_linenumber" name="L188" href="#L188">188</a> 
<a class="jxr_linenumber" name="L189" href="#L189">189</a>   @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})
<a class="jxr_linenumber" name="L190" href="#L190">190</a>   @CollectionSize.Require(absent = ZERO)
<a class="jxr_linenumber" name="L191" href="#L191">191</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_replaceWithNullValueSupported() {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>     assertEquals(<span class="jxr_string">"put(present, null) should return the associated value"</span>,
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         samples.e0.getValue(), put(presentKeyNullValueEntry));
<a class="jxr_linenumber" name="L194" href="#L194">194</a>     expectReplacement(presentKeyNullValueEntry);
<a class="jxr_linenumber" name="L195" href="#L195">195</a>   }
<a class="jxr_linenumber" name="L196" href="#L196">196</a> 
<a class="jxr_linenumber" name="L197" href="#L197">197</a>   @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_VALUES)
<a class="jxr_linenumber" name="L198" href="#L198">198</a>   @CollectionSize.Require(absent = ZERO)
<a class="jxr_linenumber" name="L199" href="#L199">199</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_replaceWithNullValueUnsupported() {
<a class="jxr_linenumber" name="L200" href="#L200">200</a>     <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L201" href="#L201">201</a>       put(presentKeyNullValueEntry);
<a class="jxr_linenumber" name="L202" href="#L202">202</a>       fail(<span class="jxr_string">"put(present, null) should throw"</span>);
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     } <strong class="jxr_keyword">catch</strong> (NullPointerException expected) {
<a class="jxr_linenumber" name="L204" href="#L204">204</a>     }
<a class="jxr_linenumber" name="L205" href="#L205">205</a>     expectUnchanged();
<a class="jxr_linenumber" name="L206" href="#L206">206</a>     expectNullValueMissingWhenNullValuesUnsupported(
<a class="jxr_linenumber" name="L207" href="#L207">207</a>         <span class="jxr_string">"Should not contain null after unsupported put(present, null)"</span>);
<a class="jxr_linenumber" name="L208" href="#L208">208</a>   }
<a class="jxr_linenumber" name="L209" href="#L209">209</a> 
<a class="jxr_linenumber" name="L210" href="#L210">210</a>   @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})
<a class="jxr_linenumber" name="L211" href="#L211">211</a>   @CollectionSize.Require(absent = ZERO)
<a class="jxr_linenumber" name="L212" href="#L212">212</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_replaceNullValueWithNullSupported() {
<a class="jxr_linenumber" name="L213" href="#L213">213</a>     initMapWithNullValue();
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     assertNull(<span class="jxr_string">"put(present, null) should return the associated value (null)"</span>,
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         getMap().put(getKeyForNullValue(), <strong class="jxr_keyword">null</strong>));
<a class="jxr_linenumber" name="L216" href="#L216">216</a>     expectContents(createArrayWithNullValue());
<a class="jxr_linenumber" name="L217" href="#L217">217</a>   }
<a class="jxr_linenumber" name="L218" href="#L218">218</a> 
<a class="jxr_linenumber" name="L219" href="#L219">219</a>   @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})
<a class="jxr_linenumber" name="L220" href="#L220">220</a>   @CollectionSize.Require(absent = ZERO)
<a class="jxr_linenumber" name="L221" href="#L221">221</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_replaceNullValueWithNonNullSupported() {
<a class="jxr_linenumber" name="L222" href="#L222">222</a>     Entry&lt;K, V&gt; newEntry = entry(getKeyForNullValue(), samples.e3.getValue());
<a class="jxr_linenumber" name="L223" href="#L223">223</a>     initMapWithNullValue();
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     assertNull(<span class="jxr_string">"put(present, value) should return the associated value (null)"</span>,
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         put(newEntry));
<a class="jxr_linenumber" name="L226" href="#L226">226</a> 
<a class="jxr_linenumber" name="L227" href="#L227">227</a>     Entry&lt;K, V&gt;[] expected = createArrayWithNullValue();
<a class="jxr_linenumber" name="L228" href="#L228">228</a>     expected[getNullLocation()] = newEntry;
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     expectContents(expected);
<a class="jxr_linenumber" name="L230" href="#L230">230</a>   }
<a class="jxr_linenumber" name="L231" href="#L231">231</a> 
<a class="jxr_linenumber" name="L232" href="#L232">232</a>   @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_KEYS, ALLOWS_NULL_VALUES})
<a class="jxr_linenumber" name="L233" href="#L233">233</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPut_nullKeyAndValueSupported() {
<a class="jxr_linenumber" name="L234" href="#L234">234</a>     assertNull(<span class="jxr_string">"put(null, null) should return null"</span>, put(nullKeyValueEntry));
<a class="jxr_linenumber" name="L235" href="#L235">235</a>     expectAdded(nullKeyValueEntry);
<a class="jxr_linenumber" name="L236" href="#L236">236</a>   }
<a class="jxr_linenumber" name="L237" href="#L237">237</a> 
<a class="jxr_linenumber" name="L238" href="#L238">238</a>   <strong class="jxr_keyword">private</strong> V put(Map.Entry&lt;K, V&gt; entry) {
<a class="jxr_linenumber" name="L239" href="#L239">239</a>     <strong class="jxr_keyword">return</strong> getMap().put(entry.getKey(), entry.getValue());
<a class="jxr_linenumber" name="L240" href="#L240">240</a>   }
<a class="jxr_linenumber" name="L241" href="#L241">241</a> 
<a class="jxr_linenumber" name="L242" href="#L242">242</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a> <em class="jxr_javadoccomment">   * Returns the {@link Method} instance for {@link</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a> <em class="jxr_javadoccomment">   * #testPut_nullKeyUnsupported()} so that tests of {@link java.util.TreeMap}</em>
<a class="jxr_linenumber" name="L245" href="#L245">245</a> <em class="jxr_javadoccomment">   * can suppress it with {@code FeatureSpecificTestSuiteBuilder.suppressing()}</em>
<a class="jxr_linenumber" name="L246" href="#L246">246</a> <em class="jxr_javadoccomment">   * until &lt;a</em>
<a class="jxr_linenumber" name="L247" href="#L247">247</a> <em class="jxr_javadoccomment">   * href="<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5045147" target="alexandria_uri">http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5045147</a>"&gt;Sun bug</em>
<a class="jxr_linenumber" name="L248" href="#L248">248</a> <em class="jxr_javadoccomment">   * 5045147&lt;/a&gt; is fixed.</em>
<a class="jxr_linenumber" name="L249" href="#L249">249</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L250" href="#L250">250</a>   @GwtIncompatible(<span class="jxr_string">"reflection"</span>)
<a class="jxr_linenumber" name="L251" href="#L251">251</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> Method getPutNullKeyUnsupportedMethod() {
<a class="jxr_linenumber" name="L252" href="#L252">252</a>     <strong class="jxr_keyword">return</strong> Helpers.getMethod(MapPutTester.<strong class="jxr_keyword">class</strong>, <span class="jxr_string">"testPut_nullKeyUnsupported"</span>);
<a class="jxr_linenumber" name="L253" href="#L253">253</a>   }
<a class="jxr_linenumber" name="L254" href="#L254">254</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
