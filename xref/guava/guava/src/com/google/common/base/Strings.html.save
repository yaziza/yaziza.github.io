<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Strings xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/base/Strings.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2010 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.base;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkArgument;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkNotNull;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.VisibleForTesting;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> java.util.Formatter;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> javax.annotation.Nullable;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * Static utility methods pertaining to {@code String} or {@code CharSequence}</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * instances.</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * @author Kevin Bourrillion</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * @since 3.0</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  @GwtCompatible
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../com/google/common/base/Strings.html">Strings</a> {
<a class="jxr_linenumber" name="L38" href="#L38">38</a>    <strong class="jxr_keyword">private</strong> <a href="../../../../com/google/common/base/Strings.html">Strings</a>() {}
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  
<a class="jxr_linenumber" name="L40" href="#L40">40</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment">   * Returns the given string if it is non-null; the empty string otherwise.</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment">   * @param string the string to test and possibly return</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">   * @return {@code string} itself if it is non-null; {@code ""} if it is null</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> String nullToEmpty(@Nullable String string) {
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <strong class="jxr_keyword">return</strong> (string == <strong class="jxr_keyword">null</strong>) ? <span class="jxr_string">""</span> : string;
<a class="jxr_linenumber" name="L48" href="#L48">48</a>    }
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  
<a class="jxr_linenumber" name="L50" href="#L50">50</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment">   * Returns the given string if it is nonempty; {@code null} otherwise.</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">   * @param string the string to test and possibly return</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">   * @return {@code string} itself if it is nonempty; {@code null} if it is</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">   *     empty or null</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>    @Nullable
<a class="jxr_linenumber" name="L58" href="#L58">58</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> String emptyToNull(@Nullable String string) {
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      <strong class="jxr_keyword">return</strong> isNullOrEmpty(string) ? <strong class="jxr_keyword">null</strong> : string;
<a class="jxr_linenumber" name="L60" href="#L60">60</a>    }
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  
<a class="jxr_linenumber" name="L62" href="#L62">62</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">   * Returns {@code true} if the given string is null or is the empty string.</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">   * &lt;p&gt;Consider normalizing your string references with {@link #nullToEmpty}.</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">   * If you do, you can use {@link String#isEmpty()} instead of this</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">   * method, and you won't need special null-safe forms of methods like {@link</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">   * String#toUpperCase} either. Or, if you'd like to normalize "in the other</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">   * direction," converting empty strings to {@code null}, you can use {@link</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">   * #emptyToNull}.</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment">   * @param string a string reference to check</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">   * @return {@code true} if the string is null or is the empty string</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> isNullOrEmpty(@Nullable String string) {
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      <strong class="jxr_keyword">return</strong> string == <strong class="jxr_keyword">null</strong> || string.length() == 0; <em class="jxr_comment">// string.isEmpty() in Java 6</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>    }
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  
<a class="jxr_linenumber" name="L79" href="#L79">79</a>    <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">   * Returns a string, of length at least {@code minLength}, consisting of</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment">   * {@code string} prepended with as many copies of {@code padChar} as are</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">   * necessary to reach that length. For example,</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">   * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">   * &lt;li&gt;{@code padStart("7", 3, '0')} returns {@code "007"}</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment">   * &lt;li&gt;{@code padStart("2010", 3, '0')} returns {@code "2010"}</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment">   * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <em class="jxr_javadoccomment">   * &lt;p&gt;See {@link Formatter} for a richer set of formatting capabilities.</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <em class="jxr_javadoccomment">   * @param string the string which should appear at the end of the result</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment">   * @param minLength the minimum length the resulting string must have. Can be</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment">   *     zero or negative, in which case the input string is always returned.</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">   * @param padChar the character to insert at the beginning of the result until</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment">   *     the minimum length is reached</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment">   * @return the padded string</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> String padStart(String string, <strong class="jxr_keyword">int</strong> minLength, <strong class="jxr_keyword">char</strong> padChar) {
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      checkNotNull(string);  <em class="jxr_comment">// eager for GWT.</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     <strong class="jxr_keyword">if</strong> (string.length() &gt;= minLength) {
<a class="jxr_linenumber" name="L101" href="#L101">101</a>       <strong class="jxr_keyword">return</strong> string;
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     }
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     StringBuilder sb = <strong class="jxr_keyword">new</strong> StringBuilder(minLength);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = string.length(); i &lt; minLength; i++) {
<a class="jxr_linenumber" name="L105" href="#L105">105</a>       sb.append(padChar);
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     }
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     sb.append(string);
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     <strong class="jxr_keyword">return</strong> sb.toString();
<a class="jxr_linenumber" name="L109" href="#L109">109</a>   }
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">   * Returns a string, of length at least {@code minLength}, consisting of</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">   * {@code string} appended with as many copies of {@code padChar} as are</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">   * necessary to reach that length. For example,</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <em class="jxr_javadoccomment">   * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <em class="jxr_javadoccomment">   * &lt;li&gt;{@code padEnd("4.", 5, '0')} returns {@code "4.000"}</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <em class="jxr_javadoccomment">   * &lt;li&gt;{@code padEnd("2010", 3, '!')} returns {@code "2010"}</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <em class="jxr_javadoccomment">   * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment">   * &lt;p&gt;See {@link Formatter} for a richer set of formatting capabilities.</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">   * @param string the string which should appear at the beginning of the result</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">   * @param minLength the minimum length the resulting string must have. Can be</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">   *     zero or negative, in which case the input string is always returned.</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">   * @param padChar the character to append to the end of the result until the</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment">   *     minimum length is reached</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment">   * @return the padded string</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> String padEnd(String string, <strong class="jxr_keyword">int</strong> minLength, <strong class="jxr_keyword">char</strong> padChar) {
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     checkNotNull(string);  <em class="jxr_comment">// eager for GWT.</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     <strong class="jxr_keyword">if</strong> (string.length() &gt;= minLength) {
<a class="jxr_linenumber" name="L133" href="#L133">133</a>       <strong class="jxr_keyword">return</strong> string;
<a class="jxr_linenumber" name="L134" href="#L134">134</a>     }
<a class="jxr_linenumber" name="L135" href="#L135">135</a>     StringBuilder sb = <strong class="jxr_keyword">new</strong> StringBuilder(minLength);
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     sb.append(string);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = string.length(); i &lt; minLength; i++) {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>       sb.append(padChar);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>     }
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     <strong class="jxr_keyword">return</strong> sb.toString();
<a class="jxr_linenumber" name="L141" href="#L141">141</a>   }
<a class="jxr_linenumber" name="L142" href="#L142">142</a> 
<a class="jxr_linenumber" name="L143" href="#L143">143</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <em class="jxr_javadoccomment">   * Returns a string consisting of a specific number of concatenated copies of</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a> <em class="jxr_javadoccomment">   * an input string. For example, {@code repeat("hey", 3)} returns the string</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <em class="jxr_javadoccomment">   * {@code "heyheyhey"}.</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L148" href="#L148">148</a> <em class="jxr_javadoccomment">   * @param string any non-null string</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a> <em class="jxr_javadoccomment">   * @param count the number of times to repeat it; a nonnegative integer</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a> <em class="jxr_javadoccomment">   * @return a string containing {@code string} repeated {@code count} times</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a> <em class="jxr_javadoccomment">   *     (the empty string if {@code count} is zero)</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment">   * @throws IllegalArgumentException if {@code count} is negative</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> String repeat(String string, <strong class="jxr_keyword">int</strong> count) {
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     checkNotNull(string);  <em class="jxr_comment">// eager for GWT.</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> 
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     <strong class="jxr_keyword">if</strong> (count &lt;= 1) {
<a class="jxr_linenumber" name="L158" href="#L158">158</a>       checkArgument(count &gt;= 0, <span class="jxr_string">"invalid count: %s"</span>, count);
<a class="jxr_linenumber" name="L159" href="#L159">159</a>       <strong class="jxr_keyword">return</strong> (count == 0) ? <span class="jxr_string">""</span> : string;
<a class="jxr_linenumber" name="L160" href="#L160">160</a>     }
<a class="jxr_linenumber" name="L161" href="#L161">161</a> 
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     <em class="jxr_comment">// IF YOU MODIFY THE CODE HERE, you must update StringsRepeatBenchmark</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> len = string.length();
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> longSize = (<strong class="jxr_keyword">long</strong>) len * (<strong class="jxr_keyword">long</strong>) count;
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> size = (<strong class="jxr_keyword">int</strong>) longSize;
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     <strong class="jxr_keyword">if</strong> (size != longSize) {
<a class="jxr_linenumber" name="L167" href="#L167">167</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> ArrayIndexOutOfBoundsException(
<a class="jxr_linenumber" name="L168" href="#L168">168</a>           <span class="jxr_string">"Required array size too large: "</span> + longSize);
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     }
<a class="jxr_linenumber" name="L170" href="#L170">170</a> 
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">char</strong>[] array = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">char</strong>[size];
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     string.getChars(0, len, array, 0);
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     <strong class="jxr_keyword">int</strong> n;
<a class="jxr_linenumber" name="L174" href="#L174">174</a>     <strong class="jxr_keyword">for</strong> (n = len; n &lt; size - n; n &lt;&lt;= 1) {
<a class="jxr_linenumber" name="L175" href="#L175">175</a>       System.arraycopy(array, 0, array, n, n);
<a class="jxr_linenumber" name="L176" href="#L176">176</a>     }
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     System.arraycopy(array, 0, array, n, size - n);
<a class="jxr_linenumber" name="L178" href="#L178">178</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> String(array);
<a class="jxr_linenumber" name="L179" href="#L179">179</a>   }
<a class="jxr_linenumber" name="L180" href="#L180">180</a> 
<a class="jxr_linenumber" name="L181" href="#L181">181</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L182" href="#L182">182</a> <em class="jxr_javadoccomment">   * Returns the longest string {@code prefix} such that</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a> <em class="jxr_javadoccomment">   * {@code a.toString().startsWith(prefix) &amp;&amp; b.toString().startsWith(prefix)},</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a> <em class="jxr_javadoccomment">   * taking care not to split surrogate pairs. If {@code a} and {@code b} have</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a> <em class="jxr_javadoccomment">   * no common prefix, returns the empty string.</em>
<a class="jxr_linenumber" name="L186" href="#L186">186</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a> <em class="jxr_javadoccomment">   * @since 11.0</em>
<a class="jxr_linenumber" name="L188" href="#L188">188</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L189" href="#L189">189</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> String commonPrefix(CharSequence a, CharSequence b) {
<a class="jxr_linenumber" name="L190" href="#L190">190</a>     checkNotNull(a);
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     checkNotNull(b);
<a class="jxr_linenumber" name="L192" href="#L192">192</a> 
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     <strong class="jxr_keyword">int</strong> maxPrefixLength = Math.min(a.length(), b.length());
<a class="jxr_linenumber" name="L194" href="#L194">194</a>     <strong class="jxr_keyword">int</strong> p = 0;
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     <strong class="jxr_keyword">while</strong> (p &lt; maxPrefixLength &amp;&amp; a.charAt(p) == b.charAt(p)) {
<a class="jxr_linenumber" name="L196" href="#L196">196</a>       p++;
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     }
<a class="jxr_linenumber" name="L198" href="#L198">198</a>     <strong class="jxr_keyword">if</strong> (validSurrogatePairAt(a, p - 1) || validSurrogatePairAt(b, p - 1)) {
<a class="jxr_linenumber" name="L199" href="#L199">199</a>       p--;
<a class="jxr_linenumber" name="L200" href="#L200">200</a>     }
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     <strong class="jxr_keyword">return</strong> a.subSequence(0, p).toString();
<a class="jxr_linenumber" name="L202" href="#L202">202</a>   }
<a class="jxr_linenumber" name="L203" href="#L203">203</a> 
<a class="jxr_linenumber" name="L204" href="#L204">204</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L205" href="#L205">205</a> <em class="jxr_javadoccomment">   * Returns the longest string {@code suffix} such that</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a> <em class="jxr_javadoccomment">   * {@code a.toString().endsWith(suffix) &amp;&amp; b.toString().endsWith(suffix)},</em>
<a class="jxr_linenumber" name="L207" href="#L207">207</a> <em class="jxr_javadoccomment">   * taking care not to split surrogate pairs. If {@code a} and {@code b} have</em>
<a class="jxr_linenumber" name="L208" href="#L208">208</a> <em class="jxr_javadoccomment">   * no common suffix, returns the empty string.</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L210" href="#L210">210</a> <em class="jxr_javadoccomment">   * @since 11.0</em>
<a class="jxr_linenumber" name="L211" href="#L211">211</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L212" href="#L212">212</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> String commonSuffix(CharSequence a, CharSequence b) {
<a class="jxr_linenumber" name="L213" href="#L213">213</a>     checkNotNull(a);
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     checkNotNull(b);
<a class="jxr_linenumber" name="L215" href="#L215">215</a> 
<a class="jxr_linenumber" name="L216" href="#L216">216</a>     <strong class="jxr_keyword">int</strong> maxSuffixLength = Math.min(a.length(), b.length());
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     <strong class="jxr_keyword">int</strong> s = 0;
<a class="jxr_linenumber" name="L218" href="#L218">218</a>     <strong class="jxr_keyword">while</strong> (s &lt; maxSuffixLength
<a class="jxr_linenumber" name="L219" href="#L219">219</a>         &amp;&amp; a.charAt(a.length() - s - 1) == b.charAt(b.length() - s - 1)) {
<a class="jxr_linenumber" name="L220" href="#L220">220</a>       s++;
<a class="jxr_linenumber" name="L221" href="#L221">221</a>     }
<a class="jxr_linenumber" name="L222" href="#L222">222</a>     <strong class="jxr_keyword">if</strong> (validSurrogatePairAt(a, a.length() - s - 1)
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         || validSurrogatePairAt(b, b.length() - s - 1)) {
<a class="jxr_linenumber" name="L224" href="#L224">224</a>       s--;
<a class="jxr_linenumber" name="L225" href="#L225">225</a>     }
<a class="jxr_linenumber" name="L226" href="#L226">226</a>     <strong class="jxr_keyword">return</strong> a.subSequence(a.length() - s, a.length()).toString();
<a class="jxr_linenumber" name="L227" href="#L227">227</a>   }
<a class="jxr_linenumber" name="L228" href="#L228">228</a> 
<a class="jxr_linenumber" name="L229" href="#L229">229</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L230" href="#L230">230</a> <em class="jxr_javadoccomment">   * True when a valid surrogate pair starts at the given {@code index} in the</em>
<a class="jxr_linenumber" name="L231" href="#L231">231</a> <em class="jxr_javadoccomment">   * given {@code string}. Out-of-range indexes return false.</em>
<a class="jxr_linenumber" name="L232" href="#L232">232</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L233" href="#L233">233</a>   @VisibleForTesting
<a class="jxr_linenumber" name="L234" href="#L234">234</a>   <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> validSurrogatePairAt(CharSequence string, <strong class="jxr_keyword">int</strong> index) {
<a class="jxr_linenumber" name="L235" href="#L235">235</a>     <strong class="jxr_keyword">return</strong> index &gt;= 0 &amp;&amp; index &lt;= (string.length() - 2)
<a class="jxr_linenumber" name="L236" href="#L236">236</a>         &amp;&amp; Character.isHighSurrogate(string.charAt(index))
<a class="jxr_linenumber" name="L237" href="#L237">237</a>         &amp;&amp; Character.isLowSurrogate(string.charAt(index + 1));
<a class="jxr_linenumber" name="L238" href="#L238">238</a>   }
<a class="jxr_linenumber" name="L239" href="#L239">239</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
