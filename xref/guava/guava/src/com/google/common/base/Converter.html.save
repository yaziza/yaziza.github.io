<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Converter xref</title>
<link type="text/css" rel="stylesheet" href="../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/com/google/common/base/Converter.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Copyright (C) 2008 The Guava Authors</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * Licensed under the Apache License, Version 2.0 (the "License");</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> com.google.common.base;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> com.google.common.base.Preconditions.checkNotNull;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.Beta;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> com.google.common.annotations.GwtCompatible;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> java.io.Serializable;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> java.util.Iterator;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> javax.annotation.Nullable;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * A function from {@code A} to {@code B} with an associated &lt;i&gt;reverse&lt;/i&gt; function from {@code B}</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * to {@code A}; used for converting back and forth between &lt;i&gt;different representations of the same</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * information&lt;/i&gt;.</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * &lt;h3&gt;Invertibility&lt;/h3&gt;</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;The reverse operation &lt;b&gt;may&lt;/b&gt; be a strict &lt;i&gt;inverse&lt;/i&gt; (meaning that {@code</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * converter.reverse().convert(converter.convert(a)).equals(a)} is always true). However, it is</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * very common (perhaps &lt;i&gt;more&lt;/i&gt; common) for round-trip conversion to be &lt;i&gt;lossy&lt;/i&gt;. Consider</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * an example round-trip using {@link com.google.common.primitives.Doubles#stringConverter}:</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * &lt;ol&gt;</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;{@code stringConverter().convert("1.00")} returns the {@code Double} value {@code 1.0}</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;{@code stringConverter().reverse().convert(1.0)} returns the string {@code "1.0"} --</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> *     &lt;i&gt;not&lt;/i&gt; the same string ({@code "1.00"}) we started with</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * &lt;/ol&gt;</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;Note that it should still be the case that the round-tripped and original objects are</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> * &lt;i&gt;similar&lt;/i&gt;.</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> * &lt;h3&gt;Nullability&lt;/h3&gt;</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;A converter always converts {@code null} to {@code null} and non-null references to non-null</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment"> * references. It would not make sense to consider {@code null} and a non-null reference to be</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment"> * "different representations of the same information", since one is distinguishable from</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment"> * &lt;i&gt;missing&lt;/i&gt; information and the other is not. The {@link #convert} method handles this null</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment"> * behavior for all converters; implementations of {@link #doForward} and {@link #doBackward} are</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment"> * guaranteed to never be passed {@code null}, and must never return {@code null}.</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment"> * &lt;h3&gt;Common ways to use&lt;/h3&gt;</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;Getting a converter:</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment"> * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment"> *     com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment"> *     #reverse reverse} views of these.</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;Convert between specific preset values using {@link</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment"> *     com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to create</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment"> *     a "fake" converter for a unit test. It is unnecessary (and confusing) to &lt;i&gt;mock&lt;/i&gt; the</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment"> *     {@code Converter} type using a mocking framework.</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;Otherwise, extend this class and implement its {@link #doForward} and {@link #doBackward}</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment"> *     methods.</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment"> * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;Using a converter:</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment"> * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;Convert one instance in the "forward" direction using {@code converter.convert(a)}.</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;Convert multiple instances "forward" using {@code converter.convertAll(as)}.</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;Convert in the "backward" direction using {@code converter.reverse().convert(b)} or {@code</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment"> *     converter.reverse().convertAll(bs)}.</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;Use {@code converter} or {@code converter.reverse()} anywhere a {@link Function} is accepted</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;&lt;b&gt;Do not&lt;/b&gt; call {@link #doForward} or {@link #doBackward} directly; these exist only to be</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment"> *     overridden.</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment"> * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment"> * @author Mike Ward</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <em class="jxr_javadoccomment"> * @author Kurt Alfred Kluever</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment"> * @author Gregory Kick</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <em class="jxr_javadoccomment"> * @since 16.0</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  @Beta
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  @GwtCompatible
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">class</strong> Converter&lt;A, B&gt; <strong class="jxr_keyword">implements</strong> Function&lt;A, B&gt; {
<a class="jxr_linenumber" name="L96" href="#L96">96</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> handleNullAutomatically;
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  
<a class="jxr_linenumber" name="L98" href="#L98">98</a>    <em class="jxr_comment">// We lazily cache the reverse view to avoid allocating on every call to reverse().</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>    <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">transient</strong> Converter&lt;B, A&gt; reverse;
<a class="jxr_linenumber" name="L100" href="#L100">100</a> 
<a class="jxr_linenumber" name="L101" href="#L101">101</a>   <em class="jxr_javadoccomment">/** Constructor for use by subclasses. */</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a>   <strong class="jxr_keyword">protected</strong> <a href="../../../../com/google/common/base/Converter.html">Converter</a>() {
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     <strong class="jxr_keyword">this</strong>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>   }
<a class="jxr_linenumber" name="L105" href="#L105">105</a> 
<a class="jxr_linenumber" name="L106" href="#L106">106</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment">   * Constructor used only by {@code LegacyConverter} to suspend automatic null-handling.</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a>   <a href="../../../../com/google/common/base/Converter.html">Converter</a>(<strong class="jxr_keyword">boolean</strong> handleNullAutomatically) {
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     <strong class="jxr_keyword">this</strong>.handleNullAutomatically = handleNullAutomatically;
<a class="jxr_linenumber" name="L111" href="#L111">111</a>   }
<a class="jxr_linenumber" name="L112" href="#L112">112</a> 
<a class="jxr_linenumber" name="L113" href="#L113">113</a>   <em class="jxr_comment">// SPI methods (what subclasses must implement)</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> 
<a class="jxr_linenumber" name="L115" href="#L115">115</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <em class="jxr_javadoccomment">   * Returns a representation of {@code a} as an instance of type {@code B}. If {@code a} cannot be</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <em class="jxr_javadoccomment">   * converted, an unchecked exception (such as {@link IllegalArgumentException}) should be thrown.</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <em class="jxr_javadoccomment">   * @param a the instance to convert; will never be null</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment">   * @return the converted instance; &lt;b&gt;must not&lt;/b&gt; be null</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a>   <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">abstract</strong> B doForward(A a);
<a class="jxr_linenumber" name="L123" href="#L123">123</a> 
<a class="jxr_linenumber" name="L124" href="#L124">124</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">   * Returns a representation of {@code b} as an instance of type {@code A}. If {@code b} cannot be</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">   * converted, an unchecked exception (such as {@link IllegalArgumentException}) should be thrown.</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment">   * @param b the instance to convert; will never be null</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment">   * @return the converted instance; &lt;b&gt;must not&lt;/b&gt; be null</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a> <em class="jxr_javadoccomment">   * @throws UnsupportedOperationException if backward conversion is not implemented; this should be</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment">   *     very rare. Note that if backward conversion is not only unimplemented but</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment">   *     unimplement&lt;i&gt;able&lt;/i&gt; (for example, consider a {@code Converter&lt;Chicken, ChickenNugget&gt;}),</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a> <em class="jxr_javadoccomment">   *     then this is not logically a {@code Converter} at all, and should just implement {@link</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a> <em class="jxr_javadoccomment">   *     Function}.</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a>   <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">abstract</strong> A doBackward(B b);
<a class="jxr_linenumber" name="L137" href="#L137">137</a> 
<a class="jxr_linenumber" name="L138" href="#L138">138</a>   <em class="jxr_comment">// API (consumer-side) methods</em>
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a> <em class="jxr_javadoccomment">   * Returns a representation of {@code a} as an instance of type {@code B}.</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L143" href="#L143">143</a> <em class="jxr_javadoccomment">   * @return the converted value; is null &lt;i&gt;if and only if&lt;/i&gt; {@code a} is null</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a>   @Nullable
<a class="jxr_linenumber" name="L146" href="#L146">146</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> B convert(@Nullable A a) {
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     <strong class="jxr_keyword">return</strong> correctedDoForward(a);
<a class="jxr_linenumber" name="L148" href="#L148">148</a>   }
<a class="jxr_linenumber" name="L149" href="#L149">149</a> 
<a class="jxr_linenumber" name="L150" href="#L150">150</a>   @Nullable
<a class="jxr_linenumber" name="L151" href="#L151">151</a>   B correctedDoForward(@Nullable A a) {
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     <strong class="jxr_keyword">if</strong> (handleNullAutomatically) {
<a class="jxr_linenumber" name="L153" href="#L153">153</a>       <em class="jxr_comment">// TODO(kevinb): we shouldn't be checking for a null result at runtime. Assert?</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a>       <strong class="jxr_keyword">return</strong> a == <strong class="jxr_keyword">null</strong> ? <strong class="jxr_keyword">null</strong> : checkNotNull(doForward(a));
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L156" href="#L156">156</a>       <strong class="jxr_keyword">return</strong> doForward(a);
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     }
<a class="jxr_linenumber" name="L158" href="#L158">158</a>   }
<a class="jxr_linenumber" name="L159" href="#L159">159</a> 
<a class="jxr_linenumber" name="L160" href="#L160">160</a>   @Nullable
<a class="jxr_linenumber" name="L161" href="#L161">161</a>   A correctedDoBackward(@Nullable B b) {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     <strong class="jxr_keyword">if</strong> (handleNullAutomatically) {
<a class="jxr_linenumber" name="L163" href="#L163">163</a>       <em class="jxr_comment">// TODO(kevinb): we shouldn't be checking for a null result at runtime. Assert?</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a>       <strong class="jxr_keyword">return</strong> b == <strong class="jxr_keyword">null</strong> ? <strong class="jxr_keyword">null</strong> : checkNotNull(doBackward(b));
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L166" href="#L166">166</a>       <strong class="jxr_keyword">return</strong> doBackward(b);
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     }
<a class="jxr_linenumber" name="L168" href="#L168">168</a>   }
<a class="jxr_linenumber" name="L169" href="#L169">169</a> 
<a class="jxr_linenumber" name="L170" href="#L170">170</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a> <em class="jxr_javadoccomment">   * Returns an iterable that applies {@code convert} to each element of {@code fromIterable}. The</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a> <em class="jxr_javadoccomment">   * conversion is done lazily.</em>
<a class="jxr_linenumber" name="L173" href="#L173">173</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned iterable's iterator supports {@code remove()} if the input iterator does. After</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">   * a successful {@code remove()} call, {@code fromIterable} no longer contains the corresponding</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a> <em class="jxr_javadoccomment">   * element.</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a>   <strong class="jxr_keyword">public</strong> Iterable&lt;B&gt; convertAll(<strong class="jxr_keyword">final</strong> Iterable&lt;? <strong class="jxr_keyword">extends</strong> A&gt; fromIterable) {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>     checkNotNull(fromIterable, <span class="jxr_string">"fromIterable"</span>);
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Iterable&lt;B&gt;() {
<a class="jxr_linenumber" name="L181" href="#L181">181</a>       @Override <strong class="jxr_keyword">public</strong> Iterator&lt;B&gt; iterator() {
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Iterator&lt;B&gt;() {
<a class="jxr_linenumber" name="L183" href="#L183">183</a>           <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> Iterator&lt;? <strong class="jxr_keyword">extends</strong> A&gt; fromIterator = fromIterable.iterator();
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>           @Override
<a class="jxr_linenumber" name="L186" href="#L186">186</a>           <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L187" href="#L187">187</a>             <strong class="jxr_keyword">return</strong> fromIterator.hasNext();
<a class="jxr_linenumber" name="L188" href="#L188">188</a>           }
<a class="jxr_linenumber" name="L189" href="#L189">189</a> 
<a class="jxr_linenumber" name="L190" href="#L190">190</a>           @Override
<a class="jxr_linenumber" name="L191" href="#L191">191</a>           <strong class="jxr_keyword">public</strong> B next() {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>             <strong class="jxr_keyword">return</strong> convert(fromIterator.next());
<a class="jxr_linenumber" name="L193" href="#L193">193</a>           }
<a class="jxr_linenumber" name="L194" href="#L194">194</a> 
<a class="jxr_linenumber" name="L195" href="#L195">195</a>           @Override
<a class="jxr_linenumber" name="L196" href="#L196">196</a>           <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> remove() {
<a class="jxr_linenumber" name="L197" href="#L197">197</a>             fromIterator.remove();
<a class="jxr_linenumber" name="L198" href="#L198">198</a>           }
<a class="jxr_linenumber" name="L199" href="#L199">199</a>         };
<a class="jxr_linenumber" name="L200" href="#L200">200</a>       }
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     };
<a class="jxr_linenumber" name="L202" href="#L202">202</a>   }
<a class="jxr_linenumber" name="L203" href="#L203">203</a> 
<a class="jxr_linenumber" name="L204" href="#L204">204</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L205" href="#L205">205</a> <em class="jxr_javadoccomment">   * Returns the reversed view of this converter, which converts {@code this.convert(a)} back to a</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a> <em class="jxr_javadoccomment">   * value roughly equivalent to {@code a}.</em>
<a class="jxr_linenumber" name="L207" href="#L207">207</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L208" href="#L208">208</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned converter is serializable if {@code this} converter is.</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L210" href="#L210">210</a>   <em class="jxr_comment">// TODO(user): Make this method final</em>
<a class="jxr_linenumber" name="L211" href="#L211">211</a>   <strong class="jxr_keyword">public</strong> Converter&lt;B, A&gt; reverse() {
<a class="jxr_linenumber" name="L212" href="#L212">212</a>     Converter&lt;B, A&gt; result = reverse;
<a class="jxr_linenumber" name="L213" href="#L213">213</a>     <strong class="jxr_keyword">return</strong> (result == <strong class="jxr_keyword">null</strong>) ? reverse = <strong class="jxr_keyword">new</strong> ReverseConverter&lt;A, B&gt;(<strong class="jxr_keyword">this</strong>) : result;
<a class="jxr_linenumber" name="L214" href="#L214">214</a>   }
<a class="jxr_linenumber" name="L215" href="#L215">215</a> 
<a class="jxr_linenumber" name="L216" href="#L216">216</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> ReverseConverter&lt;A, B&gt;
<a class="jxr_linenumber" name="L217" href="#L217">217</a>       <strong class="jxr_keyword">extends</strong> Converter&lt;B, A&gt; <strong class="jxr_keyword">implements</strong> Serializable {
<a class="jxr_linenumber" name="L218" href="#L218">218</a>     <strong class="jxr_keyword">final</strong> Converter&lt;A, B&gt; original;
<a class="jxr_linenumber" name="L219" href="#L219">219</a> 
<a class="jxr_linenumber" name="L220" href="#L220">220</a>     <a href="../../../../com/google/common/base/Converter.html">ReverseConverter</a>(Converter&lt;A, B&gt; original) {
<a class="jxr_linenumber" name="L221" href="#L221">221</a>       <strong class="jxr_keyword">this</strong>.original = original;
<a class="jxr_linenumber" name="L222" href="#L222">222</a>     }
<a class="jxr_linenumber" name="L223" href="#L223">223</a> 
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L225" href="#L225">225</a> <em class="jxr_comment">     * These gymnastics are a little confusing. Basically this class has neither legacy nor</em>
<a class="jxr_linenumber" name="L226" href="#L226">226</a> <em class="jxr_comment">     * non-legacy behavior; it just needs to let the behavior of the backing converter shine</em>
<a class="jxr_linenumber" name="L227" href="#L227">227</a> <em class="jxr_comment">     * through. So, we override the correctedDo* methods, after which the do* methods should never</em>
<a class="jxr_linenumber" name="L228" href="#L228">228</a> <em class="jxr_comment">     * be reached.</em>
<a class="jxr_linenumber" name="L229" href="#L229">229</a> <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L230" href="#L230">230</a> 
<a class="jxr_linenumber" name="L231" href="#L231">231</a>     @Override
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     <strong class="jxr_keyword">protected</strong> A doForward(B b) {
<a class="jxr_linenumber" name="L233" href="#L233">233</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionError();
<a class="jxr_linenumber" name="L234" href="#L234">234</a>     }
<a class="jxr_linenumber" name="L235" href="#L235">235</a> 
<a class="jxr_linenumber" name="L236" href="#L236">236</a>     @Override
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     <strong class="jxr_keyword">protected</strong> B doBackward(A a) {
<a class="jxr_linenumber" name="L238" href="#L238">238</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionError();
<a class="jxr_linenumber" name="L239" href="#L239">239</a>     }
<a class="jxr_linenumber" name="L240" href="#L240">240</a> 
<a class="jxr_linenumber" name="L241" href="#L241">241</a>     @Override
<a class="jxr_linenumber" name="L242" href="#L242">242</a>     @Nullable
<a class="jxr_linenumber" name="L243" href="#L243">243</a>     A correctedDoForward(@Nullable B b) {
<a class="jxr_linenumber" name="L244" href="#L244">244</a>       <strong class="jxr_keyword">return</strong> original.correctedDoBackward(b);
<a class="jxr_linenumber" name="L245" href="#L245">245</a>     }
<a class="jxr_linenumber" name="L246" href="#L246">246</a> 
<a class="jxr_linenumber" name="L247" href="#L247">247</a>     @Override
<a class="jxr_linenumber" name="L248" href="#L248">248</a>     @Nullable
<a class="jxr_linenumber" name="L249" href="#L249">249</a>     B correctedDoBackward(@Nullable A a) {
<a class="jxr_linenumber" name="L250" href="#L250">250</a>       <strong class="jxr_keyword">return</strong> original.correctedDoForward(a);
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     }
<a class="jxr_linenumber" name="L252" href="#L252">252</a> 
<a class="jxr_linenumber" name="L253" href="#L253">253</a>     @Override
<a class="jxr_linenumber" name="L254" href="#L254">254</a>     <strong class="jxr_keyword">public</strong> Converter&lt;A, B&gt; reverse() {
<a class="jxr_linenumber" name="L255" href="#L255">255</a>       <strong class="jxr_keyword">return</strong> original;
<a class="jxr_linenumber" name="L256" href="#L256">256</a>     }
<a class="jxr_linenumber" name="L257" href="#L257">257</a> 
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     @Override
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> equals(@Nullable Object object) {
<a class="jxr_linenumber" name="L260" href="#L260">260</a>       <strong class="jxr_keyword">if</strong> (object instanceof ReverseConverter) {
<a class="jxr_linenumber" name="L261" href="#L261">261</a>         ReverseConverter&lt;?, ?&gt; that = (ReverseConverter&lt;?, ?&gt;) object;
<a class="jxr_linenumber" name="L262" href="#L262">262</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>.original.equals(that.original);
<a class="jxr_linenumber" name="L263" href="#L263">263</a>       }
<a class="jxr_linenumber" name="L264" href="#L264">264</a>       <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L265" href="#L265">265</a>     }
<a class="jxr_linenumber" name="L266" href="#L266">266</a> 
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     @Override
<a class="jxr_linenumber" name="L268" href="#L268">268</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> hashCode() {
<a class="jxr_linenumber" name="L269" href="#L269">269</a>       <strong class="jxr_keyword">return</strong> ~original.hashCode();
<a class="jxr_linenumber" name="L270" href="#L270">270</a>     }
<a class="jxr_linenumber" name="L271" href="#L271">271</a> 
<a class="jxr_linenumber" name="L272" href="#L272">272</a>     @Override
<a class="jxr_linenumber" name="L273" href="#L273">273</a>     <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L274" href="#L274">274</a>       <strong class="jxr_keyword">return</strong> original + <span class="jxr_string">".reverse()"</span>;
<a class="jxr_linenumber" name="L275" href="#L275">275</a>     }
<a class="jxr_linenumber" name="L276" href="#L276">276</a> 
<a class="jxr_linenumber" name="L277" href="#L277">277</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 0L;
<a class="jxr_linenumber" name="L278" href="#L278">278</a>   }
<a class="jxr_linenumber" name="L279" href="#L279">279</a> 
<a class="jxr_linenumber" name="L280" href="#L280">280</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a> <em class="jxr_javadoccomment">   * Returns a converter whose {@code convert} method applies {@code secondConverter} to the result</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a> <em class="jxr_javadoccomment">   * of this converter. Its {@code reverse} method applies the converters in reverse order.</em>
<a class="jxr_linenumber" name="L283" href="#L283">283</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L284" href="#L284">284</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned converter is serializable if {@code this} converter and {@code secondConverter}</em>
<a class="jxr_linenumber" name="L285" href="#L285">285</a> <em class="jxr_javadoccomment">   * are.</em>
<a class="jxr_linenumber" name="L286" href="#L286">286</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L287" href="#L287">287</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> &lt;C&gt; Converter&lt;A, C&gt; andThen(Converter&lt;B, C&gt; secondConverter) {
<a class="jxr_linenumber" name="L288" href="#L288">288</a>     <strong class="jxr_keyword">return</strong> doAndThen(secondConverter);
<a class="jxr_linenumber" name="L289" href="#L289">289</a>   }
<a class="jxr_linenumber" name="L290" href="#L290">290</a> 
<a class="jxr_linenumber" name="L291" href="#L291">291</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L292" href="#L292">292</a> <em class="jxr_javadoccomment">   * Package-private non-final implementation of andThen() so only we can override it.</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L294" href="#L294">294</a>   &lt;C&gt; Converter&lt;A, C&gt; doAndThen(Converter&lt;B, C&gt; secondConverter) {
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> ConverterComposition&lt;A, B, C&gt;(<strong class="jxr_keyword">this</strong>, checkNotNull(secondConverter));
<a class="jxr_linenumber" name="L296" href="#L296">296</a>   }
<a class="jxr_linenumber" name="L297" href="#L297">297</a> 
<a class="jxr_linenumber" name="L298" href="#L298">298</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> ConverterComposition&lt;A, B, C&gt;
<a class="jxr_linenumber" name="L299" href="#L299">299</a>       <strong class="jxr_keyword">extends</strong> Converter&lt;A, C&gt; <strong class="jxr_keyword">implements</strong> Serializable {
<a class="jxr_linenumber" name="L300" href="#L300">300</a>     <strong class="jxr_keyword">final</strong> Converter&lt;A, B&gt; first;
<a class="jxr_linenumber" name="L301" href="#L301">301</a>     <strong class="jxr_keyword">final</strong> Converter&lt;B, C&gt; second;
<a class="jxr_linenumber" name="L302" href="#L302">302</a> 
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     <a href="../../../../com/google/common/base/Converter.html">ConverterComposition</a>(Converter&lt;A, B&gt; first, Converter&lt;B, C&gt; second) {
<a class="jxr_linenumber" name="L304" href="#L304">304</a>       <strong class="jxr_keyword">this</strong>.first = first;
<a class="jxr_linenumber" name="L305" href="#L305">305</a>       <strong class="jxr_keyword">this</strong>.second = second;
<a class="jxr_linenumber" name="L306" href="#L306">306</a>     }
<a class="jxr_linenumber" name="L307" href="#L307">307</a> 
<a class="jxr_linenumber" name="L308" href="#L308">308</a>     <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L309" href="#L309">309</a> <em class="jxr_comment">     * These gymnastics are a little confusing. Basically this class has neither legacy nor</em>
<a class="jxr_linenumber" name="L310" href="#L310">310</a> <em class="jxr_comment">     * non-legacy behavior; it just needs to let the behaviors of the backing converters shine</em>
<a class="jxr_linenumber" name="L311" href="#L311">311</a> <em class="jxr_comment">     * through (which might even differ from each other!). So, we override the correctedDo* methods,</em>
<a class="jxr_linenumber" name="L312" href="#L312">312</a> <em class="jxr_comment">     * after which the do* methods should never be reached.</em>
<a class="jxr_linenumber" name="L313" href="#L313">313</a> <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L314" href="#L314">314</a> 
<a class="jxr_linenumber" name="L315" href="#L315">315</a>     @Override
<a class="jxr_linenumber" name="L316" href="#L316">316</a>     <strong class="jxr_keyword">protected</strong> C doForward(A a) {
<a class="jxr_linenumber" name="L317" href="#L317">317</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionError();
<a class="jxr_linenumber" name="L318" href="#L318">318</a>     }
<a class="jxr_linenumber" name="L319" href="#L319">319</a> 
<a class="jxr_linenumber" name="L320" href="#L320">320</a>     @Override
<a class="jxr_linenumber" name="L321" href="#L321">321</a>     <strong class="jxr_keyword">protected</strong> A doBackward(C c) {
<a class="jxr_linenumber" name="L322" href="#L322">322</a>       <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> AssertionError();
<a class="jxr_linenumber" name="L323" href="#L323">323</a>     }
<a class="jxr_linenumber" name="L324" href="#L324">324</a> 
<a class="jxr_linenumber" name="L325" href="#L325">325</a>     @Override
<a class="jxr_linenumber" name="L326" href="#L326">326</a>     @Nullable
<a class="jxr_linenumber" name="L327" href="#L327">327</a>     C correctedDoForward(@Nullable A a) {
<a class="jxr_linenumber" name="L328" href="#L328">328</a>       <strong class="jxr_keyword">return</strong> second.correctedDoForward(first.correctedDoForward(a));
<a class="jxr_linenumber" name="L329" href="#L329">329</a>     }
<a class="jxr_linenumber" name="L330" href="#L330">330</a> 
<a class="jxr_linenumber" name="L331" href="#L331">331</a>     @Override
<a class="jxr_linenumber" name="L332" href="#L332">332</a>     @Nullable
<a class="jxr_linenumber" name="L333" href="#L333">333</a>     A correctedDoBackward(@Nullable C c) {
<a class="jxr_linenumber" name="L334" href="#L334">334</a>       <strong class="jxr_keyword">return</strong> first.correctedDoBackward(second.correctedDoBackward(c));
<a class="jxr_linenumber" name="L335" href="#L335">335</a>     }
<a class="jxr_linenumber" name="L336" href="#L336">336</a> 
<a class="jxr_linenumber" name="L337" href="#L337">337</a>     @Override
<a class="jxr_linenumber" name="L338" href="#L338">338</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> equals(@Nullable Object object) {
<a class="jxr_linenumber" name="L339" href="#L339">339</a>       <strong class="jxr_keyword">if</strong> (object instanceof ConverterComposition) {
<a class="jxr_linenumber" name="L340" href="#L340">340</a>         ConverterComposition&lt;?, ?, ?&gt; that = (ConverterComposition&lt;?, ?, ?&gt;) object;
<a class="jxr_linenumber" name="L341" href="#L341">341</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>.first.equals(that.first)
<a class="jxr_linenumber" name="L342" href="#L342">342</a>             &amp;&amp; <strong class="jxr_keyword">this</strong>.second.equals(that.second);
<a class="jxr_linenumber" name="L343" href="#L343">343</a>       }
<a class="jxr_linenumber" name="L344" href="#L344">344</a>       <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L345" href="#L345">345</a>     }
<a class="jxr_linenumber" name="L346" href="#L346">346</a> 
<a class="jxr_linenumber" name="L347" href="#L347">347</a>     @Override
<a class="jxr_linenumber" name="L348" href="#L348">348</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> hashCode() {
<a class="jxr_linenumber" name="L349" href="#L349">349</a>       <strong class="jxr_keyword">return</strong> 31 * first.hashCode() + second.hashCode();
<a class="jxr_linenumber" name="L350" href="#L350">350</a>     }
<a class="jxr_linenumber" name="L351" href="#L351">351</a> 
<a class="jxr_linenumber" name="L352" href="#L352">352</a>     @Override
<a class="jxr_linenumber" name="L353" href="#L353">353</a>     <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L354" href="#L354">354</a>       <strong class="jxr_keyword">return</strong> first + <span class="jxr_string">".andThen("</span> + second + <span class="jxr_string">")"</span>;
<a class="jxr_linenumber" name="L355" href="#L355">355</a>     }
<a class="jxr_linenumber" name="L356" href="#L356">356</a> 
<a class="jxr_linenumber" name="L357" href="#L357">357</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 0L;
<a class="jxr_linenumber" name="L358" href="#L358">358</a>   }
<a class="jxr_linenumber" name="L359" href="#L359">359</a> 
<a class="jxr_linenumber" name="L360" href="#L360">360</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L361" href="#L361">361</a> <em class="jxr_javadoccomment">   * @deprecated Provided to satisfy the {@code Function} interface; use {@link #convert} instead.</em>
<a class="jxr_linenumber" name="L362" href="#L362">362</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L363" href="#L363">363</a>   @Deprecated
<a class="jxr_linenumber" name="L364" href="#L364">364</a>   @Override
<a class="jxr_linenumber" name="L365" href="#L365">365</a>   @Nullable
<a class="jxr_linenumber" name="L366" href="#L366">366</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> B apply(@Nullable A a) {
<a class="jxr_linenumber" name="L367" href="#L367">367</a>     <strong class="jxr_keyword">return</strong> convert(a);
<a class="jxr_linenumber" name="L368" href="#L368">368</a>   }
<a class="jxr_linenumber" name="L369" href="#L369">369</a> 
<a class="jxr_linenumber" name="L370" href="#L370">370</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L371" href="#L371">371</a> <em class="jxr_javadoccomment">   * Indicates whether another object is equal to this converter.</em>
<a class="jxr_linenumber" name="L372" href="#L372">372</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L373" href="#L373">373</a> <em class="jxr_javadoccomment">   * &lt;p&gt;Most implementations will have no reason to override the behavior of {@link Object#equals}.</em>
<a class="jxr_linenumber" name="L374" href="#L374">374</a> <em class="jxr_javadoccomment">   * However, an implementation may also choose to return {@code true} whenever {@code object} is a</em>
<a class="jxr_linenumber" name="L375" href="#L375">375</a> <em class="jxr_javadoccomment">   * {@link Converter} that it considers &lt;i&gt;interchangeable&lt;/i&gt; with this one. "Interchangeable"</em>
<a class="jxr_linenumber" name="L376" href="#L376">376</a> <em class="jxr_javadoccomment">   * &lt;i&gt;typically&lt;/i&gt; means that {@code Objects.equal(this.convert(a), that.convert(a))} is true for</em>
<a class="jxr_linenumber" name="L377" href="#L377">377</a> <em class="jxr_javadoccomment">   * all {@code a} of type {@code A} (and similarly for {@code reverse}). Note that a {@code false}</em>
<a class="jxr_linenumber" name="L378" href="#L378">378</a> <em class="jxr_javadoccomment">   * result from this method does not imply that the converters are known &lt;i&gt;not&lt;/i&gt; to be</em>
<a class="jxr_linenumber" name="L379" href="#L379">379</a> <em class="jxr_javadoccomment">   * interchangeable.</em>
<a class="jxr_linenumber" name="L380" href="#L380">380</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L381" href="#L381">381</a>   @Override
<a class="jxr_linenumber" name="L382" href="#L382">382</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> equals(@Nullable Object object) {
<a class="jxr_linenumber" name="L383" href="#L383">383</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">super</strong>.equals(object);
<a class="jxr_linenumber" name="L384" href="#L384">384</a>   }
<a class="jxr_linenumber" name="L385" href="#L385">385</a> 
<a class="jxr_linenumber" name="L386" href="#L386">386</a>   <em class="jxr_comment">// Static converters</em>
<a class="jxr_linenumber" name="L387" href="#L387">387</a> 
<a class="jxr_linenumber" name="L388" href="#L388">388</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L389" href="#L389">389</a> <em class="jxr_javadoccomment">   * Returns a converter based on &lt;i&gt;existing&lt;/i&gt; forward and backward functions. Note that it is</em>
<a class="jxr_linenumber" name="L390" href="#L390">390</a> <em class="jxr_javadoccomment">   * unnecessary to create &lt;i&gt;new&lt;/i&gt; classes implementing {@code Function} just to pass them in</em>
<a class="jxr_linenumber" name="L391" href="#L391">391</a> <em class="jxr_javadoccomment">   * here. Instead, simply subclass {@code Converter} and implement its {@link #doForward} and</em>
<a class="jxr_linenumber" name="L392" href="#L392">392</a> <em class="jxr_javadoccomment">   * {@link #doBackward} methods directly.</em>
<a class="jxr_linenumber" name="L393" href="#L393">393</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L394" href="#L394">394</a> <em class="jxr_javadoccomment">   * &lt;p&gt;These functions will never be passed {@code null} and must not under any circumstances</em>
<a class="jxr_linenumber" name="L395" href="#L395">395</a> <em class="jxr_javadoccomment">   * return {@code null}. If a value cannot be converted, the function should throw an unchecked</em>
<a class="jxr_linenumber" name="L396" href="#L396">396</a> <em class="jxr_javadoccomment">   * exception (typically, but not necessarily, {@link IllegalArgumentException}).</em>
<a class="jxr_linenumber" name="L397" href="#L397">397</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L398" href="#L398">398</a> <em class="jxr_javadoccomment">   * &lt;p&gt;The returned converter is serializable if both provided functions are.</em>
<a class="jxr_linenumber" name="L399" href="#L399">399</a> <em class="jxr_javadoccomment">   *</em>
<a class="jxr_linenumber" name="L400" href="#L400">400</a> <em class="jxr_javadoccomment">   * @since 17.0</em>
<a class="jxr_linenumber" name="L401" href="#L401">401</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L402" href="#L402">402</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;A, B&gt; Converter&lt;A, B&gt; from(
<a class="jxr_linenumber" name="L403" href="#L403">403</a>       Function&lt;? <strong class="jxr_keyword">super</strong> A, ? <strong class="jxr_keyword">extends</strong> B&gt; forwardFunction,
<a class="jxr_linenumber" name="L404" href="#L404">404</a>       Function&lt;? <strong class="jxr_keyword">super</strong> B, ? <strong class="jxr_keyword">extends</strong> A&gt; backwardFunction) {
<a class="jxr_linenumber" name="L405" href="#L405">405</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FunctionBasedConverter&lt;A, B&gt;(forwardFunction, backwardFunction);
<a class="jxr_linenumber" name="L406" href="#L406">406</a>   }
<a class="jxr_linenumber" name="L407" href="#L407">407</a> 
<a class="jxr_linenumber" name="L408" href="#L408">408</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> FunctionBasedConverter&lt;A, B&gt;
<a class="jxr_linenumber" name="L409" href="#L409">409</a>       <strong class="jxr_keyword">extends</strong> Converter&lt;A, B&gt; <strong class="jxr_keyword">implements</strong> Serializable {
<a class="jxr_linenumber" name="L410" href="#L410">410</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> Function&lt;? <strong class="jxr_keyword">super</strong> A, ? <strong class="jxr_keyword">extends</strong> B&gt; forwardFunction;
<a class="jxr_linenumber" name="L411" href="#L411">411</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> Function&lt;? <strong class="jxr_keyword">super</strong> B, ? <strong class="jxr_keyword">extends</strong> A&gt; backwardFunction;
<a class="jxr_linenumber" name="L412" href="#L412">412</a> 
<a class="jxr_linenumber" name="L413" href="#L413">413</a>     <strong class="jxr_keyword">private</strong> <a href="../../../../com/google/common/base/Converter.html">FunctionBasedConverter</a>(
<a class="jxr_linenumber" name="L414" href="#L414">414</a>         Function&lt;? <strong class="jxr_keyword">super</strong> A, ? <strong class="jxr_keyword">extends</strong> B&gt; forwardFunction,
<a class="jxr_linenumber" name="L415" href="#L415">415</a>         Function&lt;? <strong class="jxr_keyword">super</strong> B, ? <strong class="jxr_keyword">extends</strong> A&gt; backwardFunction) {
<a class="jxr_linenumber" name="L416" href="#L416">416</a>       <strong class="jxr_keyword">this</strong>.forwardFunction = checkNotNull(forwardFunction);
<a class="jxr_linenumber" name="L417" href="#L417">417</a>       <strong class="jxr_keyword">this</strong>.backwardFunction = checkNotNull(backwardFunction);
<a class="jxr_linenumber" name="L418" href="#L418">418</a>     }
<a class="jxr_linenumber" name="L419" href="#L419">419</a> 
<a class="jxr_linenumber" name="L420" href="#L420">420</a>     @Override
<a class="jxr_linenumber" name="L421" href="#L421">421</a>     <strong class="jxr_keyword">protected</strong> B doForward(A a) {
<a class="jxr_linenumber" name="L422" href="#L422">422</a>       <strong class="jxr_keyword">return</strong> forwardFunction.apply(a);
<a class="jxr_linenumber" name="L423" href="#L423">423</a>     }
<a class="jxr_linenumber" name="L424" href="#L424">424</a> 
<a class="jxr_linenumber" name="L425" href="#L425">425</a>     @Override
<a class="jxr_linenumber" name="L426" href="#L426">426</a>     <strong class="jxr_keyword">protected</strong> A doBackward(B b) {
<a class="jxr_linenumber" name="L427" href="#L427">427</a>       <strong class="jxr_keyword">return</strong> backwardFunction.apply(b);
<a class="jxr_linenumber" name="L428" href="#L428">428</a>     }
<a class="jxr_linenumber" name="L429" href="#L429">429</a> 
<a class="jxr_linenumber" name="L430" href="#L430">430</a>     @Override
<a class="jxr_linenumber" name="L431" href="#L431">431</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> equals(@Nullable Object object) {
<a class="jxr_linenumber" name="L432" href="#L432">432</a>       <strong class="jxr_keyword">if</strong> (object instanceof FunctionBasedConverter) {
<a class="jxr_linenumber" name="L433" href="#L433">433</a>         FunctionBasedConverter&lt;?, ?&gt; that = (FunctionBasedConverter&lt;?, ?&gt;) object;
<a class="jxr_linenumber" name="L434" href="#L434">434</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>.forwardFunction.equals(that.forwardFunction)
<a class="jxr_linenumber" name="L435" href="#L435">435</a>             &amp;&amp; <strong class="jxr_keyword">this</strong>.backwardFunction.equals(that.backwardFunction);
<a class="jxr_linenumber" name="L436" href="#L436">436</a>       }
<a class="jxr_linenumber" name="L437" href="#L437">437</a>       <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L438" href="#L438">438</a>     }
<a class="jxr_linenumber" name="L439" href="#L439">439</a> 
<a class="jxr_linenumber" name="L440" href="#L440">440</a>     @Override
<a class="jxr_linenumber" name="L441" href="#L441">441</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> hashCode() {
<a class="jxr_linenumber" name="L442" href="#L442">442</a>       <strong class="jxr_keyword">return</strong> forwardFunction.hashCode() * 31 + backwardFunction.hashCode();
<a class="jxr_linenumber" name="L443" href="#L443">443</a>     }
<a class="jxr_linenumber" name="L444" href="#L444">444</a> 
<a class="jxr_linenumber" name="L445" href="#L445">445</a>     @Override
<a class="jxr_linenumber" name="L446" href="#L446">446</a>     <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L447" href="#L447">447</a>       <strong class="jxr_keyword">return</strong> <span class="jxr_string">"Converter.from("</span> + forwardFunction + <span class="jxr_string">", "</span> + backwardFunction + <span class="jxr_string">")"</span>;
<a class="jxr_linenumber" name="L448" href="#L448">448</a>     }
<a class="jxr_linenumber" name="L449" href="#L449">449</a>   }
<a class="jxr_linenumber" name="L450" href="#L450">450</a> 
<a class="jxr_linenumber" name="L451" href="#L451">451</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L452" href="#L452">452</a> <em class="jxr_javadoccomment">   * Returns a serializable converter that always converts or reverses an object to itself.</em>
<a class="jxr_linenumber" name="L453" href="#L453">453</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L454" href="#L454">454</a>   @SuppressWarnings(<span class="jxr_string">"unchecked"</span>) <em class="jxr_comment">// implementation is "fully variant"</em>
<a class="jxr_linenumber" name="L455" href="#L455">455</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T&gt; Converter&lt;T, T&gt; identity() {
<a class="jxr_linenumber" name="L456" href="#L456">456</a>     <strong class="jxr_keyword">return</strong> (IdentityConverter&lt;T&gt;) IdentityConverter.INSTANCE;
<a class="jxr_linenumber" name="L457" href="#L457">457</a>   }
<a class="jxr_linenumber" name="L458" href="#L458">458</a> 
<a class="jxr_linenumber" name="L459" href="#L459">459</a>   <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L460" href="#L460">460</a> <em class="jxr_javadoccomment">   * A converter that always converts or reverses an object to itself. Note that T is now a</em>
<a class="jxr_linenumber" name="L461" href="#L461">461</a> <em class="jxr_javadoccomment">   * "pass-through type".</em>
<a class="jxr_linenumber" name="L462" href="#L462">462</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L463" href="#L463">463</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> IdentityConverter&lt;T&gt; <strong class="jxr_keyword">extends</strong> Converter&lt;T, T&gt; <strong class="jxr_keyword">implements</strong> Serializable {
<a class="jxr_linenumber" name="L464" href="#L464">464</a>     <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../com/google/common/base/Converter.html">IdentityConverter</a> INSTANCE = <strong class="jxr_keyword">new</strong> <a href="../../../../com/google/common/base/Converter.html">IdentityConverter</a>();
<a class="jxr_linenumber" name="L465" href="#L465">465</a> 
<a class="jxr_linenumber" name="L466" href="#L466">466</a>     @Override
<a class="jxr_linenumber" name="L467" href="#L467">467</a>     <strong class="jxr_keyword">protected</strong> T doForward(T t) {
<a class="jxr_linenumber" name="L468" href="#L468">468</a>       <strong class="jxr_keyword">return</strong> t;
<a class="jxr_linenumber" name="L469" href="#L469">469</a>     }
<a class="jxr_linenumber" name="L470" href="#L470">470</a> 
<a class="jxr_linenumber" name="L471" href="#L471">471</a>     @Override
<a class="jxr_linenumber" name="L472" href="#L472">472</a>     <strong class="jxr_keyword">protected</strong> T doBackward(T t) {
<a class="jxr_linenumber" name="L473" href="#L473">473</a>       <strong class="jxr_keyword">return</strong> t;
<a class="jxr_linenumber" name="L474" href="#L474">474</a>     }
<a class="jxr_linenumber" name="L475" href="#L475">475</a> 
<a class="jxr_linenumber" name="L476" href="#L476">476</a>     @Override
<a class="jxr_linenumber" name="L477" href="#L477">477</a>     <strong class="jxr_keyword">public</strong> IdentityConverter&lt;T&gt; reverse() {
<a class="jxr_linenumber" name="L478" href="#L478">478</a>       <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">this</strong>;
<a class="jxr_linenumber" name="L479" href="#L479">479</a>     }
<a class="jxr_linenumber" name="L480" href="#L480">480</a> 
<a class="jxr_linenumber" name="L481" href="#L481">481</a>     @Override
<a class="jxr_linenumber" name="L482" href="#L482">482</a>     &lt;S&gt; Converter&lt;T, S&gt; doAndThen(Converter&lt;T, S&gt; otherConverter) {
<a class="jxr_linenumber" name="L483" href="#L483">483</a>       <strong class="jxr_keyword">return</strong> checkNotNull(otherConverter, <span class="jxr_string">"otherConverter"</span>);
<a class="jxr_linenumber" name="L484" href="#L484">484</a>     }
<a class="jxr_linenumber" name="L485" href="#L485">485</a> 
<a class="jxr_linenumber" name="L486" href="#L486">486</a>     <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L487" href="#L487">487</a> <em class="jxr_comment">     * We *could* override convertAll() to return its input, but it's a rather pointless</em>
<a class="jxr_linenumber" name="L488" href="#L488">488</a> <em class="jxr_comment">     * optimization and opened up a weird type-safety problem.</em>
<a class="jxr_linenumber" name="L489" href="#L489">489</a> <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L490" href="#L490">490</a> 
<a class="jxr_linenumber" name="L491" href="#L491">491</a>     @Override
<a class="jxr_linenumber" name="L492" href="#L492">492</a>     <strong class="jxr_keyword">public</strong> String toString() {
<a class="jxr_linenumber" name="L493" href="#L493">493</a>       <strong class="jxr_keyword">return</strong> <span class="jxr_string">"Converter.identity()"</span>;
<a class="jxr_linenumber" name="L494" href="#L494">494</a>     }
<a class="jxr_linenumber" name="L495" href="#L495">495</a> 
<a class="jxr_linenumber" name="L496" href="#L496">496</a>     <strong class="jxr_keyword">private</strong> Object readResolve() {
<a class="jxr_linenumber" name="L497" href="#L497">497</a>       <strong class="jxr_keyword">return</strong> INSTANCE;
<a class="jxr_linenumber" name="L498" href="#L498">498</a>     }
<a class="jxr_linenumber" name="L499" href="#L499">499</a> 
<a class="jxr_linenumber" name="L500" href="#L500">500</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 0L;
<a class="jxr_linenumber" name="L501" href="#L501">501</a>   }
<a class="jxr_linenumber" name="L502" href="#L502">502</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2015. All rights reserved.</div>
</body>
</html>
